
Lab_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cbc  08003cbc  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003cbc  08003cbc  00004cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc4  08003cc4  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cc8  08003cc8  00004cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003ccc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000060  08003d2c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08003d2c  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d3f  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000166c  00000000  00000000  0000edcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00010440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000716  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015036  00000000  00000000  0001145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc7b  00000000  00000000  00026494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a46  00000000  00000000  0003210f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7b55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa4  00000000  00000000  000b7b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ba63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c20 	.word	0x08003c20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003c20 	.word	0x08003c20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fae7 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f853 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f915 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8e9 	bl	8000758 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000586:	f000 f8b9 	bl	80006fc <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_I2C_Master_Transmit(&hi2c1, LM75_ADDRESS, &LM75_TEMP_ADDRESS, 1, 10); //Communicate to the temperature sensor. 1=number of byte to send, 10=timeout
 800058a:	4b20      	ldr	r3, [pc, #128]	@ (800060c <main+0x9c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	230a      	movs	r3, #10
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2301      	movs	r3, #1
 8000596:	4a1e      	ldr	r2, [pc, #120]	@ (8000610 <main+0xa0>)
 8000598:	481e      	ldr	r0, [pc, #120]	@ (8000614 <main+0xa4>)
 800059a:	f000 ff33 	bl	8001404 <HAL_I2C_Master_Transmit>
  int count=0;
 800059e:	2300      	movs	r3, #0
 80005a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (1)
  {
	  uint8_t temperature=0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  int len=0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	  char str[32];
	  if(HAL_I2C_Master_Receive(&hi2c1, LM75_ADDRESS+1, &temperature, 1, 20) == HAL_OK){ //retreive data from the slave (the temperature sensor)
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <main+0x9c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b299      	uxth	r1, r3
 80005b4:	f107 0227 	add.w	r2, r7, #39	@ 0x27
 80005b8:	2314      	movs	r3, #20
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	4815      	ldr	r0, [pc, #84]	@ (8000614 <main+0xa4>)
 80005c0:	f001 f81e 	bl	8001600 <HAL_I2C_Master_Receive>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10a      	bne.n	80005e0 <main+0x70>
		  len = snprintf(str, sizeof(str),"%d, Temperature: %d C \r\n", count, temperature);
 80005ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80005ce:	1d38      	adds	r0, r7, #4
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005d4:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <main+0xa8>)
 80005d6:	2120      	movs	r1, #32
 80005d8:	f002 fe6e 	bl	80032b8 <sniprintf>
 80005dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80005de:	e006      	b.n	80005ee <main+0x7e>
	  }else{
		  len = snprintf(str, sizeof(str),"Error reading from LM75 \r\n");
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <main+0xac>)
 80005e4:	2120      	movs	r1, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fe66 	bl	80032b8 <sniprintf>
 80005ec:	62b8      	str	r0, [r7, #40]	@ 0x28
	  }
	  HAL_UART_Transmit(&huart2,str,len,100);
 80005ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	1d39      	adds	r1, r7, #4
 80005f4:	2364      	movs	r3, #100	@ 0x64
 80005f6:	480a      	ldr	r0, [pc, #40]	@ (8000620 <main+0xb0>)
 80005f8:	f002 faa2 	bl	8002b40 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000600:	f000 fb14 	bl	8000c2c <HAL_Delay>
	  count++;
 8000604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000606:	3301      	adds	r3, #1
 8000608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  {
 800060a:	e7ca      	b.n	80005a2 <main+0x32>
 800060c:	20000000 	.word	0x20000000
 8000610:	20000118 	.word	0x20000118
 8000614:	2000007c 	.word	0x2000007c
 8000618:	08003c38 	.word	0x08003c38
 800061c:	08003c54 	.word	0x08003c54
 8000620:	200000d0 	.word	0x200000d0

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fe74 	bl	8003320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd4>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000698:	2310      	movs	r3, #16
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800069c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a2:	2304      	movs	r3, #4
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fd5e 	bl	8002170 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ba:	f000 f8e5 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 ffc0 	bl	8002660 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006e6:	f000 f8cf 	bl	8000888 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f000 fd1f 	bl	800117c <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8a0 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000007c 	.word	0x2000007c
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f002 f986 	bl	8002aa0 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f875 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000d0 	.word	0x200000d0
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a25      	ldr	r2, [pc, #148]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fc86 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_GPIO_Init+0xd8>)
 8000854:	f000 faf4 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_GPIO_Init+0xd4>)
 8000870:	f000 fae6 	bl	8000e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 fa80 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	@ (8000968 <HAL_I2C_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12c      	bne.n	8000960 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a17      	ldr	r2, [pc, #92]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000922:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000928:	2312      	movs	r3, #18
 800092a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000930:	2303      	movs	r3, #3
 8000932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000934:	2304      	movs	r3, #4
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	@ (8000970 <HAL_I2C_MspInit+0x8c>)
 8000940:	f000 fa7e 	bl	8000e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	4a07      	ldr	r2, [pc, #28]	@ (800096c <HAL_I2C_MspInit+0x88>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000952:	6413      	str	r3, [r2, #64]	@ 0x40
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_I2C_MspInit+0x88>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40005400 	.word	0x40005400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12b      	bne.n	80009ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	@ (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ea:	f000 fa29 	bl	8000e40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5a:	f000 f8c7 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f002 fc4c 	bl	8003330 <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20018000 	.word	0x20018000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	2000011c 	.word	0x2000011c
 8000acc:	20000270 	.word	0x20000270

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <SystemInit+0x20>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <SystemInit+0x20>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000af8:	f7ff ffea 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afe:	490d      	ldr	r1, [pc, #52]	@ (8000b34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b14:	4c0a      	ldr	r4, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 fc0b 	bl	800333c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd23 	bl	8000570 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b38:	08003ccc 	.word	0x08003ccc
  ldr r2, =_sbss
 8000b3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b40:	2000026c 	.word	0x2000026c

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f931 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe8a 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f93b 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f911 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	@ (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000004 	.word	0x20000004
 8000be4:	2000000c 	.word	0x2000000c
 8000be8:	20000008 	.word	0x20000008

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000120 	.word	0x20000120

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000120 	.word	0x20000120

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000000c 	.word	0x2000000c

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	@ (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff47 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5c 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
 8000e5a:	e159      	b.n	8001110 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f040 8148 	bne.w	800110a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d017      	beq.n	8000f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d123      	bne.n	8000f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	69b9      	ldr	r1, [r7, #24]
 8000f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0203 	and.w	r2, r3, #3
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a2 	beq.w	800110a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b57      	ldr	r3, [pc, #348]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	4a56      	ldr	r2, [pc, #344]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fd6:	4b54      	ldr	r3, [pc, #336]	@ (8001128 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe2:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_GPIO_Init+0x2ec>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a49      	ldr	r2, [pc, #292]	@ (8001130 <HAL_GPIO_Init+0x2f0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x202>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <HAL_GPIO_Init+0x2f4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x1fe>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a47      	ldr	r2, [pc, #284]	@ (8001138 <HAL_GPIO_Init+0x2f8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x1fa>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a46      	ldr	r2, [pc, #280]	@ (800113c <HAL_GPIO_Init+0x2fc>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x1f6>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a45      	ldr	r2, [pc, #276]	@ (8001140 <HAL_GPIO_Init+0x300>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x1f2>
 800102e:	2304      	movs	r3, #4
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001032:	2307      	movs	r3, #7
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x204>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x204>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x204>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4935      	ldr	r1, [pc, #212]	@ (800112c <HAL_GPIO_Init+0x2ec>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a2f      	ldr	r2, [pc, #188]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b2d      	ldr	r3, [pc, #180]	@ (8001144 <HAL_GPIO_Init+0x304>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a24      	ldr	r2, [pc, #144]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010da:	4a1a      	ldr	r2, [pc, #104]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_GPIO_Init+0x304>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <HAL_GPIO_Init+0x304>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f aea2 	bls.w	8000e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001164:	e003      	b.n	800116e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e12b      	b.n	80013e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d106      	bne.n	80011a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fb9e 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2224      	movs	r2, #36	@ 0x24
 80011ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011e0:	f001 fc36 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 80011e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a81      	ldr	r2, [pc, #516]	@ (80013f0 <HAL_I2C_Init+0x274>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d807      	bhi.n	8001200 <HAL_I2C_Init+0x84>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a80      	ldr	r2, [pc, #512]	@ (80013f4 <HAL_I2C_Init+0x278>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	bf94      	ite	ls
 80011f8:	2301      	movls	r3, #1
 80011fa:	2300      	movhi	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e006      	b.n	800120e <HAL_I2C_Init+0x92>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4a7d      	ldr	r2, [pc, #500]	@ (80013f8 <HAL_I2C_Init+0x27c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	bf94      	ite	ls
 8001208:	2301      	movls	r3, #1
 800120a:	2300      	movhi	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0e7      	b.n	80013e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a78      	ldr	r2, [pc, #480]	@ (80013fc <HAL_I2C_Init+0x280>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a6a      	ldr	r2, [pc, #424]	@ (80013f0 <HAL_I2C_Init+0x274>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d802      	bhi.n	8001250 <HAL_I2C_Init+0xd4>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3301      	adds	r3, #1
 800124e:	e009      	b.n	8001264 <HAL_I2C_Init+0xe8>
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	4a69      	ldr	r2, [pc, #420]	@ (8001400 <HAL_I2C_Init+0x284>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	3301      	adds	r3, #1
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	430b      	orrs	r3, r1
 800126a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001276:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	495c      	ldr	r1, [pc, #368]	@ (80013f0 <HAL_I2C_Init+0x274>)
 8001280:	428b      	cmp	r3, r1
 8001282:	d819      	bhi.n	80012b8 <HAL_I2C_Init+0x13c>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1e59      	subs	r1, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001292:	1c59      	adds	r1, r3, #1
 8001294:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001298:	400b      	ands	r3, r1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00a      	beq.n	80012b4 <HAL_I2C_Init+0x138>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	1e59      	subs	r1, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ac:	3301      	adds	r3, #1
 80012ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b2:	e051      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 80012b4:	2304      	movs	r3, #4
 80012b6:	e04f      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d111      	bne.n	80012e4 <HAL_I2C_Init+0x168>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	440b      	add	r3, r1
 80012ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	e012      	b.n	800130a <HAL_I2C_Init+0x18e>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e58      	subs	r0, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6859      	ldr	r1, [r3, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	0099      	lsls	r1, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fa:	3301      	adds	r3, #1
 80012fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_Init+0x196>
 800130e:	2301      	movs	r3, #1
 8001310:	e022      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10e      	bne.n	8001338 <HAL_I2C_Init+0x1bc>
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1e58      	subs	r0, r3, #1
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6859      	ldr	r1, [r3, #4]
 8001322:	460b      	mov	r3, r1
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	440b      	add	r3, r1
 8001328:	fbb0 f3f3 	udiv	r3, r0, r3
 800132c:	3301      	adds	r3, #1
 800132e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001336:	e00f      	b.n	8001358 <HAL_I2C_Init+0x1dc>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1e58      	subs	r0, r3, #1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6859      	ldr	r1, [r3, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	0099      	lsls	r1, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	fbb0 f3f3 	udiv	r3, r0, r3
 800134e:	3301      	adds	r3, #1
 8001350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	6809      	ldr	r1, [r1, #0]
 800135c:	4313      	orrs	r3, r2
 800135e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6911      	ldr	r1, [r2, #16]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68d2      	ldr	r2, [r2, #12]
 8001392:	4311      	orrs	r1, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	430b      	orrs	r3, r1
 800139a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2220      	movs	r2, #32
 80013d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	000186a0 	.word	0x000186a0
 80013f4:	001e847f 	.word	0x001e847f
 80013f8:	003d08ff 	.word	0x003d08ff
 80013fc:	431bde83 	.word	0x431bde83
 8001400:	10624dd3 	.word	0x10624dd3

08001404 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	461a      	mov	r2, r3
 8001410:	460b      	mov	r3, r1
 8001412:	817b      	strh	r3, [r7, #10]
 8001414:	4613      	mov	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff fbfc 	bl	8000c14 <HAL_GetTick>
 800141c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	f040 80e0 	bne.w	80015ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2319      	movs	r3, #25
 8001432:	2201      	movs	r2, #1
 8001434:	4970      	ldr	r1, [pc, #448]	@ (80015f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 fc64 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001442:	2302      	movs	r3, #2
 8001444:	e0d3      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_I2C_Master_Transmit+0x50>
 8001450:	2302      	movs	r3, #2
 8001452:	e0cc      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b01      	cmp	r3, #1
 8001468:	d007      	beq.n	800147a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001488:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2221      	movs	r2, #33	@ 0x21
 800148e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2210      	movs	r2, #16
 8001496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	893a      	ldrh	r2, [r7, #8]
 80014aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4a50      	ldr	r2, [pc, #320]	@ (80015fc <HAL_I2C_Master_Transmit+0x1f8>)
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80014bc:	8979      	ldrh	r1, [r7, #10]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	6a3a      	ldr	r2, [r7, #32]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 face 	bl	8001a64 <I2C_MasterRequestWrite>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e08d      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014e8:	e066      	b.n	80015b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	6a39      	ldr	r1, [r7, #32]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 fd22 	bl	8001f38 <I2C_WaitOnTXEFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00d      	beq.n	8001516 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d107      	bne.n	8001512 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e06b      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001530:	b29b      	uxth	r3, r3
 8001532:	3b01      	subs	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b04      	cmp	r3, #4
 8001552:	d11b      	bne.n	800158c <HAL_I2C_Master_Transmit+0x188>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001558:	2b00      	cmp	r3, #0
 800155a:	d017      	beq.n	800158c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	781a      	ldrb	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001576:	b29b      	uxth	r3, r3
 8001578:	3b01      	subs	r3, #1
 800157a:	b29a      	uxth	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001584:	3b01      	subs	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	6a39      	ldr	r1, [r7, #32]
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 fd19 	bl	8001fc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00d      	beq.n	80015b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d107      	bne.n	80015b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e01a      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d194      	bne.n	80014ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2220      	movs	r2, #32
 80015d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e000      	b.n	80015ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015ec:	2302      	movs	r3, #2
  }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	00100002 	.word	0x00100002
 80015fc:	ffff0000 	.word	0xffff0000

08001600 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af02      	add	r7, sp, #8
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	461a      	mov	r2, r3
 800160c:	460b      	mov	r3, r1
 800160e:	817b      	strh	r3, [r7, #10]
 8001610:	4613      	mov	r3, r2
 8001612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff fafe 	bl	8000c14 <HAL_GetTick>
 8001618:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b20      	cmp	r3, #32
 8001624:	f040 8217 	bne.w	8001a56 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2319      	movs	r3, #25
 800162e:	2201      	movs	r2, #1
 8001630:	497c      	ldr	r1, [pc, #496]	@ (8001824 <HAL_I2C_Master_Receive+0x224>)
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fb66 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	e20a      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_I2C_Master_Receive+0x50>
 800164c:	2302      	movs	r3, #2
 800164e:	e203      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d007      	beq.n	8001676 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2222      	movs	r2, #34	@ 0x22
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2210      	movs	r2, #16
 8001692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	893a      	ldrh	r2, [r7, #8]
 80016a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001828 <HAL_I2C_Master_Receive+0x228>)
 80016b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016b8:	8979      	ldrh	r1, [r7, #10]
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 fa52 	bl	8001b68 <I2C_MasterRequestRead>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e1c4      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d113      	bne.n	80016fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	623b      	str	r3, [r7, #32]
 80016ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e198      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001702:	2b01      	cmp	r3, #1
 8001704:	d11b      	bne.n	800173e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e178      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001742:	2b02      	cmp	r3, #2
 8001744:	d11b      	bne.n	800177e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001754:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	e158      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800178c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80017a4:	e144      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	f200 80f1 	bhi.w	8001992 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d123      	bne.n	8001800 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fc4b 	bl	8002058 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e145      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80017fe:	e117      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	2b02      	cmp	r3, #2
 8001806:	d14e      	bne.n	80018a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800180e:	2200      	movs	r2, #0
 8001810:	4906      	ldr	r1, [pc, #24]	@ (800182c <HAL_I2C_Master_Receive+0x22c>)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fa76 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e11a      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
 8001822:	bf00      	nop
 8001824:	00100002 	.word	0x00100002
 8001828:	ffff0000 	.word	0xffff0000
 800182c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800183e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80018a4:	e0c4      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ac:	2200      	movs	r2, #0
 80018ae:	496c      	ldr	r1, [pc, #432]	@ (8001a60 <HAL_I2C_Master_Receive+0x460>)
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 fa27 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cb      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001908:	2200      	movs	r2, #0
 800190a:	4955      	ldr	r1, [pc, #340]	@ (8001a60 <HAL_I2C_Master_Receive+0x460>)
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f9f9 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e09d      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800192a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001948:	3b01      	subs	r3, #1
 800194a:	b29a      	uxth	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001986:	b29b      	uxth	r3, r3
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001990:	e04e      	b.n	8001a30 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001994:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fb5e 	bl	8002058 <I2C_WaitOnRXNEFlagUntilTimeout>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e058      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	b2d2      	uxtb	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d124      	bne.n	8001a30 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d107      	bne.n	80019fe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f aeb6 	bne.w	80017a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2220      	movs	r2, #32
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
  }
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	00010004 	.word	0x00010004

08001a64 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	460b      	mov	r3, r1
 8001a72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a78:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d006      	beq.n	8001a8e <I2C_MasterRequestWrite+0x2a>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d003      	beq.n	8001a8e <I2C_MasterRequestWrite+0x2a>
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a8c:	d108      	bne.n	8001aa0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e00b      	b.n	8001ab8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d107      	bne.n	8001ab8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ab6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f91d 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ade:	d103      	bne.n	8001ae8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e035      	b.n	8001b58 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001af4:	d108      	bne.n	8001b08 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001af6:	897b      	ldrh	r3, [r7, #10]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	e01b      	b.n	8001b40 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b08:	897b      	ldrh	r3, [r7, #10]
 8001b0a:	11db      	asrs	r3, r3, #7
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 0306 	and.w	r3, r3, #6
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f063 030f 	orn	r3, r3, #15
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	490e      	ldr	r1, [pc, #56]	@ (8001b60 <I2C_MasterRequestWrite+0xfc>)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f966 	bl	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e010      	b.n	8001b58 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b36:	897b      	ldrh	r3, [r7, #10]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4907      	ldr	r1, [pc, #28]	@ (8001b64 <I2C_MasterRequestWrite+0x100>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f956 	bl	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	00010008 	.word	0x00010008
 8001b64:	00010002 	.word	0x00010002

08001b68 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	460b      	mov	r3, r1
 8001b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d006      	beq.n	8001ba2 <I2C_MasterRequestRead+0x3a>
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d003      	beq.n	8001ba2 <I2C_MasterRequestRead+0x3a>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ba0:	d108      	bne.n	8001bb4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e00b      	b.n	8001bcc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	2b11      	cmp	r3, #17
 8001bba:	d107      	bne.n	8001bcc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f893 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bf2:	d103      	bne.n	8001bfc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e079      	b.n	8001cf4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c08:	d108      	bne.n	8001c1c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	e05f      	b.n	8001cdc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c1c:	897b      	ldrh	r3, [r7, #10]
 8001c1e:	11db      	asrs	r3, r3, #7
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 0306 	and.w	r3, r3, #6
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f063 030f 	orn	r3, r3, #15
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4930      	ldr	r1, [pc, #192]	@ (8001cfc <I2C_MasterRequestRead+0x194>)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f8dc 	bl	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e054      	b.n	8001cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	4929      	ldr	r1, [pc, #164]	@ (8001d00 <I2C_MasterRequestRead+0x198>)
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f8cc 	bl	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e044      	b.n	8001cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f831 	bl	8001d04 <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00d      	beq.n	8001cc4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cb6:	d103      	bne.n	8001cc0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cbe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e017      	b.n	8001cf4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001cc4:	897b      	ldrh	r3, [r7, #10]
 8001cc6:	11db      	asrs	r3, r3, #7
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	f003 0306 	and.w	r3, r3, #6
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	f063 030e 	orn	r3, r3, #14
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4907      	ldr	r1, [pc, #28]	@ (8001d00 <I2C_MasterRequestRead+0x198>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f888 	bl	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	00010008 	.word	0x00010008
 8001d00:	00010002 	.word	0x00010002

08001d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d14:	e048      	b.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d044      	beq.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7fe ff79 	bl	8000c14 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d139      	bne.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10d      	bne.n	8001d5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	43da      	mvns	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	e00c      	b.n	8001d74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4013      	ands	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d116      	bne.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e023      	b.n	8001df0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0c1b      	lsrs	r3, r3, #16
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10d      	bne.n	8001dce <I2C_WaitOnFlagUntilTimeout+0xca>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	e00c      	b.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d093      	beq.n	8001d16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e06:	e071      	b.n	8001eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e16:	d123      	bne.n	8001e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e067      	b.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e66:	d041      	beq.n	8001eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e68:	f7fe fed4 	bl	8000c14 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d302      	bcc.n	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d136      	bne.n	8001eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10c      	bne.n	8001ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4013      	ands	r3, r2
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e00b      	b.n	8001eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	43da      	mvns	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e021      	b.n	8001f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	0c1b      	lsrs	r3, r3, #16
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10c      	bne.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	43da      	mvns	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	4013      	ands	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e00b      	b.n	8001f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f af6d 	bne.w	8001e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f44:	e034      	b.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f8e3 	bl	8002112 <I2C_IsAcknowledgeFailed>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e034      	b.n	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d028      	beq.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7fe fe59 	bl	8000c14 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d302      	bcc.n	8001f74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11d      	bne.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7e:	2b80      	cmp	r3, #128	@ 0x80
 8001f80:	d016      	beq.n	8001fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e007      	b.n	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	2b80      	cmp	r3, #128	@ 0x80
 8001fbc:	d1c3      	bne.n	8001f46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fd4:	e034      	b.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f89b 	bl	8002112 <I2C_IsAcknowledgeFailed>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e034      	b.n	8002050 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d028      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7fe fe11 	bl	8000c14 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d11d      	bne.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b04      	cmp	r3, #4
 8002010:	d016      	beq.n	8002040 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e007      	b.n	8002050 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d1c3      	bne.n	8001fd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002064:	e049      	b.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d119      	bne.n	80020a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0210 	mvn.w	r2, #16
 800207c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e030      	b.n	800210a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020a8:	f7fe fdb4 	bl	8000c14 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d302      	bcc.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d11d      	bne.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d016      	beq.n	80020fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f043 0220 	orr.w	r2, r3, #32
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e007      	b.n	800210a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002104:	2b40      	cmp	r3, #64	@ 0x40
 8002106:	d1ae      	bne.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002128:	d11b      	bne.n	8002162 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002132:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f043 0204 	orr.w	r2, r3, #4
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e267      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d075      	beq.n	800227a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800218e:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d00c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4b85      	ldr	r3, [pc, #532]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d112      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b82      	ldr	r3, [pc, #520]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021b2:	d10b      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05b      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d157      	bne.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e242      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x74>
 80021d6:	4b76      	ldr	r3, [pc, #472]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a75      	ldr	r2, [pc, #468]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b70      	ldr	r3, [pc, #448]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6f      	ldr	r2, [pc, #444]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b6d      	ldr	r3, [pc, #436]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a6c      	ldr	r2, [pc, #432]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 8002208:	4b69      	ldr	r3, [pc, #420]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a68      	ldr	r2, [pc, #416]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a65      	ldr	r2, [pc, #404]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fcf4 	bl	8000c14 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe fcf0 	bl	8000c14 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	@ 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e207      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b5b      	ldr	r3, [pc, #364]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xc0>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fce0 	bl	8000c14 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fcdc 	bl	8000c14 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	@ 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1f3      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b51      	ldr	r3, [pc, #324]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0xe8>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002286:	4b4a      	ldr	r3, [pc, #296]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b47      	ldr	r3, [pc, #284]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b44      	ldr	r3, [pc, #272]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b41      	ldr	r3, [pc, #260]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1c7      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b3b      	ldr	r3, [pc, #236]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4937      	ldr	r1, [pc, #220]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e03a      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b34      	ldr	r3, [pc, #208]	@ (80023b4 <HAL_RCC_OscConfig+0x244>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fc95 	bl	8000c14 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fc91 	bl	8000c14 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1a8      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4925      	ldr	r1, [pc, #148]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <HAL_RCC_OscConfig+0x244>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fc74 	bl	8000c14 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe fc70 	bl	8000c14 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e187      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b1b      	ldr	r3, [pc, #108]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d036      	beq.n	80023c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_RCC_OscConfig+0x248>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe fc54 	bl	8000c14 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fc50 	bl	8000c14 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e167      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_OscConfig+0x240>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x200>
 800238e:	e01b      	b.n	80023c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_OscConfig+0x248>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe fc3d 	bl	8000c14 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	e00e      	b.n	80023bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239e:	f7fe fc39 	bl	8000c14 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d907      	bls.n	80023bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e150      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
 80023b0:	40023800 	.word	0x40023800
 80023b4:	42470000 	.word	0x42470000
 80023b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b88      	ldr	r3, [pc, #544]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ea      	bne.n	800239e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8097 	beq.w	8002504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b81      	ldr	r3, [pc, #516]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b7d      	ldr	r3, [pc, #500]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	4a7c      	ldr	r2, [pc, #496]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f6:	4b7a      	ldr	r3, [pc, #488]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b77      	ldr	r3, [pc, #476]	@ (80025e4 <HAL_RCC_OscConfig+0x474>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d118      	bne.n	8002444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b74      	ldr	r3, [pc, #464]	@ (80025e4 <HAL_RCC_OscConfig+0x474>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a73      	ldr	r2, [pc, #460]	@ (80025e4 <HAL_RCC_OscConfig+0x474>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7fe fbf9 	bl	8000c14 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002426:	f7fe fbf5 	bl	8000c14 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e10c      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <HAL_RCC_OscConfig+0x474>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x2ea>
 800244c:	4b64      	ldr	r3, [pc, #400]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002450:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6713      	str	r3, [r2, #112]	@ 0x70
 8002458:	e01c      	b.n	8002494 <HAL_RCC_OscConfig+0x324>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x30c>
 8002462:	4b5f      	ldr	r3, [pc, #380]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002466:	4a5e      	ldr	r2, [pc, #376]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002468:	f043 0304 	orr.w	r3, r3, #4
 800246c:	6713      	str	r3, [r2, #112]	@ 0x70
 800246e:	4b5c      	ldr	r3, [pc, #368]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	4a5b      	ldr	r2, [pc, #364]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6713      	str	r3, [r2, #112]	@ 0x70
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0x324>
 800247c:	4b58      	ldr	r3, [pc, #352]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002480:	4a57      	ldr	r2, [pc, #348]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	@ 0x70
 8002488:	4b55      	ldr	r3, [pc, #340]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	4a54      	ldr	r2, [pc, #336]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 0304 	bic.w	r3, r3, #4
 8002492:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d015      	beq.n	80024c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fbba 	bl	8000c14 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe fbb6 	bl	8000c14 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0cb      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	4b49      	ldr	r3, [pc, #292]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ee      	beq.n	80024a4 <HAL_RCC_OscConfig+0x334>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7fe fba4 	bl	8000c14 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fba0 	bl	8000c14 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0b5      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e6:	4b3e      	ldr	r3, [pc, #248]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1ee      	bne.n	80024d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024f2:	7dfb      	ldrb	r3, [r7, #23]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b39      	ldr	r3, [pc, #228]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	4a38      	ldr	r2, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002502:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a1 	beq.w	8002650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800250e:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	d05c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d141      	bne.n	80025a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <HAL_RCC_OscConfig+0x478>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fb74 	bl	8000c14 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fb70 	bl	8000c14 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e087      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	3b01      	subs	r3, #1
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	491b      	ldr	r1, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <HAL_RCC_OscConfig+0x478>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe fb49 	bl	8000c14 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fb45 	bl	8000c14 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e05c      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x416>
 80025a4:	e054      	b.n	8002650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_RCC_OscConfig+0x478>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fb32 	bl	8000c14 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fb2e 	bl	8000c14 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e045      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <HAL_RCC_OscConfig+0x470>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x444>
 80025d2:	e03d      	b.n	8002650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e038      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40007000 	.word	0x40007000
 80025e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x4ec>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d028      	beq.n	800264c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d121      	bne.n	800264c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d11a      	bne.n	800264c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800261c:	4013      	ands	r3, r2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002624:	4293      	cmp	r3, r2
 8002626:	d111      	bne.n	800264c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	085b      	lsrs	r3, r3, #1
 8002634:	3b01      	subs	r3, #1
 8002636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d107      	bne.n	800264c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0cc      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b68      	ldr	r3, [pc, #416]	@ (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d90c      	bls.n	800269c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b65      	ldr	r3, [pc, #404]	@ (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b63      	ldr	r3, [pc, #396]	@ (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b8      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b4:	4b59      	ldr	r3, [pc, #356]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4a58      	ldr	r2, [pc, #352]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026cc:	4b53      	ldr	r3, [pc, #332]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a52      	ldr	r2, [pc, #328]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b50      	ldr	r3, [pc, #320]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	494d      	ldr	r1, [pc, #308]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d044      	beq.n	8002780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b47      	ldr	r3, [pc, #284]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d119      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d003      	beq.n	800271e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800271a:	2b03      	cmp	r3, #3
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b3f      	ldr	r3, [pc, #252]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e06f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e067      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b37      	ldr	r3, [pc, #220]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4934      	ldr	r1, [pc, #208]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7fe fa60 	bl	8000c14 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7fe fa5c 	bl	8000c14 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e04f      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d20c      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b22      	ldr	r3, [pc, #136]	@ (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e032      	b.n	800280e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b19      	ldr	r3, [pc, #100]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4916      	ldr	r1, [pc, #88]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490e      	ldr	r1, [pc, #56]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e6:	f000 f821 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	490a      	ldr	r1, [pc, #40]	@ (8002820 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	5ccb      	ldrb	r3, [r1, r3]
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	4a09      	ldr	r2, [pc, #36]	@ (8002824 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe f9c0 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023c00 	.word	0x40023c00
 800281c:	40023800 	.word	0x40023800
 8002820:	08003c70 	.word	0x08003c70
 8002824:	20000004 	.word	0x20000004
 8002828:	20000008 	.word	0x20000008

0800282c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	b094      	sub	sp, #80	@ 0x50
 8002832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002844:	4b79      	ldr	r3, [pc, #484]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d00d      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x40>
 8002850:	2b08      	cmp	r3, #8
 8002852:	f200 80e1 	bhi.w	8002a18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x34>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x3a>
 800285e:	e0db      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b73      	ldr	r3, [pc, #460]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002862:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002864:	e0db      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002866:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x208>)
 8002868:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800286a:	e0d8      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800286c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002874:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002876:	4b6d      	ldr	r3, [pc, #436]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002882:	4b6a      	ldr	r3, [pc, #424]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	2200      	movs	r2, #0
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800288c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002894:	633b      	str	r3, [r7, #48]	@ 0x30
 8002896:	2300      	movs	r3, #0
 8002898:	637b      	str	r3, [r7, #52]	@ 0x34
 800289a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800289e:	4622      	mov	r2, r4
 80028a0:	462b      	mov	r3, r5
 80028a2:	f04f 0000 	mov.w	r0, #0
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	0159      	lsls	r1, r3, #5
 80028ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b0:	0150      	lsls	r0, r2, #5
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4621      	mov	r1, r4
 80028b8:	1a51      	subs	r1, r2, r1
 80028ba:	6139      	str	r1, [r7, #16]
 80028bc:	4629      	mov	r1, r5
 80028be:	eb63 0301 	sbc.w	r3, r3, r1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d0:	4659      	mov	r1, fp
 80028d2:	018b      	lsls	r3, r1, #6
 80028d4:	4651      	mov	r1, sl
 80028d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028da:	4651      	mov	r1, sl
 80028dc:	018a      	lsls	r2, r1, #6
 80028de:	4651      	mov	r1, sl
 80028e0:	ebb2 0801 	subs.w	r8, r2, r1
 80028e4:	4659      	mov	r1, fp
 80028e6:	eb63 0901 	sbc.w	r9, r3, r1
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028fe:	4690      	mov	r8, r2
 8002900:	4699      	mov	r9, r3
 8002902:	4623      	mov	r3, r4
 8002904:	eb18 0303 	adds.w	r3, r8, r3
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	462b      	mov	r3, r5
 800290c:	eb49 0303 	adc.w	r3, r9, r3
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800291e:	4629      	mov	r1, r5
 8002920:	024b      	lsls	r3, r1, #9
 8002922:	4621      	mov	r1, r4
 8002924:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002928:	4621      	mov	r1, r4
 800292a:	024a      	lsls	r2, r1, #9
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002932:	2200      	movs	r2, #0
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002936:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002938:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800293c:	f7fd fca0 	bl	8000280 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002948:	e058      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4b38      	ldr	r3, [pc, #224]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	2200      	movs	r2, #0
 8002952:	4618      	mov	r0, r3
 8002954:	4611      	mov	r1, r2
 8002956:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800295a:	623b      	str	r3, [r7, #32]
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002960:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002964:	4642      	mov	r2, r8
 8002966:	464b      	mov	r3, r9
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	0159      	lsls	r1, r3, #5
 8002972:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002976:	0150      	lsls	r0, r2, #5
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4641      	mov	r1, r8
 800297e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002982:	4649      	mov	r1, r9
 8002984:	eb63 0b01 	sbc.w	fp, r3, r1
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002994:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002998:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800299c:	ebb2 040a 	subs.w	r4, r2, sl
 80029a0:	eb63 050b 	sbc.w	r5, r3, fp
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	00eb      	lsls	r3, r5, #3
 80029ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b2:	00e2      	lsls	r2, r4, #3
 80029b4:	4614      	mov	r4, r2
 80029b6:	461d      	mov	r5, r3
 80029b8:	4643      	mov	r3, r8
 80029ba:	18e3      	adds	r3, r4, r3
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	464b      	mov	r3, r9
 80029c0:	eb45 0303 	adc.w	r3, r5, r3
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d2:	4629      	mov	r1, r5
 80029d4:	028b      	lsls	r3, r1, #10
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029dc:	4621      	mov	r1, r4
 80029de:	028a      	lsls	r2, r1, #10
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	61fa      	str	r2, [r7, #28]
 80029ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f0:	f7fd fc46 	bl	8000280 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4613      	mov	r3, r2
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x200>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3750      	adds	r7, #80	@ 0x50
 8002a24:	46bd      	mov	sp, r7
 8002a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	007a1200 	.word	0x007a1200

08002a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000004 	.word	0x20000004

08002a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a54:	f7ff fff0 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4903      	ldr	r1, [pc, #12]	@ (8002a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08003c80 	.word	0x08003c80

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a7c:	f7ff ffdc 	bl	8002a38 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0b5b      	lsrs	r3, r3, #13
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	@ (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08003c80 	.word	0x08003c80

08002aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e042      	b.n	8002b38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd ff54 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	@ 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f973 	bl	8002dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695a      	ldr	r2, [r3, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	@ 0x28
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d175      	bne.n	8002c4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_UART_Transmit+0x2c>
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e06e      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2221      	movs	r2, #33	@ 0x21
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7e:	f7fe f849 	bl	8000c14 <HAL_GetTick>
 8002b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b98:	d108      	bne.n	8002bac <HAL_UART_Transmit+0x6c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e003      	b.n	8002bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bb4:	e02e      	b.n	8002c14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2180      	movs	r1, #128	@ 0x80
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f848 	bl	8002c56 <UART_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e03a      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10b      	bne.n	8002bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e007      	b.n	8002c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1cb      	bne.n	8002bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2140      	movs	r1, #64	@ 0x40
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f814 	bl	8002c56 <UART_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e006      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c4c:	2302      	movs	r3, #2
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c66:	e03b      	b.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d037      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fd ffd0 	bl	8000c14 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	6a3a      	ldr	r2, [r7, #32]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03a      	b.n	8002d00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d023      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b80      	cmp	r3, #128	@ 0x80
 8002c9c:	d020      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b40      	cmp	r3, #64	@ 0x40
 8002ca2:	d01d      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d116      	bne.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f81d 	bl	8002d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e00f      	b.n	8002d00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	bf0c      	ite	eq
 8002cf0:	2301      	moveq	r3, #1
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d0b4      	beq.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b095      	sub	sp, #84	@ 0x54
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d30:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e5      	bne.n	8002d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	e853 3f00 	ldrex	r3, [r3]
 8002d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3314      	adds	r3, #20
 8002d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d119      	bne.n	8002db4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f023 0310 	bic.w	r3, r3, #16
 8002d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002da0:	61ba      	str	r2, [r7, #24]
 8002da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	6979      	ldr	r1, [r7, #20]
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	613b      	str	r3, [r7, #16]
   return(result);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e5      	bne.n	8002d80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dc2:	bf00      	nop
 8002dc4:	3754      	adds	r7, #84	@ 0x54
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd4:	b0c0      	sub	sp, #256	@ 0x100
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	68d9      	ldr	r1, [r3, #12]
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	ea40 0301 	orr.w	r3, r0, r1
 8002df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e28:	f021 010c 	bic.w	r1, r1, #12
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e36:	430b      	orrs	r3, r1
 8002e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4a:	6999      	ldr	r1, [r3, #24]
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	ea40 0301 	orr.w	r3, r0, r1
 8002e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800309c <UART_SetConfig+0x2cc>)
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d005      	beq.n	8002e70 <UART_SetConfig+0xa0>
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80030a0 <UART_SetConfig+0x2d0>)
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d104      	bne.n	8002e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e70:	f7ff fe02 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8002e74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e78:	e003      	b.n	8002e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e7a:	f7ff fde9 	bl	8002a50 <HAL_RCC_GetPCLK1Freq>
 8002e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e8c:	f040 810c 	bne.w	80030a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	eb12 0801 	adds.w	r8, r2, r1
 8002eb8:	4629      	mov	r1, r5
 8002eba:	eb43 0901 	adc.w	r9, r3, r1
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ed2:	4690      	mov	r8, r2
 8002ed4:	4699      	mov	r9, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	eb18 0303 	adds.w	r3, r8, r3
 8002edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ee0:	462b      	mov	r3, r5
 8002ee2:	eb49 0303 	adc.w	r3, r9, r3
 8002ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002efe:	460b      	mov	r3, r1
 8002f00:	18db      	adds	r3, r3, r3
 8002f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f04:	4613      	mov	r3, r2
 8002f06:	eb42 0303 	adc.w	r3, r2, r3
 8002f0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f14:	f7fd f9b4 	bl	8000280 <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4b61      	ldr	r3, [pc, #388]	@ (80030a4 <UART_SetConfig+0x2d4>)
 8002f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	011c      	lsls	r4, r3, #4
 8002f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f38:	4642      	mov	r2, r8
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	1891      	adds	r1, r2, r2
 8002f3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f40:	415b      	adcs	r3, r3
 8002f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f48:	4641      	mov	r1, r8
 8002f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f4e:	4649      	mov	r1, r9
 8002f50:	eb43 0b01 	adc.w	fp, r3, r1
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	469b      	mov	fp, r3
 8002f6c:	4643      	mov	r3, r8
 8002f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f76:	464b      	mov	r3, r9
 8002f78:	eb4b 0303 	adc.w	r3, fp, r3
 8002f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f94:	460b      	mov	r3, r1
 8002f96:	18db      	adds	r3, r3, r3
 8002f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	eb42 0303 	adc.w	r3, r2, r3
 8002fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002faa:	f7fd f969 	bl	8000280 <__aeabi_uldivmod>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80030a4 <UART_SetConfig+0x2d4>)
 8002fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2264      	movs	r2, #100	@ 0x64
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	1acb      	subs	r3, r1, r3
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <UART_SetConfig+0x2d4>)
 8002fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fd8:	441c      	add	r4, r3
 8002fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002fec:	4642      	mov	r2, r8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	1891      	adds	r1, r2, r2
 8002ff2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ff4:	415b      	adcs	r3, r3
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	1851      	adds	r1, r2, r1
 8003000:	6339      	str	r1, [r7, #48]	@ 0x30
 8003002:	4649      	mov	r1, r9
 8003004:	414b      	adcs	r3, r1
 8003006:	637b      	str	r3, [r7, #52]	@ 0x34
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003014:	4659      	mov	r1, fp
 8003016:	00cb      	lsls	r3, r1, #3
 8003018:	4651      	mov	r1, sl
 800301a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800301e:	4651      	mov	r1, sl
 8003020:	00ca      	lsls	r2, r1, #3
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	4603      	mov	r3, r0
 8003028:	4642      	mov	r2, r8
 800302a:	189b      	adds	r3, r3, r2
 800302c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003030:	464b      	mov	r3, r9
 8003032:	460a      	mov	r2, r1
 8003034:	eb42 0303 	adc.w	r3, r2, r3
 8003038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003048:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800304c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003050:	460b      	mov	r3, r1
 8003052:	18db      	adds	r3, r3, r3
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003056:	4613      	mov	r3, r2
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003066:	f7fd f90b 	bl	8000280 <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <UART_SetConfig+0x2d4>)
 8003070:	fba3 1302 	umull	r1, r3, r3, r2
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	2164      	movs	r1, #100	@ 0x64
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	3332      	adds	r3, #50	@ 0x32
 8003082:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <UART_SetConfig+0x2d4>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	f003 0207 	and.w	r2, r3, #7
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4422      	add	r2, r4
 8003096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003098:	e106      	b.n	80032a8 <UART_SetConfig+0x4d8>
 800309a:	bf00      	nop
 800309c:	40011000 	.word	0x40011000
 80030a0:	40011400 	.word	0x40011400
 80030a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030ba:	4642      	mov	r2, r8
 80030bc:	464b      	mov	r3, r9
 80030be:	1891      	adds	r1, r2, r2
 80030c0:	6239      	str	r1, [r7, #32]
 80030c2:	415b      	adcs	r3, r3
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ca:	4641      	mov	r1, r8
 80030cc:	1854      	adds	r4, r2, r1
 80030ce:	4649      	mov	r1, r9
 80030d0:	eb43 0501 	adc.w	r5, r3, r1
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	00eb      	lsls	r3, r5, #3
 80030de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e2:	00e2      	lsls	r2, r4, #3
 80030e4:	4614      	mov	r4, r2
 80030e6:	461d      	mov	r5, r3
 80030e8:	4643      	mov	r3, r8
 80030ea:	18e3      	adds	r3, r4, r3
 80030ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030f0:	464b      	mov	r3, r9
 80030f2:	eb45 0303 	adc.w	r3, r5, r3
 80030f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003106:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003116:	4629      	mov	r1, r5
 8003118:	008b      	lsls	r3, r1, #2
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003120:	4621      	mov	r1, r4
 8003122:	008a      	lsls	r2, r1, #2
 8003124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003128:	f7fd f8aa 	bl	8000280 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4b60      	ldr	r3, [pc, #384]	@ (80032b4 <UART_SetConfig+0x4e4>)
 8003132:	fba3 2302 	umull	r2, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	011c      	lsls	r4, r3, #4
 800313a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003144:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800314c:	4642      	mov	r2, r8
 800314e:	464b      	mov	r3, r9
 8003150:	1891      	adds	r1, r2, r2
 8003152:	61b9      	str	r1, [r7, #24]
 8003154:	415b      	adcs	r3, r3
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315c:	4641      	mov	r1, r8
 800315e:	1851      	adds	r1, r2, r1
 8003160:	6139      	str	r1, [r7, #16]
 8003162:	4649      	mov	r1, r9
 8003164:	414b      	adcs	r3, r1
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003174:	4659      	mov	r1, fp
 8003176:	00cb      	lsls	r3, r1, #3
 8003178:	4651      	mov	r1, sl
 800317a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800317e:	4651      	mov	r1, sl
 8003180:	00ca      	lsls	r2, r1, #3
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	4603      	mov	r3, r0
 8003188:	4642      	mov	r2, r8
 800318a:	189b      	adds	r3, r3, r2
 800318c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003190:	464b      	mov	r3, r9
 8003192:	460a      	mov	r2, r1
 8003194:	eb42 0303 	adc.w	r3, r2, r3
 8003198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031b4:	4649      	mov	r1, r9
 80031b6:	008b      	lsls	r3, r1, #2
 80031b8:	4641      	mov	r1, r8
 80031ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031be:	4641      	mov	r1, r8
 80031c0:	008a      	lsls	r2, r1, #2
 80031c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031c6:	f7fd f85b 	bl	8000280 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	4b38      	ldr	r3, [pc, #224]	@ (80032b4 <UART_SetConfig+0x4e4>)
 80031d2:	fba3 2301 	umull	r2, r3, r3, r1
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2264      	movs	r2, #100	@ 0x64
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	1acb      	subs	r3, r1, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	@ 0x32
 80031e4:	4a33      	ldr	r2, [pc, #204]	@ (80032b4 <UART_SetConfig+0x4e4>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f0:	441c      	add	r4, r3
 80031f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f6:	2200      	movs	r2, #0
 80031f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80031fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80031fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003200:	4642      	mov	r2, r8
 8003202:	464b      	mov	r3, r9
 8003204:	1891      	adds	r1, r2, r2
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	415b      	adcs	r3, r3
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003210:	4641      	mov	r1, r8
 8003212:	1851      	adds	r1, r2, r1
 8003214:	6039      	str	r1, [r7, #0]
 8003216:	4649      	mov	r1, r9
 8003218:	414b      	adcs	r3, r1
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003228:	4659      	mov	r1, fp
 800322a:	00cb      	lsls	r3, r1, #3
 800322c:	4651      	mov	r1, sl
 800322e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003232:	4651      	mov	r1, sl
 8003234:	00ca      	lsls	r2, r1, #3
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	4603      	mov	r3, r0
 800323c:	4642      	mov	r2, r8
 800323e:	189b      	adds	r3, r3, r2
 8003240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003242:	464b      	mov	r3, r9
 8003244:	460a      	mov	r2, r1
 8003246:	eb42 0303 	adc.w	r3, r2, r3
 800324a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	663b      	str	r3, [r7, #96]	@ 0x60
 8003256:	667a      	str	r2, [r7, #100]	@ 0x64
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003264:	4649      	mov	r1, r9
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	4641      	mov	r1, r8
 800326a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800326e:	4641      	mov	r1, r8
 8003270:	008a      	lsls	r2, r1, #2
 8003272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003276:	f7fd f803 	bl	8000280 <__aeabi_uldivmod>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <UART_SetConfig+0x4e4>)
 8003280:	fba3 1302 	umull	r1, r3, r3, r2
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	2164      	movs	r1, #100	@ 0x64
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	3332      	adds	r3, #50	@ 0x32
 8003292:	4a08      	ldr	r2, [pc, #32]	@ (80032b4 <UART_SetConfig+0x4e4>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4422      	add	r2, r4
 80032a6:	609a      	str	r2, [r3, #8]
}
 80032a8:	bf00      	nop
 80032aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032ae:	46bd      	mov	sp, r7
 80032b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b4:	51eb851f 	.word	0x51eb851f

080032b8 <sniprintf>:
 80032b8:	b40c      	push	{r2, r3}
 80032ba:	b530      	push	{r4, r5, lr}
 80032bc:	4b17      	ldr	r3, [pc, #92]	@ (800331c <sniprintf+0x64>)
 80032be:	1e0c      	subs	r4, r1, #0
 80032c0:	681d      	ldr	r5, [r3, #0]
 80032c2:	b09d      	sub	sp, #116	@ 0x74
 80032c4:	da08      	bge.n	80032d8 <sniprintf+0x20>
 80032c6:	238b      	movs	r3, #139	@ 0x8b
 80032c8:	602b      	str	r3, [r5, #0]
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
 80032ce:	b01d      	add	sp, #116	@ 0x74
 80032d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032d4:	b002      	add	sp, #8
 80032d6:	4770      	bx	lr
 80032d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80032dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80032e0:	bf14      	ite	ne
 80032e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80032e6:	4623      	moveq	r3, r4
 80032e8:	9304      	str	r3, [sp, #16]
 80032ea:	9307      	str	r3, [sp, #28]
 80032ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032f0:	9002      	str	r0, [sp, #8]
 80032f2:	9006      	str	r0, [sp, #24]
 80032f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80032f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80032fa:	ab21      	add	r3, sp, #132	@ 0x84
 80032fc:	a902      	add	r1, sp, #8
 80032fe:	4628      	mov	r0, r5
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	f000 f995 	bl	8003630 <_svfiprintf_r>
 8003306:	1c43      	adds	r3, r0, #1
 8003308:	bfbc      	itt	lt
 800330a:	238b      	movlt	r3, #139	@ 0x8b
 800330c:	602b      	strlt	r3, [r5, #0]
 800330e:	2c00      	cmp	r4, #0
 8003310:	d0dd      	beq.n	80032ce <sniprintf+0x16>
 8003312:	9b02      	ldr	r3, [sp, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e7d9      	b.n	80032ce <sniprintf+0x16>
 800331a:	bf00      	nop
 800331c:	20000010 	.word	0x20000010

08003320 <memset>:
 8003320:	4402      	add	r2, r0
 8003322:	4603      	mov	r3, r0
 8003324:	4293      	cmp	r3, r2
 8003326:	d100      	bne.n	800332a <memset+0xa>
 8003328:	4770      	bx	lr
 800332a:	f803 1b01 	strb.w	r1, [r3], #1
 800332e:	e7f9      	b.n	8003324 <memset+0x4>

08003330 <__errno>:
 8003330:	4b01      	ldr	r3, [pc, #4]	@ (8003338 <__errno+0x8>)
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000010 	.word	0x20000010

0800333c <__libc_init_array>:
 800333c:	b570      	push	{r4, r5, r6, lr}
 800333e:	4d0d      	ldr	r5, [pc, #52]	@ (8003374 <__libc_init_array+0x38>)
 8003340:	4c0d      	ldr	r4, [pc, #52]	@ (8003378 <__libc_init_array+0x3c>)
 8003342:	1b64      	subs	r4, r4, r5
 8003344:	10a4      	asrs	r4, r4, #2
 8003346:	2600      	movs	r6, #0
 8003348:	42a6      	cmp	r6, r4
 800334a:	d109      	bne.n	8003360 <__libc_init_array+0x24>
 800334c:	4d0b      	ldr	r5, [pc, #44]	@ (800337c <__libc_init_array+0x40>)
 800334e:	4c0c      	ldr	r4, [pc, #48]	@ (8003380 <__libc_init_array+0x44>)
 8003350:	f000 fc66 	bl	8003c20 <_init>
 8003354:	1b64      	subs	r4, r4, r5
 8003356:	10a4      	asrs	r4, r4, #2
 8003358:	2600      	movs	r6, #0
 800335a:	42a6      	cmp	r6, r4
 800335c:	d105      	bne.n	800336a <__libc_init_array+0x2e>
 800335e:	bd70      	pop	{r4, r5, r6, pc}
 8003360:	f855 3b04 	ldr.w	r3, [r5], #4
 8003364:	4798      	blx	r3
 8003366:	3601      	adds	r6, #1
 8003368:	e7ee      	b.n	8003348 <__libc_init_array+0xc>
 800336a:	f855 3b04 	ldr.w	r3, [r5], #4
 800336e:	4798      	blx	r3
 8003370:	3601      	adds	r6, #1
 8003372:	e7f2      	b.n	800335a <__libc_init_array+0x1e>
 8003374:	08003cc4 	.word	0x08003cc4
 8003378:	08003cc4 	.word	0x08003cc4
 800337c:	08003cc4 	.word	0x08003cc4
 8003380:	08003cc8 	.word	0x08003cc8

08003384 <__retarget_lock_acquire_recursive>:
 8003384:	4770      	bx	lr

08003386 <__retarget_lock_release_recursive>:
 8003386:	4770      	bx	lr

08003388 <_free_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4605      	mov	r5, r0
 800338c:	2900      	cmp	r1, #0
 800338e:	d041      	beq.n	8003414 <_free_r+0x8c>
 8003390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003394:	1f0c      	subs	r4, r1, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfb8      	it	lt
 800339a:	18e4      	addlt	r4, r4, r3
 800339c:	f000 f8e0 	bl	8003560 <__malloc_lock>
 80033a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <_free_r+0x90>)
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	b933      	cbnz	r3, 80033b4 <_free_r+0x2c>
 80033a6:	6063      	str	r3, [r4, #4]
 80033a8:	6014      	str	r4, [r2, #0]
 80033aa:	4628      	mov	r0, r5
 80033ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b0:	f000 b8dc 	b.w	800356c <__malloc_unlock>
 80033b4:	42a3      	cmp	r3, r4
 80033b6:	d908      	bls.n	80033ca <_free_r+0x42>
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	1821      	adds	r1, r4, r0
 80033bc:	428b      	cmp	r3, r1
 80033be:	bf01      	itttt	eq
 80033c0:	6819      	ldreq	r1, [r3, #0]
 80033c2:	685b      	ldreq	r3, [r3, #4]
 80033c4:	1809      	addeq	r1, r1, r0
 80033c6:	6021      	streq	r1, [r4, #0]
 80033c8:	e7ed      	b.n	80033a6 <_free_r+0x1e>
 80033ca:	461a      	mov	r2, r3
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	b10b      	cbz	r3, 80033d4 <_free_r+0x4c>
 80033d0:	42a3      	cmp	r3, r4
 80033d2:	d9fa      	bls.n	80033ca <_free_r+0x42>
 80033d4:	6811      	ldr	r1, [r2, #0]
 80033d6:	1850      	adds	r0, r2, r1
 80033d8:	42a0      	cmp	r0, r4
 80033da:	d10b      	bne.n	80033f4 <_free_r+0x6c>
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	4401      	add	r1, r0
 80033e0:	1850      	adds	r0, r2, r1
 80033e2:	4283      	cmp	r3, r0
 80033e4:	6011      	str	r1, [r2, #0]
 80033e6:	d1e0      	bne.n	80033aa <_free_r+0x22>
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	6053      	str	r3, [r2, #4]
 80033ee:	4408      	add	r0, r1
 80033f0:	6010      	str	r0, [r2, #0]
 80033f2:	e7da      	b.n	80033aa <_free_r+0x22>
 80033f4:	d902      	bls.n	80033fc <_free_r+0x74>
 80033f6:	230c      	movs	r3, #12
 80033f8:	602b      	str	r3, [r5, #0]
 80033fa:	e7d6      	b.n	80033aa <_free_r+0x22>
 80033fc:	6820      	ldr	r0, [r4, #0]
 80033fe:	1821      	adds	r1, r4, r0
 8003400:	428b      	cmp	r3, r1
 8003402:	bf04      	itt	eq
 8003404:	6819      	ldreq	r1, [r3, #0]
 8003406:	685b      	ldreq	r3, [r3, #4]
 8003408:	6063      	str	r3, [r4, #4]
 800340a:	bf04      	itt	eq
 800340c:	1809      	addeq	r1, r1, r0
 800340e:	6021      	streq	r1, [r4, #0]
 8003410:	6054      	str	r4, [r2, #4]
 8003412:	e7ca      	b.n	80033aa <_free_r+0x22>
 8003414:	bd38      	pop	{r3, r4, r5, pc}
 8003416:	bf00      	nop
 8003418:	20000268 	.word	0x20000268

0800341c <sbrk_aligned>:
 800341c:	b570      	push	{r4, r5, r6, lr}
 800341e:	4e0f      	ldr	r6, [pc, #60]	@ (800345c <sbrk_aligned+0x40>)
 8003420:	460c      	mov	r4, r1
 8003422:	6831      	ldr	r1, [r6, #0]
 8003424:	4605      	mov	r5, r0
 8003426:	b911      	cbnz	r1, 800342e <sbrk_aligned+0x12>
 8003428:	f000 fba6 	bl	8003b78 <_sbrk_r>
 800342c:	6030      	str	r0, [r6, #0]
 800342e:	4621      	mov	r1, r4
 8003430:	4628      	mov	r0, r5
 8003432:	f000 fba1 	bl	8003b78 <_sbrk_r>
 8003436:	1c43      	adds	r3, r0, #1
 8003438:	d103      	bne.n	8003442 <sbrk_aligned+0x26>
 800343a:	f04f 34ff 	mov.w	r4, #4294967295
 800343e:	4620      	mov	r0, r4
 8003440:	bd70      	pop	{r4, r5, r6, pc}
 8003442:	1cc4      	adds	r4, r0, #3
 8003444:	f024 0403 	bic.w	r4, r4, #3
 8003448:	42a0      	cmp	r0, r4
 800344a:	d0f8      	beq.n	800343e <sbrk_aligned+0x22>
 800344c:	1a21      	subs	r1, r4, r0
 800344e:	4628      	mov	r0, r5
 8003450:	f000 fb92 	bl	8003b78 <_sbrk_r>
 8003454:	3001      	adds	r0, #1
 8003456:	d1f2      	bne.n	800343e <sbrk_aligned+0x22>
 8003458:	e7ef      	b.n	800343a <sbrk_aligned+0x1e>
 800345a:	bf00      	nop
 800345c:	20000264 	.word	0x20000264

08003460 <_malloc_r>:
 8003460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003464:	1ccd      	adds	r5, r1, #3
 8003466:	f025 0503 	bic.w	r5, r5, #3
 800346a:	3508      	adds	r5, #8
 800346c:	2d0c      	cmp	r5, #12
 800346e:	bf38      	it	cc
 8003470:	250c      	movcc	r5, #12
 8003472:	2d00      	cmp	r5, #0
 8003474:	4606      	mov	r6, r0
 8003476:	db01      	blt.n	800347c <_malloc_r+0x1c>
 8003478:	42a9      	cmp	r1, r5
 800347a:	d904      	bls.n	8003486 <_malloc_r+0x26>
 800347c:	230c      	movs	r3, #12
 800347e:	6033      	str	r3, [r6, #0]
 8003480:	2000      	movs	r0, #0
 8003482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800355c <_malloc_r+0xfc>
 800348a:	f000 f869 	bl	8003560 <__malloc_lock>
 800348e:	f8d8 3000 	ldr.w	r3, [r8]
 8003492:	461c      	mov	r4, r3
 8003494:	bb44      	cbnz	r4, 80034e8 <_malloc_r+0x88>
 8003496:	4629      	mov	r1, r5
 8003498:	4630      	mov	r0, r6
 800349a:	f7ff ffbf 	bl	800341c <sbrk_aligned>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	4604      	mov	r4, r0
 80034a2:	d158      	bne.n	8003556 <_malloc_r+0xf6>
 80034a4:	f8d8 4000 	ldr.w	r4, [r8]
 80034a8:	4627      	mov	r7, r4
 80034aa:	2f00      	cmp	r7, #0
 80034ac:	d143      	bne.n	8003536 <_malloc_r+0xd6>
 80034ae:	2c00      	cmp	r4, #0
 80034b0:	d04b      	beq.n	800354a <_malloc_r+0xea>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	4639      	mov	r1, r7
 80034b6:	4630      	mov	r0, r6
 80034b8:	eb04 0903 	add.w	r9, r4, r3
 80034bc:	f000 fb5c 	bl	8003b78 <_sbrk_r>
 80034c0:	4581      	cmp	r9, r0
 80034c2:	d142      	bne.n	800354a <_malloc_r+0xea>
 80034c4:	6821      	ldr	r1, [r4, #0]
 80034c6:	1a6d      	subs	r5, r5, r1
 80034c8:	4629      	mov	r1, r5
 80034ca:	4630      	mov	r0, r6
 80034cc:	f7ff ffa6 	bl	800341c <sbrk_aligned>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d03a      	beq.n	800354a <_malloc_r+0xea>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	442b      	add	r3, r5
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	f8d8 3000 	ldr.w	r3, [r8]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	bb62      	cbnz	r2, 800353c <_malloc_r+0xdc>
 80034e2:	f8c8 7000 	str.w	r7, [r8]
 80034e6:	e00f      	b.n	8003508 <_malloc_r+0xa8>
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	1b52      	subs	r2, r2, r5
 80034ec:	d420      	bmi.n	8003530 <_malloc_r+0xd0>
 80034ee:	2a0b      	cmp	r2, #11
 80034f0:	d917      	bls.n	8003522 <_malloc_r+0xc2>
 80034f2:	1961      	adds	r1, r4, r5
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	6025      	str	r5, [r4, #0]
 80034f8:	bf18      	it	ne
 80034fa:	6059      	strne	r1, [r3, #4]
 80034fc:	6863      	ldr	r3, [r4, #4]
 80034fe:	bf08      	it	eq
 8003500:	f8c8 1000 	streq.w	r1, [r8]
 8003504:	5162      	str	r2, [r4, r5]
 8003506:	604b      	str	r3, [r1, #4]
 8003508:	4630      	mov	r0, r6
 800350a:	f000 f82f 	bl	800356c <__malloc_unlock>
 800350e:	f104 000b 	add.w	r0, r4, #11
 8003512:	1d23      	adds	r3, r4, #4
 8003514:	f020 0007 	bic.w	r0, r0, #7
 8003518:	1ac2      	subs	r2, r0, r3
 800351a:	bf1c      	itt	ne
 800351c:	1a1b      	subne	r3, r3, r0
 800351e:	50a3      	strne	r3, [r4, r2]
 8003520:	e7af      	b.n	8003482 <_malloc_r+0x22>
 8003522:	6862      	ldr	r2, [r4, #4]
 8003524:	42a3      	cmp	r3, r4
 8003526:	bf0c      	ite	eq
 8003528:	f8c8 2000 	streq.w	r2, [r8]
 800352c:	605a      	strne	r2, [r3, #4]
 800352e:	e7eb      	b.n	8003508 <_malloc_r+0xa8>
 8003530:	4623      	mov	r3, r4
 8003532:	6864      	ldr	r4, [r4, #4]
 8003534:	e7ae      	b.n	8003494 <_malloc_r+0x34>
 8003536:	463c      	mov	r4, r7
 8003538:	687f      	ldr	r7, [r7, #4]
 800353a:	e7b6      	b.n	80034aa <_malloc_r+0x4a>
 800353c:	461a      	mov	r2, r3
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	42a3      	cmp	r3, r4
 8003542:	d1fb      	bne.n	800353c <_malloc_r+0xdc>
 8003544:	2300      	movs	r3, #0
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e7de      	b.n	8003508 <_malloc_r+0xa8>
 800354a:	230c      	movs	r3, #12
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	4630      	mov	r0, r6
 8003550:	f000 f80c 	bl	800356c <__malloc_unlock>
 8003554:	e794      	b.n	8003480 <_malloc_r+0x20>
 8003556:	6005      	str	r5, [r0, #0]
 8003558:	e7d6      	b.n	8003508 <_malloc_r+0xa8>
 800355a:	bf00      	nop
 800355c:	20000268 	.word	0x20000268

08003560 <__malloc_lock>:
 8003560:	4801      	ldr	r0, [pc, #4]	@ (8003568 <__malloc_lock+0x8>)
 8003562:	f7ff bf0f 	b.w	8003384 <__retarget_lock_acquire_recursive>
 8003566:	bf00      	nop
 8003568:	20000260 	.word	0x20000260

0800356c <__malloc_unlock>:
 800356c:	4801      	ldr	r0, [pc, #4]	@ (8003574 <__malloc_unlock+0x8>)
 800356e:	f7ff bf0a 	b.w	8003386 <__retarget_lock_release_recursive>
 8003572:	bf00      	nop
 8003574:	20000260 	.word	0x20000260

08003578 <__ssputs_r>:
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	688e      	ldr	r6, [r1, #8]
 800357e:	461f      	mov	r7, r3
 8003580:	42be      	cmp	r6, r7
 8003582:	680b      	ldr	r3, [r1, #0]
 8003584:	4682      	mov	sl, r0
 8003586:	460c      	mov	r4, r1
 8003588:	4690      	mov	r8, r2
 800358a:	d82d      	bhi.n	80035e8 <__ssputs_r+0x70>
 800358c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003590:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003594:	d026      	beq.n	80035e4 <__ssputs_r+0x6c>
 8003596:	6965      	ldr	r5, [r4, #20]
 8003598:	6909      	ldr	r1, [r1, #16]
 800359a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800359e:	eba3 0901 	sub.w	r9, r3, r1
 80035a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035a6:	1c7b      	adds	r3, r7, #1
 80035a8:	444b      	add	r3, r9
 80035aa:	106d      	asrs	r5, r5, #1
 80035ac:	429d      	cmp	r5, r3
 80035ae:	bf38      	it	cc
 80035b0:	461d      	movcc	r5, r3
 80035b2:	0553      	lsls	r3, r2, #21
 80035b4:	d527      	bpl.n	8003606 <__ssputs_r+0x8e>
 80035b6:	4629      	mov	r1, r5
 80035b8:	f7ff ff52 	bl	8003460 <_malloc_r>
 80035bc:	4606      	mov	r6, r0
 80035be:	b360      	cbz	r0, 800361a <__ssputs_r+0xa2>
 80035c0:	6921      	ldr	r1, [r4, #16]
 80035c2:	464a      	mov	r2, r9
 80035c4:	f000 fae8 	bl	8003b98 <memcpy>
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	6126      	str	r6, [r4, #16]
 80035d6:	6165      	str	r5, [r4, #20]
 80035d8:	444e      	add	r6, r9
 80035da:	eba5 0509 	sub.w	r5, r5, r9
 80035de:	6026      	str	r6, [r4, #0]
 80035e0:	60a5      	str	r5, [r4, #8]
 80035e2:	463e      	mov	r6, r7
 80035e4:	42be      	cmp	r6, r7
 80035e6:	d900      	bls.n	80035ea <__ssputs_r+0x72>
 80035e8:	463e      	mov	r6, r7
 80035ea:	6820      	ldr	r0, [r4, #0]
 80035ec:	4632      	mov	r2, r6
 80035ee:	4641      	mov	r1, r8
 80035f0:	f000 faa8 	bl	8003b44 <memmove>
 80035f4:	68a3      	ldr	r3, [r4, #8]
 80035f6:	1b9b      	subs	r3, r3, r6
 80035f8:	60a3      	str	r3, [r4, #8]
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	4433      	add	r3, r6
 80035fe:	6023      	str	r3, [r4, #0]
 8003600:	2000      	movs	r0, #0
 8003602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003606:	462a      	mov	r2, r5
 8003608:	f000 fad4 	bl	8003bb4 <_realloc_r>
 800360c:	4606      	mov	r6, r0
 800360e:	2800      	cmp	r0, #0
 8003610:	d1e0      	bne.n	80035d4 <__ssputs_r+0x5c>
 8003612:	6921      	ldr	r1, [r4, #16]
 8003614:	4650      	mov	r0, sl
 8003616:	f7ff feb7 	bl	8003388 <_free_r>
 800361a:	230c      	movs	r3, #12
 800361c:	f8ca 3000 	str.w	r3, [sl]
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	f04f 30ff 	mov.w	r0, #4294967295
 800362c:	e7e9      	b.n	8003602 <__ssputs_r+0x8a>
	...

08003630 <_svfiprintf_r>:
 8003630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003634:	4698      	mov	r8, r3
 8003636:	898b      	ldrh	r3, [r1, #12]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	b09d      	sub	sp, #116	@ 0x74
 800363c:	4607      	mov	r7, r0
 800363e:	460d      	mov	r5, r1
 8003640:	4614      	mov	r4, r2
 8003642:	d510      	bpl.n	8003666 <_svfiprintf_r+0x36>
 8003644:	690b      	ldr	r3, [r1, #16]
 8003646:	b973      	cbnz	r3, 8003666 <_svfiprintf_r+0x36>
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	f7ff ff09 	bl	8003460 <_malloc_r>
 800364e:	6028      	str	r0, [r5, #0]
 8003650:	6128      	str	r0, [r5, #16]
 8003652:	b930      	cbnz	r0, 8003662 <_svfiprintf_r+0x32>
 8003654:	230c      	movs	r3, #12
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	b01d      	add	sp, #116	@ 0x74
 800365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003662:	2340      	movs	r3, #64	@ 0x40
 8003664:	616b      	str	r3, [r5, #20]
 8003666:	2300      	movs	r3, #0
 8003668:	9309      	str	r3, [sp, #36]	@ 0x24
 800366a:	2320      	movs	r3, #32
 800366c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003670:	f8cd 800c 	str.w	r8, [sp, #12]
 8003674:	2330      	movs	r3, #48	@ 0x30
 8003676:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003814 <_svfiprintf_r+0x1e4>
 800367a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800367e:	f04f 0901 	mov.w	r9, #1
 8003682:	4623      	mov	r3, r4
 8003684:	469a      	mov	sl, r3
 8003686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800368a:	b10a      	cbz	r2, 8003690 <_svfiprintf_r+0x60>
 800368c:	2a25      	cmp	r2, #37	@ 0x25
 800368e:	d1f9      	bne.n	8003684 <_svfiprintf_r+0x54>
 8003690:	ebba 0b04 	subs.w	fp, sl, r4
 8003694:	d00b      	beq.n	80036ae <_svfiprintf_r+0x7e>
 8003696:	465b      	mov	r3, fp
 8003698:	4622      	mov	r2, r4
 800369a:	4629      	mov	r1, r5
 800369c:	4638      	mov	r0, r7
 800369e:	f7ff ff6b 	bl	8003578 <__ssputs_r>
 80036a2:	3001      	adds	r0, #1
 80036a4:	f000 80a7 	beq.w	80037f6 <_svfiprintf_r+0x1c6>
 80036a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036aa:	445a      	add	r2, fp
 80036ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80036ae:	f89a 3000 	ldrb.w	r3, [sl]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 809f 	beq.w	80037f6 <_svfiprintf_r+0x1c6>
 80036b8:	2300      	movs	r3, #0
 80036ba:	f04f 32ff 	mov.w	r2, #4294967295
 80036be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c2:	f10a 0a01 	add.w	sl, sl, #1
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	9307      	str	r3, [sp, #28]
 80036ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80036d0:	4654      	mov	r4, sl
 80036d2:	2205      	movs	r2, #5
 80036d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d8:	484e      	ldr	r0, [pc, #312]	@ (8003814 <_svfiprintf_r+0x1e4>)
 80036da:	f7fc fd81 	bl	80001e0 <memchr>
 80036de:	9a04      	ldr	r2, [sp, #16]
 80036e0:	b9d8      	cbnz	r0, 800371a <_svfiprintf_r+0xea>
 80036e2:	06d0      	lsls	r0, r2, #27
 80036e4:	bf44      	itt	mi
 80036e6:	2320      	movmi	r3, #32
 80036e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036ec:	0711      	lsls	r1, r2, #28
 80036ee:	bf44      	itt	mi
 80036f0:	232b      	movmi	r3, #43	@ 0x2b
 80036f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036f6:	f89a 3000 	ldrb.w	r3, [sl]
 80036fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80036fc:	d015      	beq.n	800372a <_svfiprintf_r+0xfa>
 80036fe:	9a07      	ldr	r2, [sp, #28]
 8003700:	4654      	mov	r4, sl
 8003702:	2000      	movs	r0, #0
 8003704:	f04f 0c0a 	mov.w	ip, #10
 8003708:	4621      	mov	r1, r4
 800370a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800370e:	3b30      	subs	r3, #48	@ 0x30
 8003710:	2b09      	cmp	r3, #9
 8003712:	d94b      	bls.n	80037ac <_svfiprintf_r+0x17c>
 8003714:	b1b0      	cbz	r0, 8003744 <_svfiprintf_r+0x114>
 8003716:	9207      	str	r2, [sp, #28]
 8003718:	e014      	b.n	8003744 <_svfiprintf_r+0x114>
 800371a:	eba0 0308 	sub.w	r3, r0, r8
 800371e:	fa09 f303 	lsl.w	r3, r9, r3
 8003722:	4313      	orrs	r3, r2
 8003724:	9304      	str	r3, [sp, #16]
 8003726:	46a2      	mov	sl, r4
 8003728:	e7d2      	b.n	80036d0 <_svfiprintf_r+0xa0>
 800372a:	9b03      	ldr	r3, [sp, #12]
 800372c:	1d19      	adds	r1, r3, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	9103      	str	r1, [sp, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	bfbb      	ittet	lt
 8003736:	425b      	neglt	r3, r3
 8003738:	f042 0202 	orrlt.w	r2, r2, #2
 800373c:	9307      	strge	r3, [sp, #28]
 800373e:	9307      	strlt	r3, [sp, #28]
 8003740:	bfb8      	it	lt
 8003742:	9204      	strlt	r2, [sp, #16]
 8003744:	7823      	ldrb	r3, [r4, #0]
 8003746:	2b2e      	cmp	r3, #46	@ 0x2e
 8003748:	d10a      	bne.n	8003760 <_svfiprintf_r+0x130>
 800374a:	7863      	ldrb	r3, [r4, #1]
 800374c:	2b2a      	cmp	r3, #42	@ 0x2a
 800374e:	d132      	bne.n	80037b6 <_svfiprintf_r+0x186>
 8003750:	9b03      	ldr	r3, [sp, #12]
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	9203      	str	r2, [sp, #12]
 8003758:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800375c:	3402      	adds	r4, #2
 800375e:	9305      	str	r3, [sp, #20]
 8003760:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003824 <_svfiprintf_r+0x1f4>
 8003764:	7821      	ldrb	r1, [r4, #0]
 8003766:	2203      	movs	r2, #3
 8003768:	4650      	mov	r0, sl
 800376a:	f7fc fd39 	bl	80001e0 <memchr>
 800376e:	b138      	cbz	r0, 8003780 <_svfiprintf_r+0x150>
 8003770:	9b04      	ldr	r3, [sp, #16]
 8003772:	eba0 000a 	sub.w	r0, r0, sl
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	4082      	lsls	r2, r0
 800377a:	4313      	orrs	r3, r2
 800377c:	3401      	adds	r4, #1
 800377e:	9304      	str	r3, [sp, #16]
 8003780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003784:	4824      	ldr	r0, [pc, #144]	@ (8003818 <_svfiprintf_r+0x1e8>)
 8003786:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800378a:	2206      	movs	r2, #6
 800378c:	f7fc fd28 	bl	80001e0 <memchr>
 8003790:	2800      	cmp	r0, #0
 8003792:	d036      	beq.n	8003802 <_svfiprintf_r+0x1d2>
 8003794:	4b21      	ldr	r3, [pc, #132]	@ (800381c <_svfiprintf_r+0x1ec>)
 8003796:	bb1b      	cbnz	r3, 80037e0 <_svfiprintf_r+0x1b0>
 8003798:	9b03      	ldr	r3, [sp, #12]
 800379a:	3307      	adds	r3, #7
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	3308      	adds	r3, #8
 80037a2:	9303      	str	r3, [sp, #12]
 80037a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037a6:	4433      	add	r3, r6
 80037a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80037aa:	e76a      	b.n	8003682 <_svfiprintf_r+0x52>
 80037ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b0:	460c      	mov	r4, r1
 80037b2:	2001      	movs	r0, #1
 80037b4:	e7a8      	b.n	8003708 <_svfiprintf_r+0xd8>
 80037b6:	2300      	movs	r3, #0
 80037b8:	3401      	adds	r4, #1
 80037ba:	9305      	str	r3, [sp, #20]
 80037bc:	4619      	mov	r1, r3
 80037be:	f04f 0c0a 	mov.w	ip, #10
 80037c2:	4620      	mov	r0, r4
 80037c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037c8:	3a30      	subs	r2, #48	@ 0x30
 80037ca:	2a09      	cmp	r2, #9
 80037cc:	d903      	bls.n	80037d6 <_svfiprintf_r+0x1a6>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0c6      	beq.n	8003760 <_svfiprintf_r+0x130>
 80037d2:	9105      	str	r1, [sp, #20]
 80037d4:	e7c4      	b.n	8003760 <_svfiprintf_r+0x130>
 80037d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80037da:	4604      	mov	r4, r0
 80037dc:	2301      	movs	r3, #1
 80037de:	e7f0      	b.n	80037c2 <_svfiprintf_r+0x192>
 80037e0:	ab03      	add	r3, sp, #12
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	462a      	mov	r2, r5
 80037e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003820 <_svfiprintf_r+0x1f0>)
 80037e8:	a904      	add	r1, sp, #16
 80037ea:	4638      	mov	r0, r7
 80037ec:	f3af 8000 	nop.w
 80037f0:	1c42      	adds	r2, r0, #1
 80037f2:	4606      	mov	r6, r0
 80037f4:	d1d6      	bne.n	80037a4 <_svfiprintf_r+0x174>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	065b      	lsls	r3, r3, #25
 80037fa:	f53f af2d 	bmi.w	8003658 <_svfiprintf_r+0x28>
 80037fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003800:	e72c      	b.n	800365c <_svfiprintf_r+0x2c>
 8003802:	ab03      	add	r3, sp, #12
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	462a      	mov	r2, r5
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <_svfiprintf_r+0x1f0>)
 800380a:	a904      	add	r1, sp, #16
 800380c:	4638      	mov	r0, r7
 800380e:	f000 f879 	bl	8003904 <_printf_i>
 8003812:	e7ed      	b.n	80037f0 <_svfiprintf_r+0x1c0>
 8003814:	08003c88 	.word	0x08003c88
 8003818:	08003c92 	.word	0x08003c92
 800381c:	00000000 	.word	0x00000000
 8003820:	08003579 	.word	0x08003579
 8003824:	08003c8e 	.word	0x08003c8e

08003828 <_printf_common>:
 8003828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	4616      	mov	r6, r2
 800382e:	4698      	mov	r8, r3
 8003830:	688a      	ldr	r2, [r1, #8]
 8003832:	690b      	ldr	r3, [r1, #16]
 8003834:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003838:	4293      	cmp	r3, r2
 800383a:	bfb8      	it	lt
 800383c:	4613      	movlt	r3, r2
 800383e:	6033      	str	r3, [r6, #0]
 8003840:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003844:	4607      	mov	r7, r0
 8003846:	460c      	mov	r4, r1
 8003848:	b10a      	cbz	r2, 800384e <_printf_common+0x26>
 800384a:	3301      	adds	r3, #1
 800384c:	6033      	str	r3, [r6, #0]
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	0699      	lsls	r1, r3, #26
 8003852:	bf42      	ittt	mi
 8003854:	6833      	ldrmi	r3, [r6, #0]
 8003856:	3302      	addmi	r3, #2
 8003858:	6033      	strmi	r3, [r6, #0]
 800385a:	6825      	ldr	r5, [r4, #0]
 800385c:	f015 0506 	ands.w	r5, r5, #6
 8003860:	d106      	bne.n	8003870 <_printf_common+0x48>
 8003862:	f104 0a19 	add.w	sl, r4, #25
 8003866:	68e3      	ldr	r3, [r4, #12]
 8003868:	6832      	ldr	r2, [r6, #0]
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	42ab      	cmp	r3, r5
 800386e:	dc26      	bgt.n	80038be <_printf_common+0x96>
 8003870:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	3b00      	subs	r3, #0
 8003878:	bf18      	it	ne
 800387a:	2301      	movne	r3, #1
 800387c:	0692      	lsls	r2, r2, #26
 800387e:	d42b      	bmi.n	80038d8 <_printf_common+0xb0>
 8003880:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003884:	4641      	mov	r1, r8
 8003886:	4638      	mov	r0, r7
 8003888:	47c8      	blx	r9
 800388a:	3001      	adds	r0, #1
 800388c:	d01e      	beq.n	80038cc <_printf_common+0xa4>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	f003 0306 	and.w	r3, r3, #6
 8003896:	2b04      	cmp	r3, #4
 8003898:	bf02      	ittt	eq
 800389a:	68e5      	ldreq	r5, [r4, #12]
 800389c:	6833      	ldreq	r3, [r6, #0]
 800389e:	1aed      	subeq	r5, r5, r3
 80038a0:	68a3      	ldr	r3, [r4, #8]
 80038a2:	bf0c      	ite	eq
 80038a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a8:	2500      	movne	r5, #0
 80038aa:	4293      	cmp	r3, r2
 80038ac:	bfc4      	itt	gt
 80038ae:	1a9b      	subgt	r3, r3, r2
 80038b0:	18ed      	addgt	r5, r5, r3
 80038b2:	2600      	movs	r6, #0
 80038b4:	341a      	adds	r4, #26
 80038b6:	42b5      	cmp	r5, r6
 80038b8:	d11a      	bne.n	80038f0 <_printf_common+0xc8>
 80038ba:	2000      	movs	r0, #0
 80038bc:	e008      	b.n	80038d0 <_printf_common+0xa8>
 80038be:	2301      	movs	r3, #1
 80038c0:	4652      	mov	r2, sl
 80038c2:	4641      	mov	r1, r8
 80038c4:	4638      	mov	r0, r7
 80038c6:	47c8      	blx	r9
 80038c8:	3001      	adds	r0, #1
 80038ca:	d103      	bne.n	80038d4 <_printf_common+0xac>
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d4:	3501      	adds	r5, #1
 80038d6:	e7c6      	b.n	8003866 <_printf_common+0x3e>
 80038d8:	18e1      	adds	r1, r4, r3
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	2030      	movs	r0, #48	@ 0x30
 80038de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038e2:	4422      	add	r2, r4
 80038e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80038e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80038ec:	3302      	adds	r3, #2
 80038ee:	e7c7      	b.n	8003880 <_printf_common+0x58>
 80038f0:	2301      	movs	r3, #1
 80038f2:	4622      	mov	r2, r4
 80038f4:	4641      	mov	r1, r8
 80038f6:	4638      	mov	r0, r7
 80038f8:	47c8      	blx	r9
 80038fa:	3001      	adds	r0, #1
 80038fc:	d0e6      	beq.n	80038cc <_printf_common+0xa4>
 80038fe:	3601      	adds	r6, #1
 8003900:	e7d9      	b.n	80038b6 <_printf_common+0x8e>
	...

08003904 <_printf_i>:
 8003904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003908:	7e0f      	ldrb	r7, [r1, #24]
 800390a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800390c:	2f78      	cmp	r7, #120	@ 0x78
 800390e:	4691      	mov	r9, r2
 8003910:	4680      	mov	r8, r0
 8003912:	460c      	mov	r4, r1
 8003914:	469a      	mov	sl, r3
 8003916:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800391a:	d807      	bhi.n	800392c <_printf_i+0x28>
 800391c:	2f62      	cmp	r7, #98	@ 0x62
 800391e:	d80a      	bhi.n	8003936 <_printf_i+0x32>
 8003920:	2f00      	cmp	r7, #0
 8003922:	f000 80d2 	beq.w	8003aca <_printf_i+0x1c6>
 8003926:	2f58      	cmp	r7, #88	@ 0x58
 8003928:	f000 80b9 	beq.w	8003a9e <_printf_i+0x19a>
 800392c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003930:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003934:	e03a      	b.n	80039ac <_printf_i+0xa8>
 8003936:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800393a:	2b15      	cmp	r3, #21
 800393c:	d8f6      	bhi.n	800392c <_printf_i+0x28>
 800393e:	a101      	add	r1, pc, #4	@ (adr r1, 8003944 <_printf_i+0x40>)
 8003940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003944:	0800399d 	.word	0x0800399d
 8003948:	080039b1 	.word	0x080039b1
 800394c:	0800392d 	.word	0x0800392d
 8003950:	0800392d 	.word	0x0800392d
 8003954:	0800392d 	.word	0x0800392d
 8003958:	0800392d 	.word	0x0800392d
 800395c:	080039b1 	.word	0x080039b1
 8003960:	0800392d 	.word	0x0800392d
 8003964:	0800392d 	.word	0x0800392d
 8003968:	0800392d 	.word	0x0800392d
 800396c:	0800392d 	.word	0x0800392d
 8003970:	08003ab1 	.word	0x08003ab1
 8003974:	080039db 	.word	0x080039db
 8003978:	08003a6b 	.word	0x08003a6b
 800397c:	0800392d 	.word	0x0800392d
 8003980:	0800392d 	.word	0x0800392d
 8003984:	08003ad3 	.word	0x08003ad3
 8003988:	0800392d 	.word	0x0800392d
 800398c:	080039db 	.word	0x080039db
 8003990:	0800392d 	.word	0x0800392d
 8003994:	0800392d 	.word	0x0800392d
 8003998:	08003a73 	.word	0x08003a73
 800399c:	6833      	ldr	r3, [r6, #0]
 800399e:	1d1a      	adds	r2, r3, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6032      	str	r2, [r6, #0]
 80039a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039ac:	2301      	movs	r3, #1
 80039ae:	e09d      	b.n	8003aec <_printf_i+0x1e8>
 80039b0:	6833      	ldr	r3, [r6, #0]
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	1d19      	adds	r1, r3, #4
 80039b6:	6031      	str	r1, [r6, #0]
 80039b8:	0606      	lsls	r6, r0, #24
 80039ba:	d501      	bpl.n	80039c0 <_printf_i+0xbc>
 80039bc:	681d      	ldr	r5, [r3, #0]
 80039be:	e003      	b.n	80039c8 <_printf_i+0xc4>
 80039c0:	0645      	lsls	r5, r0, #25
 80039c2:	d5fb      	bpl.n	80039bc <_printf_i+0xb8>
 80039c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	da03      	bge.n	80039d4 <_printf_i+0xd0>
 80039cc:	232d      	movs	r3, #45	@ 0x2d
 80039ce:	426d      	negs	r5, r5
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039d4:	4859      	ldr	r0, [pc, #356]	@ (8003b3c <_printf_i+0x238>)
 80039d6:	230a      	movs	r3, #10
 80039d8:	e011      	b.n	80039fe <_printf_i+0xfa>
 80039da:	6821      	ldr	r1, [r4, #0]
 80039dc:	6833      	ldr	r3, [r6, #0]
 80039de:	0608      	lsls	r0, r1, #24
 80039e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80039e4:	d402      	bmi.n	80039ec <_printf_i+0xe8>
 80039e6:	0649      	lsls	r1, r1, #25
 80039e8:	bf48      	it	mi
 80039ea:	b2ad      	uxthmi	r5, r5
 80039ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80039ee:	4853      	ldr	r0, [pc, #332]	@ (8003b3c <_printf_i+0x238>)
 80039f0:	6033      	str	r3, [r6, #0]
 80039f2:	bf14      	ite	ne
 80039f4:	230a      	movne	r3, #10
 80039f6:	2308      	moveq	r3, #8
 80039f8:	2100      	movs	r1, #0
 80039fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039fe:	6866      	ldr	r6, [r4, #4]
 8003a00:	60a6      	str	r6, [r4, #8]
 8003a02:	2e00      	cmp	r6, #0
 8003a04:	bfa2      	ittt	ge
 8003a06:	6821      	ldrge	r1, [r4, #0]
 8003a08:	f021 0104 	bicge.w	r1, r1, #4
 8003a0c:	6021      	strge	r1, [r4, #0]
 8003a0e:	b90d      	cbnz	r5, 8003a14 <_printf_i+0x110>
 8003a10:	2e00      	cmp	r6, #0
 8003a12:	d04b      	beq.n	8003aac <_printf_i+0x1a8>
 8003a14:	4616      	mov	r6, r2
 8003a16:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a1a:	fb03 5711 	mls	r7, r3, r1, r5
 8003a1e:	5dc7      	ldrb	r7, [r0, r7]
 8003a20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a24:	462f      	mov	r7, r5
 8003a26:	42bb      	cmp	r3, r7
 8003a28:	460d      	mov	r5, r1
 8003a2a:	d9f4      	bls.n	8003a16 <_printf_i+0x112>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <_printf_i+0x144>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	07df      	lsls	r7, r3, #31
 8003a34:	d508      	bpl.n	8003a48 <_printf_i+0x144>
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	6861      	ldr	r1, [r4, #4]
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	bfde      	ittt	le
 8003a3e:	2330      	movle	r3, #48	@ 0x30
 8003a40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a48:	1b92      	subs	r2, r2, r6
 8003a4a:	6122      	str	r2, [r4, #16]
 8003a4c:	f8cd a000 	str.w	sl, [sp]
 8003a50:	464b      	mov	r3, r9
 8003a52:	aa03      	add	r2, sp, #12
 8003a54:	4621      	mov	r1, r4
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7ff fee6 	bl	8003828 <_printf_common>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d14a      	bne.n	8003af6 <_printf_i+0x1f2>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	b004      	add	sp, #16
 8003a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f043 0320 	orr.w	r3, r3, #32
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	4833      	ldr	r0, [pc, #204]	@ (8003b40 <_printf_i+0x23c>)
 8003a74:	2778      	movs	r7, #120	@ 0x78
 8003a76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	6831      	ldr	r1, [r6, #0]
 8003a7e:	061f      	lsls	r7, r3, #24
 8003a80:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a84:	d402      	bmi.n	8003a8c <_printf_i+0x188>
 8003a86:	065f      	lsls	r7, r3, #25
 8003a88:	bf48      	it	mi
 8003a8a:	b2ad      	uxthmi	r5, r5
 8003a8c:	6031      	str	r1, [r6, #0]
 8003a8e:	07d9      	lsls	r1, r3, #31
 8003a90:	bf44      	itt	mi
 8003a92:	f043 0320 	orrmi.w	r3, r3, #32
 8003a96:	6023      	strmi	r3, [r4, #0]
 8003a98:	b11d      	cbz	r5, 8003aa2 <_printf_i+0x19e>
 8003a9a:	2310      	movs	r3, #16
 8003a9c:	e7ac      	b.n	80039f8 <_printf_i+0xf4>
 8003a9e:	4827      	ldr	r0, [pc, #156]	@ (8003b3c <_printf_i+0x238>)
 8003aa0:	e7e9      	b.n	8003a76 <_printf_i+0x172>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	f023 0320 	bic.w	r3, r3, #32
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	e7f6      	b.n	8003a9a <_printf_i+0x196>
 8003aac:	4616      	mov	r6, r2
 8003aae:	e7bd      	b.n	8003a2c <_printf_i+0x128>
 8003ab0:	6833      	ldr	r3, [r6, #0]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	6961      	ldr	r1, [r4, #20]
 8003ab6:	1d18      	adds	r0, r3, #4
 8003ab8:	6030      	str	r0, [r6, #0]
 8003aba:	062e      	lsls	r6, r5, #24
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	d501      	bpl.n	8003ac4 <_printf_i+0x1c0>
 8003ac0:	6019      	str	r1, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <_printf_i+0x1c6>
 8003ac4:	0668      	lsls	r0, r5, #25
 8003ac6:	d5fb      	bpl.n	8003ac0 <_printf_i+0x1bc>
 8003ac8:	8019      	strh	r1, [r3, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	6123      	str	r3, [r4, #16]
 8003ace:	4616      	mov	r6, r2
 8003ad0:	e7bc      	b.n	8003a4c <_printf_i+0x148>
 8003ad2:	6833      	ldr	r3, [r6, #0]
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	6032      	str	r2, [r6, #0]
 8003ad8:	681e      	ldr	r6, [r3, #0]
 8003ada:	6862      	ldr	r2, [r4, #4]
 8003adc:	2100      	movs	r1, #0
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f7fc fb7e 	bl	80001e0 <memchr>
 8003ae4:	b108      	cbz	r0, 8003aea <_printf_i+0x1e6>
 8003ae6:	1b80      	subs	r0, r0, r6
 8003ae8:	6060      	str	r0, [r4, #4]
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	2300      	movs	r3, #0
 8003af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003af4:	e7aa      	b.n	8003a4c <_printf_i+0x148>
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	4632      	mov	r2, r6
 8003afa:	4649      	mov	r1, r9
 8003afc:	4640      	mov	r0, r8
 8003afe:	47d0      	blx	sl
 8003b00:	3001      	adds	r0, #1
 8003b02:	d0ad      	beq.n	8003a60 <_printf_i+0x15c>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	079b      	lsls	r3, r3, #30
 8003b08:	d413      	bmi.n	8003b32 <_printf_i+0x22e>
 8003b0a:	68e0      	ldr	r0, [r4, #12]
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	4298      	cmp	r0, r3
 8003b10:	bfb8      	it	lt
 8003b12:	4618      	movlt	r0, r3
 8003b14:	e7a6      	b.n	8003a64 <_printf_i+0x160>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4632      	mov	r2, r6
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	47d0      	blx	sl
 8003b20:	3001      	adds	r0, #1
 8003b22:	d09d      	beq.n	8003a60 <_printf_i+0x15c>
 8003b24:	3501      	adds	r5, #1
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	9903      	ldr	r1, [sp, #12]
 8003b2a:	1a5b      	subs	r3, r3, r1
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dcf2      	bgt.n	8003b16 <_printf_i+0x212>
 8003b30:	e7eb      	b.n	8003b0a <_printf_i+0x206>
 8003b32:	2500      	movs	r5, #0
 8003b34:	f104 0619 	add.w	r6, r4, #25
 8003b38:	e7f5      	b.n	8003b26 <_printf_i+0x222>
 8003b3a:	bf00      	nop
 8003b3c:	08003c99 	.word	0x08003c99
 8003b40:	08003caa 	.word	0x08003caa

08003b44 <memmove>:
 8003b44:	4288      	cmp	r0, r1
 8003b46:	b510      	push	{r4, lr}
 8003b48:	eb01 0402 	add.w	r4, r1, r2
 8003b4c:	d902      	bls.n	8003b54 <memmove+0x10>
 8003b4e:	4284      	cmp	r4, r0
 8003b50:	4623      	mov	r3, r4
 8003b52:	d807      	bhi.n	8003b64 <memmove+0x20>
 8003b54:	1e43      	subs	r3, r0, #1
 8003b56:	42a1      	cmp	r1, r4
 8003b58:	d008      	beq.n	8003b6c <memmove+0x28>
 8003b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b62:	e7f8      	b.n	8003b56 <memmove+0x12>
 8003b64:	4402      	add	r2, r0
 8003b66:	4601      	mov	r1, r0
 8003b68:	428a      	cmp	r2, r1
 8003b6a:	d100      	bne.n	8003b6e <memmove+0x2a>
 8003b6c:	bd10      	pop	{r4, pc}
 8003b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b76:	e7f7      	b.n	8003b68 <memmove+0x24>

08003b78 <_sbrk_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d06      	ldr	r5, [pc, #24]	@ (8003b94 <_sbrk_r+0x1c>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fc ff6e 	bl	8000a64 <_sbrk>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_sbrk_r+0x1a>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_sbrk_r+0x1a>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	2000025c 	.word	0x2000025c

08003b98 <memcpy>:
 8003b98:	440a      	add	r2, r1
 8003b9a:	4291      	cmp	r1, r2
 8003b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ba0:	d100      	bne.n	8003ba4 <memcpy+0xc>
 8003ba2:	4770      	bx	lr
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bae:	4291      	cmp	r1, r2
 8003bb0:	d1f9      	bne.n	8003ba6 <memcpy+0xe>
 8003bb2:	bd10      	pop	{r4, pc}

08003bb4 <_realloc_r>:
 8003bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb8:	4680      	mov	r8, r0
 8003bba:	4615      	mov	r5, r2
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	b921      	cbnz	r1, 8003bca <_realloc_r+0x16>
 8003bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	f7ff bc4b 	b.w	8003460 <_malloc_r>
 8003bca:	b92a      	cbnz	r2, 8003bd8 <_realloc_r+0x24>
 8003bcc:	f7ff fbdc 	bl	8003388 <_free_r>
 8003bd0:	2400      	movs	r4, #0
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd8:	f000 f81a 	bl	8003c10 <_malloc_usable_size_r>
 8003bdc:	4285      	cmp	r5, r0
 8003bde:	4606      	mov	r6, r0
 8003be0:	d802      	bhi.n	8003be8 <_realloc_r+0x34>
 8003be2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003be6:	d8f4      	bhi.n	8003bd2 <_realloc_r+0x1e>
 8003be8:	4629      	mov	r1, r5
 8003bea:	4640      	mov	r0, r8
 8003bec:	f7ff fc38 	bl	8003460 <_malloc_r>
 8003bf0:	4607      	mov	r7, r0
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d0ec      	beq.n	8003bd0 <_realloc_r+0x1c>
 8003bf6:	42b5      	cmp	r5, r6
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	bf28      	it	cs
 8003bfe:	4632      	movcs	r2, r6
 8003c00:	f7ff ffca 	bl	8003b98 <memcpy>
 8003c04:	4621      	mov	r1, r4
 8003c06:	4640      	mov	r0, r8
 8003c08:	f7ff fbbe 	bl	8003388 <_free_r>
 8003c0c:	463c      	mov	r4, r7
 8003c0e:	e7e0      	b.n	8003bd2 <_realloc_r+0x1e>

08003c10 <_malloc_usable_size_r>:
 8003c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c14:	1f18      	subs	r0, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bfbc      	itt	lt
 8003c1a:	580b      	ldrlt	r3, [r1, r0]
 8003c1c:	18c0      	addlt	r0, r0, r3
 8003c1e:	4770      	bx	lr

08003c20 <_init>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr

08003c2c <_fini>:
 8003c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2e:	bf00      	nop
 8003c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c32:	bc08      	pop	{r3}
 8003c34:	469e      	mov	lr, r3
 8003c36:	4770      	bx	lr
