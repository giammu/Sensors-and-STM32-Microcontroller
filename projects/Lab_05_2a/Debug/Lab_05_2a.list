
Lab_05_2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006a98  08006a98  00007a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e40  08006e40  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006e40  08006e40  00007e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e48  08006e48  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e48  08006e48  00007e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e4c  08006e4c  00007e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006e50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001d4  08007024  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007024  00008434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa29  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d04  00000000  00000000  00012c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00014938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000702  00000000  00000000  00015268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017853  00000000  00000000  0001596a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c01c  00000000  00000000  0002d1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c83  00000000  00000000  000391d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbe5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000363c  00000000  00000000  000cbea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000cf4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a80 	.word	0x08006a80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006a80 	.word	0x08006a80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b098      	sub	sp, #96	@ 0x60
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	6078      	str	r0, [r7, #4]
	  int conversion = HAL_ADC_GetValue(hadc1);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 feb1 	bl	8001cb8 <HAL_ADC_GetValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	657b      	str	r3, [r7, #84]	@ 0x54
	  float voltage = conversion*3.3/4096.0;
 8000f5a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000f5c:	f7ff faea 	bl	8000534 <__aeabi_i2d>
 8000f60:	a31a      	add	r3, pc, #104	@ (adr r3, 8000fcc <HAL_ADC_ConvCpltCallback+0x84>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	f7ff fb4f 	bl	8000608 <__aeabi_dmul>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000f78:	f7ff fc70 	bl	800085c <__aeabi_ddiv>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4610      	mov	r0, r2
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fe18 	bl	8000bb8 <__aeabi_d2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	653b      	str	r3, [r7, #80]	@ 0x50
	  char string[64];
	  int lenght = snprintf(string, sizeof(string), "Voltage: %.3f V\r\n", voltage);
 8000f8c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000f8e:	f7ff fae3 	bl	8000558 <__aeabi_f2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	f107 000c 	add.w	r0, r7, #12
 8000f9a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f9e:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000fa0:	2140      	movs	r1, #64	@ 0x40
 8000fa2:	f003 fc2b 	bl	80047fc <sniprintf>
 8000fa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  HAL_UART_Transmit(&huart2, string, lenght, 100);
 8000fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f107 010c 	add.w	r1, r7, #12
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	4805      	ldr	r0, [pc, #20]	@ (8000fc8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000fb4:	f002 fb4c 	bl	8003650 <HAL_UART_Transmit>
}
 8000fb8:	bf00      	nop
 8000fba:	3758      	adds	r7, #88	@ 0x58
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40b00000 	.word	0x40b00000
 8000fc4:	08006a98 	.word	0x08006a98
 8000fc8:	20000238 	.word	0x20000238
 8000fcc:	66666666 	.word	0x66666666
 8000fd0:	400a6666 	.word	0x400a6666

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fbc6 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f814 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 f91a 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe4:	f000 f8f8 	bl	80011d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fe8:	f000 f8cc 	bl	8001184 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fec:	f000 f878 	bl	80010e0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc1);
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <main+0x30>)
 8000ff2:	f000 fc93 	bl	800191c <HAL_ADC_Start_IT>
	  HAL_Delay(1000);
 8000ff6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffa:	f000 fc27 	bl	800184c <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 8000ffe:	bf00      	nop
 8001000:	e7f6      	b.n	8000ff0 <main+0x1c>
 8001002:	bf00      	nop
 8001004:	200001f0 	.word	0x200001f0

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	@ 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	@ 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fc67 	bl	80048ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <SystemClock_Config+0xd0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	4a28      	ldr	r2, [pc, #160]	@ (80010d8 <SystemClock_Config+0xd0>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	@ 0x40
 800103c:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001054:	4a21      	ldr	r2, [pc, #132]	@ (80010dc <SystemClock_Config+0xd4>)
 8001056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800107c:	2310      	movs	r3, #16
 800107e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001080:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001086:	2304      	movs	r3, #4
 8001088:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800108a:	2307      	movs	r3, #7
 800108c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fdf4 	bl	8002c80 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800109e:	f000 f929 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2302      	movs	r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2102      	movs	r1, #2
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 f856 	bl	8003170 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ca:	f000 f913 	bl	80012f4 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	@ 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010f2:	4b21      	ldr	r3, [pc, #132]	@ (8001178 <MX_ADC1_Init+0x98>)
 80010f4:	4a21      	ldr	r2, [pc, #132]	@ (800117c <MX_ADC1_Init+0x9c>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <MX_ADC1_Init+0x98>)
 80010fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b1d      	ldr	r3, [pc, #116]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800110c:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001120:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001122:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <MX_ADC1_Init+0xa0>)
 8001124:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_ADC1_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_ADC1_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001140:	480d      	ldr	r0, [pc, #52]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001142:	f000 fba7 	bl	8001894 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 f8d2 	bl	80012f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001150:	2301      	movs	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001158:	2307      	movs	r3, #7
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_ADC1_Init+0x98>)
 8001162:	f000 fdcb 	bl	8001cfc <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800116c:	f000 f8c2 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200001f0 	.word	0x200001f0
 800117c:	40012000 	.word	0x40012000
 8001180:	0f000001 	.word	0x0f000001

08001184 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <MX_USART2_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011bc:	f002 f9f8 	bl	80035b0 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f895 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000238 	.word	0x20000238
 80011d4:	40004400 	.word	0x40004400

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_DMA_Init+0x3c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <MX_DMA_Init+0x3c>)
 80011e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_DMA_Init+0x3c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2011      	movs	r0, #17
 8001200:	f001 f87f 	bl	8002302 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001204:	2011      	movs	r0, #17
 8001206:	f001 f898 	bl	800233a <HAL_NVIC_EnableIRQ>

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a2c      	ldr	r2, [pc, #176]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a25      	ldr	r2, [pc, #148]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a1e      	ldr	r2, [pc, #120]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2120      	movs	r1, #32
 80012a2:	4812      	ldr	r0, [pc, #72]	@ (80012ec <MX_GPIO_Init+0xd4>)
 80012a4:	f001 fcd2 	bl	8002c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <MX_GPIO_Init+0xd8>)
 80012c0:	f001 fb40 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012c4:	2320      	movs	r3, #32
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4804      	ldr	r0, [pc, #16]	@ (80012ec <MX_GPIO_Init+0xd4>)
 80012dc:	f001 fb32 	bl	8002944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020800 	.word	0x40020800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001314:	6453      	str	r3, [r2, #68]	@ 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133e:	2007      	movs	r0, #7
 8001340:	f000 ffd4 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a1b      	ldr	r2, [pc, #108]	@ (80013dc <HAL_ADC_MspInit+0x8c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12f      	bne.n	80013d2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <HAL_ADC_MspInit+0x90>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_ADC_MspInit+0x90>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <HAL_ADC_MspInit+0x90>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_ADC_MspInit+0x90>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <HAL_ADC_MspInit+0x90>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <HAL_ADC_MspInit+0x90>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013aa:	2302      	movs	r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4809      	ldr	r0, [pc, #36]	@ (80013e4 <HAL_ADC_MspInit+0x94>)
 80013be:	f001 fac1 	bl	8002944 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2012      	movs	r0, #18
 80013c8:	f000 ff9b 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013cc:	2012      	movs	r0, #18
 80013ce:	f000 ffb4 	bl	800233a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012000 	.word	0x40012000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a30      	ldr	r2, [pc, #192]	@ (80014c8 <HAL_UART_MspInit+0xe0>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d159      	bne.n	80014be <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <HAL_UART_MspInit+0xe4>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a2e      	ldr	r2, [pc, #184]	@ (80014cc <HAL_UART_MspInit+0xe4>)
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <HAL_UART_MspInit+0xe4>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_UART_MspInit+0xe4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a27      	ldr	r2, [pc, #156]	@ (80014cc <HAL_UART_MspInit+0xe4>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <HAL_UART_MspInit+0xe4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001442:	230c      	movs	r3, #12
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001452:	2307      	movs	r3, #7
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	481c      	ldr	r0, [pc, #112]	@ (80014d0 <HAL_UART_MspInit+0xe8>)
 800145e:	f001 fa71 	bl	8002944 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 8001464:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <HAL_UART_MspInit+0xf0>)
 8001466:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001468:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 800146a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800146e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001470:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 8001472:	2240      	movs	r2, #64	@ 0x40
 8001474:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 800147e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001482:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148a:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001496:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149c:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014a2:	480c      	ldr	r0, [pc, #48]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 80014a4:	f000 ff64 	bl	8002370 <HAL_DMA_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80014ae:	f7ff ff21 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 80014b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80014b8:	4a06      	ldr	r2, [pc, #24]	@ (80014d4 <HAL_UART_MspInit+0xec>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40004400 	.word	0x40004400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	20000280 	.word	0x20000280
 80014d8:	400260a0 	.word	0x400260a0

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f96b 	bl	800180c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA1_Stream6_IRQHandler+0x10>)
 8001542:	f000 ffc3 	bl	80024cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000280 	.word	0x20000280

08001550 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <ADC_IRQHandler+0x10>)
 8001556:	f000 fa9f 	bl	8001a98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001f0 	.word	0x200001f0

08001564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return 1;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_kill>:

int _kill(int pid, int sig)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800157e:	f003 fa07 	bl	8004990 <__errno>
 8001582:	4603      	mov	r3, r0
 8001584:	2216      	movs	r2, #22
 8001586:	601a      	str	r2, [r3, #0]
  return -1;
 8001588:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_exit>:

void _exit (int status)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ffe7 	bl	8001574 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015a6:	bf00      	nop
 80015a8:	e7fd      	b.n	80015a6 <_exit+0x12>

080015aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	60f8      	str	r0, [r7, #12]
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	e00a      	b.n	80015d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015bc:	f3af 8000 	nop.w
 80015c0:	4601      	mov	r1, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	60ba      	str	r2, [r7, #8]
 80015c8:	b2ca      	uxtb	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbf0      	blt.n	80015bc <_read+0x12>
  }

  return len;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e009      	b.n	800160a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	60ba      	str	r2, [r7, #8]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbf1      	blt.n	80015f6 <_write+0x12>
  }
  return len;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_close>:

int _close(int file)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001644:	605a      	str	r2, [r3, #4]
  return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_isatty>:

int _isatty(int file)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800165c:	2301      	movs	r3, #1
}
 800165e:	4618      	mov	r0, r3
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166a:	b480      	push	{r7}
 800166c:	b085      	sub	sp, #20
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f003 f96c 	bl	8004990 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20018000 	.word	0x20018000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	200002e0 	.word	0x200002e0
 80016ec:	20000438 	.word	0x20000438

080016f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001718:	f7ff ffea 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001742:	f003 f92b 	bl	800499c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff fc45 	bl	8000fd4 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001758:	08006e50 	.word	0x08006e50
  ldr r2, =_sbss
 800175c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001760:	20000434 	.word	0x20000434

08001764 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <DMA1_Stream0_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <HAL_Init+0x40>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <HAL_Init+0x40>)
 800177e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <HAL_Init+0x40>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001790:	2003      	movs	r0, #3
 8001792:	f000 fdab 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f808 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800179c:	f7ff fdb0 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023c00 	.word	0x40023c00

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b4:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_InitTick+0x54>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x58>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fdc3 	bl	8002356 <HAL_SYSTICK_Config>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00e      	b.n	80017f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d80a      	bhi.n	80017f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e0:	2200      	movs	r2, #0
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f000 fd8b 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ec:	4a06      	ldr	r2, [pc, #24]	@ (8001808 <HAL_InitTick+0x5c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000000 	.word	0x20000000
 8001804:	20000008 	.word	0x20000008
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_IncTick+0x20>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x24>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4413      	add	r3, r2
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <HAL_IncTick+0x24>)
 800181e:	6013      	str	r3, [r2, #0]
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008
 8001830:	200002e4 	.word	0x200002e4

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	@ (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	200002e4 	.word	0x200002e4

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffde 	bl	8001834 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000008 	.word	0x20000008

08001894 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e033      	b.n	8001912 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff fd4c 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018da:	f023 0302 	bic.w	r3, r3, #2
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 fb2a 	bl	8001f40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	f043 0201 	orr.w	r2, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
 8001902:	e001      	b.n	8001908 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADC_Start_IT+0x1a>
 8001932:	2302      	movs	r3, #2
 8001934:	e0a1      	b.n	8001a7a <HAL_ADC_Start_IT+0x15e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b01      	cmp	r3, #1
 800194a:	d018      	beq.n	800197e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800195c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_ADC_Start_IT+0x16c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a4a      	ldr	r2, [pc, #296]	@ (8001a8c <HAL_ADC_Start_IT+0x170>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0c9a      	lsrs	r2, r3, #18
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001970:	e002      	b.n	8001978 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b01      	cmp	r3, #1
 800198a:	d169      	bne.n	8001a60 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019ca:	d106      	bne.n	80019da <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f023 0206 	bic.w	r2, r3, #6
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <HAL_ADC_Start_IT+0x174>)
 80019ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019f4:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a04:	f043 0320 	orr.w	r3, r3, #32
 8001a08:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d129      	bne.n	8001a78 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	e020      	b.n	8001a78 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a16      	ldr	r2, [pc, #88]	@ (8001a94 <HAL_ADC_Start_IT+0x178>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d11b      	bne.n	8001a78 <HAL_ADC_Start_IT+0x15c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d114      	bne.n	8001a78 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	e00b      	b.n	8001a78 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	40012300 	.word	0x40012300
 8001a94:	40012000 	.word	0x40012000

08001a98 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d049      	beq.n	8001b62 <HAL_ADC_IRQHandler+0xca>
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d046      	beq.n	8001b62 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d12b      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d127      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b08:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0220 	bic.w	r2, r2, #32
 8001b2c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff f9f8 	bl	8000f48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0212 	mvn.w	r2, #18
 8001b60:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b70:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d057      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x190>
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d054      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d139      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001baa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d006      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d12b      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d124      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11d      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d119      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bf2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fa8d 	bl	8002138 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 020c 	mvn.w	r2, #12
 8001c26:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c36:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d017      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x1d6>
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d014      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10d      	bne.n	8001c6e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f837 	bl	8001cd2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0201 	mvn.w	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c7c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d015      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x218>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 0220 	mvn.w	r2, #32
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f820 	bl	8001ce6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0220 	mvn.w	r2, #32
 8001cae:	601a      	str	r2, [r3, #0]
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1c>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e105      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x228>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d925      	bls.n	8001d74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68d9      	ldr	r1, [r3, #12]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b1e      	subs	r3, #30
 8001d3e:	2207      	movs	r2, #7
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43da      	mvns	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68d9      	ldr	r1, [r3, #12]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4603      	mov	r3, r0
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4403      	add	r3, r0
 8001d66:	3b1e      	subs	r3, #30
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	e022      	b.n	8001dba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	2207      	movs	r2, #7
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	400a      	ands	r2, r1
 8001d96:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	4603      	mov	r3, r0
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4403      	add	r3, r0
 8001db0:	409a      	lsls	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d824      	bhi.n	8001e0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b05      	subs	r3, #5
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b05      	subs	r3, #5
 8001dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e0a:	e04c      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d824      	bhi.n	8001e5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	3b23      	subs	r3, #35	@ 0x23
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b23      	subs	r3, #35	@ 0x23
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e5c:	e023      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b41      	subs	r3, #65	@ 0x41
 8001e70:	221f      	movs	r2, #31
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b41      	subs	r3, #65	@ 0x41
 8001e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea6:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <HAL_ADC_ConfigChannel+0x234>)
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <HAL_ADC_ConfigChannel+0x238>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d109      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1cc>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b12      	cmp	r3, #18
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_ADC_ConfigChannel+0x238>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d123      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x21e>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d003      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x1e6>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b11      	cmp	r3, #17
 8001ee0:	d11b      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d111      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_ADC_ConfigChannel+0x23c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_ADC_ConfigChannel+0x240>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	0c9a      	lsrs	r2, r3, #18
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	40012300 	.word	0x40012300
 8001f34:	40012000 	.word	0x40012000
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	431bde83 	.word	0x431bde83

08001f40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f48:	4b79      	ldr	r3, [pc, #484]	@ (8002130 <ADC_Init+0x1f0>)
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	4a58      	ldr	r2, [pc, #352]	@ (8002134 <ADC_Init+0x1f4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d022      	beq.n	800201e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fe6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6899      	ldr	r1, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	e00f      	b.n	800203e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800202c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800203c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0202 	bic.w	r2, r2, #2
 800204c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6899      	ldr	r1, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7e1b      	ldrb	r3, [r3, #24]
 8002058:	005a      	lsls	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800207a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800208a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6859      	ldr	r1, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	3b01      	subs	r3, #1
 8002098:	035a      	lsls	r2, r3, #13
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	e007      	b.n	80020b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	051a      	lsls	r2, r3, #20
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020f6:	025a      	lsls	r2, r3, #9
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800210e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	029a      	lsls	r2, r3, #10
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40012300 	.word	0x40012300
 8002134:	0f000001 	.word	0x0f000001

08002138 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	@ (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	@ (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	@ (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	@ (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff29 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff3e 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff31 	bl	80021b0 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fa5a 	bl	8001834 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e099      	b.n	80024c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ac:	e00f      	b.n	80023ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ae:	f7ff fa41 	bl	8001834 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d908      	bls.n	80023ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e078      	b.n	80024c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e8      	bne.n	80023ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <HAL_DMA_Init+0x158>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	2b04      	cmp	r3, #4
 8002426:	d107      	bne.n	8002438 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002430:	4313      	orrs	r3, r2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	2b04      	cmp	r3, #4
 8002460:	d117      	bne.n	8002492 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f9e9 	bl	800284c <DMA_CheckFifoParam>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2240      	movs	r2, #64	@ 0x40
 8002484:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800248e:	2301      	movs	r3, #1
 8002490:	e016      	b.n	80024c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9a0 	bl	80027e0 <DMA_CalcBaseAndBitshift>
 80024a0:	4603      	mov	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	223f      	movs	r2, #63	@ 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	f010803f 	.word	0xf010803f

080024cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002714 <HAL_DMA_IRQHandler+0x248>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002718 <HAL_DMA_IRQHandler+0x24c>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	2208      	movs	r2, #8
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01a      	beq.n	8002538 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0204 	bic.w	r2, r2, #4
 800251e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	2208      	movs	r2, #8
 8002526:	409a      	lsls	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	2201      	movs	r2, #1
 800253e:	409a      	lsls	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d012      	beq.n	800256e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	2201      	movs	r2, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f043 0202 	orr.w	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	2204      	movs	r2, #4
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	2204      	movs	r2, #4
 8002592:	409a      	lsls	r2, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 0204 	orr.w	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2210      	movs	r2, #16
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d043      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d03c      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	2210      	movs	r2, #16
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d018      	beq.n	800260e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d024      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
 80025fa:	e01f      	b.n	800263c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
 800260c:	e016      	b.n	800263c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0208 	bic.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2220      	movs	r2, #32
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 808f 	beq.w	800276c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8087 	beq.w	800276c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	2220      	movs	r2, #32
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b05      	cmp	r3, #5
 8002674:	d136      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0216 	bic.w	r2, r2, #22
 8002684:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002694:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x1da>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0208 	bic.w	r2, r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	223f      	movs	r2, #63	@ 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d07e      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
        }
        return;
 80026e2:	e079      	b.n	80027d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10d      	bne.n	800271c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	2b00      	cmp	r3, #0
 8002706:	d031      	beq.n	800276c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e02c      	b.n	800276c <HAL_DMA_IRQHandler+0x2a0>
 8002712:	bf00      	nop
 8002714:	20000000 	.word	0x20000000
 8002718:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d023      	beq.n	800276c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e01e      	b.n	800276c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10f      	bne.n	800275c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0210 	bic.w	r2, r2, #16
 800274a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	2b00      	cmp	r3, #0
 8002772:	d032      	beq.n	80027da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2205      	movs	r2, #5
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3301      	adds	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d307      	bcc.n	80027b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f2      	bne.n	8002798 <HAL_DMA_IRQHandler+0x2cc>
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
 80027d6:	e000      	b.n	80027da <HAL_DMA_IRQHandler+0x30e>
        return;
 80027d8:	bf00      	nop
    }
  }
}
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	3b10      	subs	r3, #16
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <DMA_CalcBaseAndBitshift+0x64>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027fa:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <DMA_CalcBaseAndBitshift+0x68>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b03      	cmp	r3, #3
 800280c:	d909      	bls.n	8002822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	1d1a      	adds	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002820:	e007      	b.n	8002832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	aaaaaaab 	.word	0xaaaaaaab
 8002848:	08006ac4 	.word	0x08006ac4

0800284c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d856      	bhi.n	800291a <DMA_CheckFifoParam+0xce>
 800286c:	a201      	add	r2, pc, #4	@ (adr r2, 8002874 <DMA_CheckFifoParam+0x28>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	08002885 	.word	0x08002885
 8002878:	08002897 	.word	0x08002897
 800287c:	08002885 	.word	0x08002885
 8002880:	0800291b 	.word	0x0800291b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d046      	beq.n	800291e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e043      	b.n	800291e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800289e:	d140      	bne.n	8002922 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a4:	e03d      	b.n	8002922 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028ae:	d121      	bne.n	80028f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d837      	bhi.n	8002926 <DMA_CheckFifoParam+0xda>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <DMA_CheckFifoParam+0x70>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d3 	.word	0x080028d3
 80028c4:	080028cd 	.word	0x080028cd
 80028c8:	080028e5 	.word	0x080028e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e030      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d025      	beq.n	800292a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e2:	e022      	b.n	800292a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028ec:	d11f      	bne.n	800292e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028f2:	e01c      	b.n	800292e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d903      	bls.n	8002902 <DMA_CheckFifoParam+0xb6>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d003      	beq.n	8002908 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002900:	e018      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
      break;
 8002906:	e015      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00e      	beq.n	8002932 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      break;
 8002918:	e00b      	b.n	8002932 <DMA_CheckFifoParam+0xe6>
      break;
 800291a:	bf00      	nop
 800291c:	e00a      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800291e:	bf00      	nop
 8002920:	e008      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002922:	bf00      	nop
 8002924:	e006      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e004      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;   
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
    }
  } 
  
  return status; 
 8002934:	7bfb      	ldrb	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e159      	b.n	8002c14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8148 	bne.w	8002c0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a2 	beq.w	8002c0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b57      	ldr	r3, [pc, #348]	@ (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	4a56      	ldr	r2, [pc, #344]	@ (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ada:	4b54      	ldr	r3, [pc, #336]	@ (8002c2c <HAL_GPIO_Init+0x2e8>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a52      	ldr	r2, [pc, #328]	@ (8002c30 <HAL_GPIO_Init+0x2ec>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a49      	ldr	r2, [pc, #292]	@ (8002c34 <HAL_GPIO_Init+0x2f0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x202>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a48      	ldr	r2, [pc, #288]	@ (8002c38 <HAL_GPIO_Init+0x2f4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x1fe>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a47      	ldr	r2, [pc, #284]	@ (8002c3c <HAL_GPIO_Init+0x2f8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x1fa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a46      	ldr	r2, [pc, #280]	@ (8002c40 <HAL_GPIO_Init+0x2fc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x1f6>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a45      	ldr	r2, [pc, #276]	@ (8002c44 <HAL_GPIO_Init+0x300>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x1f2>
 8002b32:	2304      	movs	r3, #4
 8002b34:	e008      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b36:	2307      	movs	r3, #7
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e004      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_GPIO_Init+0x204>
 8002b46:	2300      	movs	r3, #0
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f002 0203 	and.w	r2, r2, #3
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	4093      	lsls	r3, r2
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b58:	4935      	ldr	r1, [pc, #212]	@ (8002c30 <HAL_GPIO_Init+0x2ec>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b66:	4b38      	ldr	r3, [pc, #224]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bb4:	4a24      	ldr	r2, [pc, #144]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bba:	4b23      	ldr	r3, [pc, #140]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bde:	4a1a      	ldr	r2, [pc, #104]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002be4:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c08:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <HAL_GPIO_Init+0x304>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3301      	adds	r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	f67f aea2 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3724      	adds	r7, #36	@ 0x24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40013800 	.word	0x40013800
 8002c34:	40020000 	.word	0x40020000
 8002c38:	40020400 	.word	0x40020400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020c00 	.word	0x40020c00
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c68:	e003      	b.n	8002c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	041a      	lsls	r2, r3, #16
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	619a      	str	r2, [r3, #24]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e267      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d075      	beq.n	8002d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002c9e:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002caa:	4b85      	ldr	r3, [pc, #532]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d112      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b82      	ldr	r3, [pc, #520]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05b      	beq.n	8002d88 <HAL_RCC_OscConfig+0x108>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d157      	bne.n	8002d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e242      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x74>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e01d      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x98>
 8002cfe:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6c      	ldr	r2, [pc, #432]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0xb0>
 8002d18:	4b69      	ldr	r3, [pc, #420]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a68      	ldr	r2, [pc, #416]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	4b66      	ldr	r3, [pc, #408]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a65      	ldr	r2, [pc, #404]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d013      	beq.n	8002d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe fd7c 	bl	8001834 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fd78 	bl	8001834 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e207      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	e014      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe fd68 	bl	8001834 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe fd64 	bl	8001834 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1f3      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0xe8>
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002d96:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1c7      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fd1d 	bl	8001834 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fd19 	bl	8001834 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1a8      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_RCC_OscConfig+0x244>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fcfc 	bl	8001834 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe fcf8 	bl	8001834 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e187      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fcdc 	bl	8001834 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fcd8 	bl	8001834 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e167      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x200>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_OscConfig+0x248>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fcc5 	bl	8001834 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe fcc1 	bl	8001834 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e150      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b88      	ldr	r3, [pc, #544]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b81      	ldr	r3, [pc, #516]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7d      	ldr	r3, [pc, #500]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a7c      	ldr	r2, [pc, #496]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b7a      	ldr	r3, [pc, #488]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b77      	ldr	r3, [pc, #476]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b74      	ldr	r3, [pc, #464]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fc81 	bl	8001834 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe fc7d 	bl	8001834 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e10c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6a      	ldr	r3, [pc, #424]	@ (80030f4 <HAL_RCC_OscConfig+0x474>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x2ea>
 8002f5c:	4b64      	ldr	r3, [pc, #400]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a63      	ldr	r2, [pc, #396]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x30c>
 8002f72:	4b5f      	ldr	r3, [pc, #380]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	4a5e      	ldr	r2, [pc, #376]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a5b      	ldr	r2, [pc, #364]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x324>
 8002f8c:	4b58      	ldr	r3, [pc, #352]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	4a57      	ldr	r2, [pc, #348]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f98:	4b55      	ldr	r3, [pc, #340]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a54      	ldr	r2, [pc, #336]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fc42 	bl	8001834 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fc3e 	bl	8001834 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0cb      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b49      	ldr	r3, [pc, #292]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x334>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fc2c 	bl	8001834 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fc28 	bl	8001834 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0b5      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b39      	ldr	r3, [pc, #228]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	4a38      	ldr	r2, [pc, #224]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a1 	beq.w	8003160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b34      	ldr	r3, [pc, #208]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d05c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d141      	bne.n	80030b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b31      	ldr	r3, [pc, #196]	@ (80030f8 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fbfc 	bl	8001834 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fbf8 	bl	8001834 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e087      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	491b      	ldr	r1, [pc, #108]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003088:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x478>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308e:	f7fe fbd1 	bl	8001834 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003096:	f7fe fbcd 	bl	8001834 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e05c      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x416>
 80030b4:	e054      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fbba 	bl	8001834 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fe fbb6 	bl	8001834 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e045      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x444>
 80030e2:	e03d      	b.n	8003160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e038      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40007000 	.word	0x40007000
 80030f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fc:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x4ec>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d028      	beq.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d121      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11a      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	3b01      	subs	r3, #1
 8003146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0cc      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003184:	4b68      	ldr	r3, [pc, #416]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d90c      	bls.n	80031ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b65      	ldr	r3, [pc, #404]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b63      	ldr	r3, [pc, #396]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0b8      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4b59      	ldr	r3, [pc, #356]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a58      	ldr	r2, [pc, #352]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4b53      	ldr	r3, [pc, #332]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a52      	ldr	r2, [pc, #328]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4b50      	ldr	r3, [pc, #320]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	494d      	ldr	r1, [pc, #308]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d044      	beq.n	8003290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d119      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d003      	beq.n	800322e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800322e:	4b3f      	ldr	r3, [pc, #252]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e06f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323e:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e067      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b37      	ldr	r3, [pc, #220]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4934      	ldr	r1, [pc, #208]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003260:	f7fe fae8 	bl	8001834 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe fae4 	bl	8001834 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e04f      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b2b      	ldr	r3, [pc, #172]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003290:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d20c      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	@ (8003328 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e032      	b.n	800331e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b19      	ldr	r3, [pc, #100]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4916      	ldr	r1, [pc, #88]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e2:	4b12      	ldr	r3, [pc, #72]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	490e      	ldr	r1, [pc, #56]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f6:	f000 f821 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	490a      	ldr	r1, [pc, #40]	@ (8003330 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	5ccb      	ldrb	r3, [r1, r3]
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	4a09      	ldr	r2, [pc, #36]	@ (8003334 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fa48 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00
 800332c:	40023800 	.word	0x40023800
 8003330:	08006aac 	.word	0x08006aac
 8003334:	20000000 	.word	0x20000000
 8003338:	20000004 	.word	0x20000004

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	b094      	sub	sp, #80	@ 0x50
 8003342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003354:	4b79      	ldr	r3, [pc, #484]	@ (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d00d      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x40>
 8003360:	2b08      	cmp	r3, #8
 8003362:	f200 80e1 	bhi.w	8003528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x34>
 800336a:	2b04      	cmp	r3, #4
 800336c:	d003      	beq.n	8003376 <HAL_RCC_GetSysClockFreq+0x3a>
 800336e:	e0db      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b73      	ldr	r3, [pc, #460]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x204>)
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003374:	e0db      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003376:	4b73      	ldr	r3, [pc, #460]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x208>)
 8003378:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800337a:	e0d8      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337c:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003384:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003386:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d063      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003392:	4b6a      	ldr	r3, [pc, #424]	@ (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	2200      	movs	r2, #0
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800339c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800339e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a6:	2300      	movs	r3, #0
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	0159      	lsls	r1, r3, #5
 80033bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033c0:	0150      	lsls	r0, r2, #5
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4621      	mov	r1, r4
 80033c8:	1a51      	subs	r1, r2, r1
 80033ca:	6139      	str	r1, [r7, #16]
 80033cc:	4629      	mov	r1, r5
 80033ce:	eb63 0301 	sbc.w	r3, r3, r1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033e0:	4659      	mov	r1, fp
 80033e2:	018b      	lsls	r3, r1, #6
 80033e4:	4651      	mov	r1, sl
 80033e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ea:	4651      	mov	r1, sl
 80033ec:	018a      	lsls	r2, r1, #6
 80033ee:	4651      	mov	r1, sl
 80033f0:	ebb2 0801 	subs.w	r8, r2, r1
 80033f4:	4659      	mov	r1, fp
 80033f6:	eb63 0901 	sbc.w	r9, r3, r1
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800340a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340e:	4690      	mov	r8, r2
 8003410:	4699      	mov	r9, r3
 8003412:	4623      	mov	r3, r4
 8003414:	eb18 0303 	adds.w	r3, r8, r3
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	462b      	mov	r3, r5
 800341c:	eb49 0303 	adc.w	r3, r9, r3
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800342e:	4629      	mov	r1, r5
 8003430:	024b      	lsls	r3, r1, #9
 8003432:	4621      	mov	r1, r4
 8003434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003438:	4621      	mov	r1, r4
 800343a:	024a      	lsls	r2, r1, #9
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003442:	2200      	movs	r2, #0
 8003444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003446:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800344c:	f7fd fc04 	bl	8000c58 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003458:	e058      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b38      	ldr	r3, [pc, #224]	@ (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	2200      	movs	r2, #0
 8003462:	4618      	mov	r0, r3
 8003464:	4611      	mov	r1, r2
 8003466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003474:	4642      	mov	r2, r8
 8003476:	464b      	mov	r3, r9
 8003478:	f04f 0000 	mov.w	r0, #0
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	0159      	lsls	r1, r3, #5
 8003482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003486:	0150      	lsls	r0, r2, #5
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4641      	mov	r1, r8
 800348e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003492:	4649      	mov	r1, r9
 8003494:	eb63 0b01 	sbc.w	fp, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034ac:	ebb2 040a 	subs.w	r4, r2, sl
 80034b0:	eb63 050b 	sbc.w	r5, r3, fp
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	00eb      	lsls	r3, r5, #3
 80034be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c2:	00e2      	lsls	r2, r4, #3
 80034c4:	4614      	mov	r4, r2
 80034c6:	461d      	mov	r5, r3
 80034c8:	4643      	mov	r3, r8
 80034ca:	18e3      	adds	r3, r4, r3
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	464b      	mov	r3, r9
 80034d0:	eb45 0303 	adc.w	r3, r5, r3
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e2:	4629      	mov	r1, r5
 80034e4:	028b      	lsls	r3, r1, #10
 80034e6:	4621      	mov	r1, r4
 80034e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ec:	4621      	mov	r1, r4
 80034ee:	028a      	lsls	r2, r1, #10
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034f6:	2200      	movs	r2, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	61fa      	str	r2, [r7, #28]
 80034fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003500:	f7fd fbaa 	bl	8000c58 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4613      	mov	r3, r2
 800350a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_GetSysClockFreq+0x200>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800351c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800351e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003526:	e002      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x204>)
 800352a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800352c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800352e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003530:	4618      	mov	r0, r3
 8003532:	3750      	adds	r7, #80	@ 0x50
 8003534:	46bd      	mov	sp, r7
 8003536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	00f42400 	.word	0x00f42400
 8003544:	007a1200 	.word	0x007a1200

08003548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800354c:	4b03      	ldr	r3, [pc, #12]	@ (800355c <HAL_RCC_GetHCLKFreq+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003564:	f7ff fff0 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	0a9b      	lsrs	r3, r3, #10
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40023800 	.word	0x40023800
 8003584:	08006abc 	.word	0x08006abc

08003588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800358c:	f7ff ffdc 	bl	8003548 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0b5b      	lsrs	r3, r3, #13
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	@ (80035ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08006abc 	.word	0x08006abc

080035b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e042      	b.n	8003648 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd ff06 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	@ 0x24
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f973 	bl	80038e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af02      	add	r7, sp, #8
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b20      	cmp	r3, #32
 800366e:	d175      	bne.n	800375c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_UART_Transmit+0x2c>
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e06e      	b.n	800375e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2221      	movs	r2, #33	@ 0x21
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368e:	f7fe f8d1 	bl	8001834 <HAL_GetTick>
 8003692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	88fa      	ldrh	r2, [r7, #6]
 8003698:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a8:	d108      	bne.n	80036bc <HAL_UART_Transmit+0x6c>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e003      	b.n	80036c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036c4:	e02e      	b.n	8003724 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	@ 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f848 	bl	8003766 <UART_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e03a      	b.n	800375e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10b      	bne.n	8003706 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	3302      	adds	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	e007      	b.n	8003716 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	781a      	ldrb	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1cb      	bne.n	80036c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	2140      	movs	r1, #64	@ 0x40
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f814 	bl	8003766 <UART_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e006      	b.n	800375e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	603b      	str	r3, [r7, #0]
 8003772:	4613      	mov	r3, r2
 8003774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003776:	e03b      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d037      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fe f858 	bl	8001834 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <UART_WaitOnFlagUntilTimeout+0x30>
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03a      	b.n	8003810 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d023      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b80      	cmp	r3, #128	@ 0x80
 80037ac:	d020      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	d01d      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d116      	bne.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f81d 	bl	8003818 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2208      	movs	r2, #8
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e00f      	b.n	8003810 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	429a      	cmp	r2, r3
 800380c:	d0b4      	beq.n	8003778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003818:	b480      	push	{r7}
 800381a:	b095      	sub	sp, #84	@ 0x54
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003840:	643a      	str	r2, [r7, #64]	@ 0x40
 8003842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800384e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e5      	bne.n	8003820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3314      	adds	r3, #20
 800385a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	61fb      	str	r3, [r7, #28]
   return(result);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3314      	adds	r3, #20
 8003872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	2b01      	cmp	r3, #1
 800388e:	d119      	bne.n	80038c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0310 	bic.w	r3, r3, #16
 80038a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038b0:	61ba      	str	r2, [r7, #24]
 80038b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6979      	ldr	r1, [r7, #20]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	613b      	str	r3, [r7, #16]
   return(result);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e5      	bne.n	8003890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038d2:	bf00      	nop
 80038d4:	3754      	adds	r7, #84	@ 0x54
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e4:	b0c0      	sub	sp, #256	@ 0x100
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	ea40 0301 	orr.w	r3, r0, r1
 8003908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800390a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	431a      	orrs	r2, r3
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	431a      	orrs	r2, r3
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003938:	f021 010c 	bic.w	r1, r1, #12
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003946:	430b      	orrs	r3, r1
 8003948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	6999      	ldr	r1, [r3, #24]
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	ea40 0301 	orr.w	r3, r0, r1
 8003966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8f      	ldr	r3, [pc, #572]	@ (8003bac <UART_SetConfig+0x2cc>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d005      	beq.n	8003980 <UART_SetConfig+0xa0>
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b8d      	ldr	r3, [pc, #564]	@ (8003bb0 <UART_SetConfig+0x2d0>)
 800397c:	429a      	cmp	r2, r3
 800397e:	d104      	bne.n	800398a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7ff fe02 	bl	8003588 <HAL_RCC_GetPCLK2Freq>
 8003984:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003988:	e003      	b.n	8003992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800398a:	f7ff fde9 	bl	8003560 <HAL_RCC_GetPCLK1Freq>
 800398e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800399c:	f040 810c 	bne.w	8003bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039b2:	4622      	mov	r2, r4
 80039b4:	462b      	mov	r3, r5
 80039b6:	1891      	adds	r1, r2, r2
 80039b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ba:	415b      	adcs	r3, r3
 80039bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039c2:	4621      	mov	r1, r4
 80039c4:	eb12 0801 	adds.w	r8, r2, r1
 80039c8:	4629      	mov	r1, r5
 80039ca:	eb43 0901 	adc.w	r9, r3, r1
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e2:	4690      	mov	r8, r2
 80039e4:	4699      	mov	r9, r3
 80039e6:	4623      	mov	r3, r4
 80039e8:	eb18 0303 	adds.w	r3, r8, r3
 80039ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039f0:	462b      	mov	r3, r5
 80039f2:	eb49 0303 	adc.w	r3, r9, r3
 80039f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a0e:	460b      	mov	r3, r1
 8003a10:	18db      	adds	r3, r3, r3
 8003a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a14:	4613      	mov	r3, r2
 8003a16:	eb42 0303 	adc.w	r3, r2, r3
 8003a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a24:	f7fd f918 	bl	8000c58 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4b61      	ldr	r3, [pc, #388]	@ (8003bb4 <UART_SetConfig+0x2d4>)
 8003a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	011c      	lsls	r4, r3, #4
 8003a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	1891      	adds	r1, r2, r2
 8003a4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a50:	415b      	adcs	r3, r3
 8003a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a58:	4641      	mov	r1, r8
 8003a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb43 0b01 	adc.w	fp, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a78:	4692      	mov	sl, r2
 8003a7a:	469b      	mov	fp, r3
 8003a7c:	4643      	mov	r3, r8
 8003a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a86:	464b      	mov	r3, r9
 8003a88:	eb4b 0303 	adc.w	r3, fp, r3
 8003a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	18db      	adds	r3, r3, r3
 8003aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aaa:	4613      	mov	r3, r2
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003aba:	f7fd f8cd 	bl	8000c58 <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb4 <UART_SetConfig+0x2d4>)
 8003ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2264      	movs	r2, #100	@ 0x64
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	1acb      	subs	r3, r1, r3
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ada:	4b36      	ldr	r3, [pc, #216]	@ (8003bb4 <UART_SetConfig+0x2d4>)
 8003adc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ae8:	441c      	add	r4, r3
 8003aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003af4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b04:	415b      	adcs	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b60:	460b      	mov	r3, r1
 8003b62:	18db      	adds	r3, r3, r3
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b66:	4613      	mov	r3, r2
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b76:	f7fd f86f 	bl	8000c58 <__aeabi_uldivmod>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <UART_SetConfig+0x2d4>)
 8003b80:	fba3 1302 	umull	r1, r3, r3, r2
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	2164      	movs	r1, #100	@ 0x64
 8003b88:	fb01 f303 	mul.w	r3, r1, r3
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	3332      	adds	r3, #50	@ 0x32
 8003b92:	4a08      	ldr	r2, [pc, #32]	@ (8003bb4 <UART_SetConfig+0x2d4>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	f003 0207 	and.w	r2, r3, #7
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4422      	add	r2, r4
 8003ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba8:	e106      	b.n	8003db8 <UART_SetConfig+0x4d8>
 8003baa:	bf00      	nop
 8003bac:	40011000 	.word	0x40011000
 8003bb0:	40011400 	.word	0x40011400
 8003bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bca:	4642      	mov	r2, r8
 8003bcc:	464b      	mov	r3, r9
 8003bce:	1891      	adds	r1, r2, r2
 8003bd0:	6239      	str	r1, [r7, #32]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bda:	4641      	mov	r1, r8
 8003bdc:	1854      	adds	r4, r2, r1
 8003bde:	4649      	mov	r1, r9
 8003be0:	eb43 0501 	adc.w	r5, r3, r1
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	00eb      	lsls	r3, r5, #3
 8003bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf2:	00e2      	lsls	r2, r4, #3
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	18e3      	adds	r3, r4, r3
 8003bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c00:	464b      	mov	r3, r9
 8003c02:	eb45 0303 	adc.w	r3, r5, r3
 8003c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c26:	4629      	mov	r1, r5
 8003c28:	008b      	lsls	r3, r1, #2
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c30:	4621      	mov	r1, r4
 8003c32:	008a      	lsls	r2, r1, #2
 8003c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c38:	f7fd f80e 	bl	8000c58 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4b60      	ldr	r3, [pc, #384]	@ (8003dc4 <UART_SetConfig+0x4e4>)
 8003c42:	fba3 2302 	umull	r2, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	011c      	lsls	r4, r3, #4
 8003c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	61b9      	str	r1, [r7, #24]
 8003c64:	415b      	adcs	r3, r3
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	1851      	adds	r1, r2, r1
 8003c70:	6139      	str	r1, [r7, #16]
 8003c72:	4649      	mov	r1, r9
 8003c74:	414b      	adcs	r3, r1
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c84:	4659      	mov	r1, fp
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4651      	mov	r1, sl
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	008b      	lsls	r3, r1, #2
 8003cc8:	4641      	mov	r1, r8
 8003cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cce:	4641      	mov	r1, r8
 8003cd0:	008a      	lsls	r2, r1, #2
 8003cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cd6:	f7fc ffbf 	bl	8000c58 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4b38      	ldr	r3, [pc, #224]	@ (8003dc4 <UART_SetConfig+0x4e4>)
 8003ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2264      	movs	r2, #100	@ 0x64
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	@ 0x32
 8003cf4:	4a33      	ldr	r2, [pc, #204]	@ (8003dc4 <UART_SetConfig+0x4e4>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d00:	441c      	add	r4, r3
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d20:	4641      	mov	r1, r8
 8003d22:	1851      	adds	r1, r2, r1
 8003d24:	6039      	str	r1, [r7, #0]
 8003d26:	4649      	mov	r1, r9
 8003d28:	414b      	adcs	r3, r1
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d38:	4659      	mov	r1, fp
 8003d3a:	00cb      	lsls	r3, r1, #3
 8003d3c:	4651      	mov	r1, sl
 8003d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d42:	4651      	mov	r1, sl
 8003d44:	00ca      	lsls	r2, r1, #3
 8003d46:	4610      	mov	r0, r2
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d52:	464b      	mov	r3, r9
 8003d54:	460a      	mov	r2, r1
 8003d56:	eb42 0303 	adc.w	r3, r2, r3
 8003d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d74:	4649      	mov	r1, r9
 8003d76:	008b      	lsls	r3, r1, #2
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d7e:	4641      	mov	r1, r8
 8003d80:	008a      	lsls	r2, r1, #2
 8003d82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d86:	f7fc ff67 	bl	8000c58 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <UART_SetConfig+0x4e4>)
 8003d90:	fba3 1302 	umull	r1, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	2164      	movs	r1, #100	@ 0x64
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	3332      	adds	r3, #50	@ 0x32
 8003da2:	4a08      	ldr	r2, [pc, #32]	@ (8003dc4 <UART_SetConfig+0x4e4>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4422      	add	r2, r4
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dc4:	51eb851f 	.word	0x51eb851f

08003dc8 <__cvt>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	ec57 6b10 	vmov	r6, r7, d0
 8003dd0:	2f00      	cmp	r7, #0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	463b      	mov	r3, r7
 8003dd8:	bfbb      	ittet	lt
 8003dda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003dde:	461f      	movlt	r7, r3
 8003de0:	2300      	movge	r3, #0
 8003de2:	232d      	movlt	r3, #45	@ 0x2d
 8003de4:	700b      	strb	r3, [r1, #0]
 8003de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003de8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003dec:	4691      	mov	r9, r2
 8003dee:	f023 0820 	bic.w	r8, r3, #32
 8003df2:	bfbc      	itt	lt
 8003df4:	4632      	movlt	r2, r6
 8003df6:	4616      	movlt	r6, r2
 8003df8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dfc:	d005      	beq.n	8003e0a <__cvt+0x42>
 8003dfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e02:	d100      	bne.n	8003e06 <__cvt+0x3e>
 8003e04:	3401      	adds	r4, #1
 8003e06:	2102      	movs	r1, #2
 8003e08:	e000      	b.n	8003e0c <__cvt+0x44>
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	ab02      	add	r3, sp, #8
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	ec47 6b10 	vmov	d0, r6, r7
 8003e18:	4653      	mov	r3, sl
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	f000 fe70 	bl	8004b00 <_dtoa_r>
 8003e20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e24:	4605      	mov	r5, r0
 8003e26:	d119      	bne.n	8003e5c <__cvt+0x94>
 8003e28:	f019 0f01 	tst.w	r9, #1
 8003e2c:	d00e      	beq.n	8003e4c <__cvt+0x84>
 8003e2e:	eb00 0904 	add.w	r9, r0, r4
 8003e32:	2200      	movs	r2, #0
 8003e34:	2300      	movs	r3, #0
 8003e36:	4630      	mov	r0, r6
 8003e38:	4639      	mov	r1, r7
 8003e3a:	f7fc fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e3e:	b108      	cbz	r0, 8003e44 <__cvt+0x7c>
 8003e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e44:	2230      	movs	r2, #48	@ 0x30
 8003e46:	9b03      	ldr	r3, [sp, #12]
 8003e48:	454b      	cmp	r3, r9
 8003e4a:	d31e      	bcc.n	8003e8a <__cvt+0xc2>
 8003e4c:	9b03      	ldr	r3, [sp, #12]
 8003e4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e50:	1b5b      	subs	r3, r3, r5
 8003e52:	4628      	mov	r0, r5
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	b004      	add	sp, #16
 8003e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e60:	eb00 0904 	add.w	r9, r0, r4
 8003e64:	d1e5      	bne.n	8003e32 <__cvt+0x6a>
 8003e66:	7803      	ldrb	r3, [r0, #0]
 8003e68:	2b30      	cmp	r3, #48	@ 0x30
 8003e6a:	d10a      	bne.n	8003e82 <__cvt+0xba>
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4630      	mov	r0, r6
 8003e72:	4639      	mov	r1, r7
 8003e74:	f7fc fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e78:	b918      	cbnz	r0, 8003e82 <__cvt+0xba>
 8003e7a:	f1c4 0401 	rsb	r4, r4, #1
 8003e7e:	f8ca 4000 	str.w	r4, [sl]
 8003e82:	f8da 3000 	ldr.w	r3, [sl]
 8003e86:	4499      	add	r9, r3
 8003e88:	e7d3      	b.n	8003e32 <__cvt+0x6a>
 8003e8a:	1c59      	adds	r1, r3, #1
 8003e8c:	9103      	str	r1, [sp, #12]
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e7d9      	b.n	8003e46 <__cvt+0x7e>

08003e92 <__exponent>:
 8003e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e94:	2900      	cmp	r1, #0
 8003e96:	bfba      	itte	lt
 8003e98:	4249      	neglt	r1, r1
 8003e9a:	232d      	movlt	r3, #45	@ 0x2d
 8003e9c:	232b      	movge	r3, #43	@ 0x2b
 8003e9e:	2909      	cmp	r1, #9
 8003ea0:	7002      	strb	r2, [r0, #0]
 8003ea2:	7043      	strb	r3, [r0, #1]
 8003ea4:	dd29      	ble.n	8003efa <__exponent+0x68>
 8003ea6:	f10d 0307 	add.w	r3, sp, #7
 8003eaa:	461d      	mov	r5, r3
 8003eac:	270a      	movs	r7, #10
 8003eae:	461a      	mov	r2, r3
 8003eb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8003eb4:	fb07 1416 	mls	r4, r7, r6, r1
 8003eb8:	3430      	adds	r4, #48	@ 0x30
 8003eba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	2c63      	cmp	r4, #99	@ 0x63
 8003ec2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	dcf1      	bgt.n	8003eae <__exponent+0x1c>
 8003eca:	3130      	adds	r1, #48	@ 0x30
 8003ecc:	1e94      	subs	r4, r2, #2
 8003ece:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ed2:	1c41      	adds	r1, r0, #1
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	42ab      	cmp	r3, r5
 8003ed8:	d30a      	bcc.n	8003ef0 <__exponent+0x5e>
 8003eda:	f10d 0309 	add.w	r3, sp, #9
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	42ac      	cmp	r4, r5
 8003ee2:	bf88      	it	hi
 8003ee4:	2300      	movhi	r3, #0
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	4403      	add	r3, r0
 8003eea:	1a18      	subs	r0, r3, r0
 8003eec:	b003      	add	sp, #12
 8003eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ef4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ef8:	e7ed      	b.n	8003ed6 <__exponent+0x44>
 8003efa:	2330      	movs	r3, #48	@ 0x30
 8003efc:	3130      	adds	r1, #48	@ 0x30
 8003efe:	7083      	strb	r3, [r0, #2]
 8003f00:	70c1      	strb	r1, [r0, #3]
 8003f02:	1d03      	adds	r3, r0, #4
 8003f04:	e7f1      	b.n	8003eea <__exponent+0x58>
	...

08003f08 <_printf_float>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	b08d      	sub	sp, #52	@ 0x34
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003f14:	4616      	mov	r6, r2
 8003f16:	461f      	mov	r7, r3
 8003f18:	4605      	mov	r5, r0
 8003f1a:	f000 fcef 	bl	80048fc <_localeconv_r>
 8003f1e:	6803      	ldr	r3, [r0, #0]
 8003f20:	9304      	str	r3, [sp, #16]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc f9ac 	bl	8000280 <strlen>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f30:	9005      	str	r0, [sp, #20]
 8003f32:	3307      	adds	r3, #7
 8003f34:	f023 0307 	bic.w	r3, r3, #7
 8003f38:	f103 0208 	add.w	r2, r3, #8
 8003f3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f40:	f8d4 b000 	ldr.w	fp, [r4]
 8003f44:	f8c8 2000 	str.w	r2, [r8]
 8003f48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f50:	9307      	str	r3, [sp, #28]
 8003f52:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80041d0 <_printf_float+0x2c8>)
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	f7fc fdea 	bl	8000b3c <__aeabi_dcmpun>
 8003f68:	bb70      	cbnz	r0, 8003fc8 <_printf_float+0xc0>
 8003f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f6e:	4b98      	ldr	r3, [pc, #608]	@ (80041d0 <_printf_float+0x2c8>)
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	f7fc fdc4 	bl	8000b00 <__aeabi_dcmple>
 8003f78:	bb30      	cbnz	r0, 8003fc8 <_printf_float+0xc0>
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	4640      	mov	r0, r8
 8003f80:	4649      	mov	r1, r9
 8003f82:	f7fc fdb3 	bl	8000aec <__aeabi_dcmplt>
 8003f86:	b110      	cbz	r0, 8003f8e <_printf_float+0x86>
 8003f88:	232d      	movs	r3, #45	@ 0x2d
 8003f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f8e:	4a91      	ldr	r2, [pc, #580]	@ (80041d4 <_printf_float+0x2cc>)
 8003f90:	4b91      	ldr	r3, [pc, #580]	@ (80041d8 <_printf_float+0x2d0>)
 8003f92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f96:	bf94      	ite	ls
 8003f98:	4690      	movls	r8, r2
 8003f9a:	4698      	movhi	r8, r3
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	6123      	str	r3, [r4, #16]
 8003fa0:	f02b 0304 	bic.w	r3, fp, #4
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	f04f 0900 	mov.w	r9, #0
 8003faa:	9700      	str	r7, [sp, #0]
 8003fac:	4633      	mov	r3, r6
 8003fae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 f9d2 	bl	800435c <_printf_common>
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f040 808d 	bne.w	80040d8 <_printf_float+0x1d0>
 8003fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc2:	b00d      	add	sp, #52	@ 0x34
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	4640      	mov	r0, r8
 8003fce:	4649      	mov	r1, r9
 8003fd0:	f7fc fdb4 	bl	8000b3c <__aeabi_dcmpun>
 8003fd4:	b140      	cbz	r0, 8003fe8 <_printf_float+0xe0>
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bfbc      	itt	lt
 8003fdc:	232d      	movlt	r3, #45	@ 0x2d
 8003fde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <_printf_float+0x2d4>)
 8003fe4:	4b7e      	ldr	r3, [pc, #504]	@ (80041e0 <_printf_float+0x2d8>)
 8003fe6:	e7d4      	b.n	8003f92 <_printf_float+0x8a>
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003fee:	9206      	str	r2, [sp, #24]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	d13b      	bne.n	800406c <_printf_float+0x164>
 8003ff4:	2306      	movs	r3, #6
 8003ff6:	6063      	str	r3, [r4, #4]
 8003ff8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	6022      	str	r2, [r4, #0]
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	ab0a      	add	r3, sp, #40	@ 0x28
 8004004:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004008:	ab09      	add	r3, sp, #36	@ 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6861      	ldr	r1, [r4, #4]
 800400e:	ec49 8b10 	vmov	d0, r8, r9
 8004012:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004016:	4628      	mov	r0, r5
 8004018:	f7ff fed6 	bl	8003dc8 <__cvt>
 800401c:	9b06      	ldr	r3, [sp, #24]
 800401e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004020:	2b47      	cmp	r3, #71	@ 0x47
 8004022:	4680      	mov	r8, r0
 8004024:	d129      	bne.n	800407a <_printf_float+0x172>
 8004026:	1cc8      	adds	r0, r1, #3
 8004028:	db02      	blt.n	8004030 <_printf_float+0x128>
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	4299      	cmp	r1, r3
 800402e:	dd41      	ble.n	80040b4 <_printf_float+0x1ac>
 8004030:	f1aa 0a02 	sub.w	sl, sl, #2
 8004034:	fa5f fa8a 	uxtb.w	sl, sl
 8004038:	3901      	subs	r1, #1
 800403a:	4652      	mov	r2, sl
 800403c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004040:	9109      	str	r1, [sp, #36]	@ 0x24
 8004042:	f7ff ff26 	bl	8003e92 <__exponent>
 8004046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004048:	1813      	adds	r3, r2, r0
 800404a:	2a01      	cmp	r2, #1
 800404c:	4681      	mov	r9, r0
 800404e:	6123      	str	r3, [r4, #16]
 8004050:	dc02      	bgt.n	8004058 <_printf_float+0x150>
 8004052:	6822      	ldr	r2, [r4, #0]
 8004054:	07d2      	lsls	r2, r2, #31
 8004056:	d501      	bpl.n	800405c <_printf_float+0x154>
 8004058:	3301      	adds	r3, #1
 800405a:	6123      	str	r3, [r4, #16]
 800405c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0a2      	beq.n	8003faa <_printf_float+0xa2>
 8004064:	232d      	movs	r3, #45	@ 0x2d
 8004066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800406a:	e79e      	b.n	8003faa <_printf_float+0xa2>
 800406c:	9a06      	ldr	r2, [sp, #24]
 800406e:	2a47      	cmp	r2, #71	@ 0x47
 8004070:	d1c2      	bne.n	8003ff8 <_printf_float+0xf0>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1c0      	bne.n	8003ff8 <_printf_float+0xf0>
 8004076:	2301      	movs	r3, #1
 8004078:	e7bd      	b.n	8003ff6 <_printf_float+0xee>
 800407a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800407e:	d9db      	bls.n	8004038 <_printf_float+0x130>
 8004080:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004084:	d118      	bne.n	80040b8 <_printf_float+0x1b0>
 8004086:	2900      	cmp	r1, #0
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	dd0b      	ble.n	80040a4 <_printf_float+0x19c>
 800408c:	6121      	str	r1, [r4, #16]
 800408e:	b913      	cbnz	r3, 8004096 <_printf_float+0x18e>
 8004090:	6822      	ldr	r2, [r4, #0]
 8004092:	07d0      	lsls	r0, r2, #31
 8004094:	d502      	bpl.n	800409c <_printf_float+0x194>
 8004096:	3301      	adds	r3, #1
 8004098:	440b      	add	r3, r1
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800409e:	f04f 0900 	mov.w	r9, #0
 80040a2:	e7db      	b.n	800405c <_printf_float+0x154>
 80040a4:	b913      	cbnz	r3, 80040ac <_printf_float+0x1a4>
 80040a6:	6822      	ldr	r2, [r4, #0]
 80040a8:	07d2      	lsls	r2, r2, #31
 80040aa:	d501      	bpl.n	80040b0 <_printf_float+0x1a8>
 80040ac:	3302      	adds	r3, #2
 80040ae:	e7f4      	b.n	800409a <_printf_float+0x192>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e7f2      	b.n	800409a <_printf_float+0x192>
 80040b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040ba:	4299      	cmp	r1, r3
 80040bc:	db05      	blt.n	80040ca <_printf_float+0x1c2>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	6121      	str	r1, [r4, #16]
 80040c2:	07d8      	lsls	r0, r3, #31
 80040c4:	d5ea      	bpl.n	800409c <_printf_float+0x194>
 80040c6:	1c4b      	adds	r3, r1, #1
 80040c8:	e7e7      	b.n	800409a <_printf_float+0x192>
 80040ca:	2900      	cmp	r1, #0
 80040cc:	bfd4      	ite	le
 80040ce:	f1c1 0202 	rsble	r2, r1, #2
 80040d2:	2201      	movgt	r2, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	e7e0      	b.n	800409a <_printf_float+0x192>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	055a      	lsls	r2, r3, #21
 80040dc:	d407      	bmi.n	80040ee <_printf_float+0x1e6>
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	4642      	mov	r2, r8
 80040e2:	4631      	mov	r1, r6
 80040e4:	4628      	mov	r0, r5
 80040e6:	47b8      	blx	r7
 80040e8:	3001      	adds	r0, #1
 80040ea:	d12b      	bne.n	8004144 <_printf_float+0x23c>
 80040ec:	e767      	b.n	8003fbe <_printf_float+0xb6>
 80040ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040f2:	f240 80dd 	bls.w	80042b0 <_printf_float+0x3a8>
 80040f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040fa:	2200      	movs	r2, #0
 80040fc:	2300      	movs	r3, #0
 80040fe:	f7fc fceb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004102:	2800      	cmp	r0, #0
 8004104:	d033      	beq.n	800416e <_printf_float+0x266>
 8004106:	4a37      	ldr	r2, [pc, #220]	@ (80041e4 <_printf_float+0x2dc>)
 8004108:	2301      	movs	r3, #1
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f af54 	beq.w	8003fbe <_printf_float+0xb6>
 8004116:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800411a:	4543      	cmp	r3, r8
 800411c:	db02      	blt.n	8004124 <_printf_float+0x21c>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	07d8      	lsls	r0, r3, #31
 8004122:	d50f      	bpl.n	8004144 <_printf_float+0x23c>
 8004124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004128:	4631      	mov	r1, r6
 800412a:	4628      	mov	r0, r5
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	f43f af45 	beq.w	8003fbe <_printf_float+0xb6>
 8004134:	f04f 0900 	mov.w	r9, #0
 8004138:	f108 38ff 	add.w	r8, r8, #4294967295
 800413c:	f104 0a1a 	add.w	sl, r4, #26
 8004140:	45c8      	cmp	r8, r9
 8004142:	dc09      	bgt.n	8004158 <_printf_float+0x250>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	079b      	lsls	r3, r3, #30
 8004148:	f100 8103 	bmi.w	8004352 <_printf_float+0x44a>
 800414c:	68e0      	ldr	r0, [r4, #12]
 800414e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004150:	4298      	cmp	r0, r3
 8004152:	bfb8      	it	lt
 8004154:	4618      	movlt	r0, r3
 8004156:	e734      	b.n	8003fc2 <_printf_float+0xba>
 8004158:	2301      	movs	r3, #1
 800415a:	4652      	mov	r2, sl
 800415c:	4631      	mov	r1, r6
 800415e:	4628      	mov	r0, r5
 8004160:	47b8      	blx	r7
 8004162:	3001      	adds	r0, #1
 8004164:	f43f af2b 	beq.w	8003fbe <_printf_float+0xb6>
 8004168:	f109 0901 	add.w	r9, r9, #1
 800416c:	e7e8      	b.n	8004140 <_printf_float+0x238>
 800416e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	dc39      	bgt.n	80041e8 <_printf_float+0x2e0>
 8004174:	4a1b      	ldr	r2, [pc, #108]	@ (80041e4 <_printf_float+0x2dc>)
 8004176:	2301      	movs	r3, #1
 8004178:	4631      	mov	r1, r6
 800417a:	4628      	mov	r0, r5
 800417c:	47b8      	blx	r7
 800417e:	3001      	adds	r0, #1
 8004180:	f43f af1d 	beq.w	8003fbe <_printf_float+0xb6>
 8004184:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004188:	ea59 0303 	orrs.w	r3, r9, r3
 800418c:	d102      	bne.n	8004194 <_printf_float+0x28c>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	07d9      	lsls	r1, r3, #31
 8004192:	d5d7      	bpl.n	8004144 <_printf_float+0x23c>
 8004194:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004198:	4631      	mov	r1, r6
 800419a:	4628      	mov	r0, r5
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	f43f af0d 	beq.w	8003fbe <_printf_float+0xb6>
 80041a4:	f04f 0a00 	mov.w	sl, #0
 80041a8:	f104 0b1a 	add.w	fp, r4, #26
 80041ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ae:	425b      	negs	r3, r3
 80041b0:	4553      	cmp	r3, sl
 80041b2:	dc01      	bgt.n	80041b8 <_printf_float+0x2b0>
 80041b4:	464b      	mov	r3, r9
 80041b6:	e793      	b.n	80040e0 <_printf_float+0x1d8>
 80041b8:	2301      	movs	r3, #1
 80041ba:	465a      	mov	r2, fp
 80041bc:	4631      	mov	r1, r6
 80041be:	4628      	mov	r0, r5
 80041c0:	47b8      	blx	r7
 80041c2:	3001      	adds	r0, #1
 80041c4:	f43f aefb 	beq.w	8003fbe <_printf_float+0xb6>
 80041c8:	f10a 0a01 	add.w	sl, sl, #1
 80041cc:	e7ee      	b.n	80041ac <_printf_float+0x2a4>
 80041ce:	bf00      	nop
 80041d0:	7fefffff 	.word	0x7fefffff
 80041d4:	08006acc 	.word	0x08006acc
 80041d8:	08006ad0 	.word	0x08006ad0
 80041dc:	08006ad4 	.word	0x08006ad4
 80041e0:	08006ad8 	.word	0x08006ad8
 80041e4:	08006adc 	.word	0x08006adc
 80041e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041ee:	4553      	cmp	r3, sl
 80041f0:	bfa8      	it	ge
 80041f2:	4653      	movge	r3, sl
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	4699      	mov	r9, r3
 80041f8:	dc36      	bgt.n	8004268 <_printf_float+0x360>
 80041fa:	f04f 0b00 	mov.w	fp, #0
 80041fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004202:	f104 021a 	add.w	r2, r4, #26
 8004206:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004208:	9306      	str	r3, [sp, #24]
 800420a:	eba3 0309 	sub.w	r3, r3, r9
 800420e:	455b      	cmp	r3, fp
 8004210:	dc31      	bgt.n	8004276 <_printf_float+0x36e>
 8004212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004214:	459a      	cmp	sl, r3
 8004216:	dc3a      	bgt.n	800428e <_printf_float+0x386>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	07da      	lsls	r2, r3, #31
 800421c:	d437      	bmi.n	800428e <_printf_float+0x386>
 800421e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004220:	ebaa 0903 	sub.w	r9, sl, r3
 8004224:	9b06      	ldr	r3, [sp, #24]
 8004226:	ebaa 0303 	sub.w	r3, sl, r3
 800422a:	4599      	cmp	r9, r3
 800422c:	bfa8      	it	ge
 800422e:	4699      	movge	r9, r3
 8004230:	f1b9 0f00 	cmp.w	r9, #0
 8004234:	dc33      	bgt.n	800429e <_printf_float+0x396>
 8004236:	f04f 0800 	mov.w	r8, #0
 800423a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800423e:	f104 0b1a 	add.w	fp, r4, #26
 8004242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004244:	ebaa 0303 	sub.w	r3, sl, r3
 8004248:	eba3 0309 	sub.w	r3, r3, r9
 800424c:	4543      	cmp	r3, r8
 800424e:	f77f af79 	ble.w	8004144 <_printf_float+0x23c>
 8004252:	2301      	movs	r3, #1
 8004254:	465a      	mov	r2, fp
 8004256:	4631      	mov	r1, r6
 8004258:	4628      	mov	r0, r5
 800425a:	47b8      	blx	r7
 800425c:	3001      	adds	r0, #1
 800425e:	f43f aeae 	beq.w	8003fbe <_printf_float+0xb6>
 8004262:	f108 0801 	add.w	r8, r8, #1
 8004266:	e7ec      	b.n	8004242 <_printf_float+0x33a>
 8004268:	4642      	mov	r2, r8
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	d1c2      	bne.n	80041fa <_printf_float+0x2f2>
 8004274:	e6a3      	b.n	8003fbe <_printf_float+0xb6>
 8004276:	2301      	movs	r3, #1
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	9206      	str	r2, [sp, #24]
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	f43f ae9c 	beq.w	8003fbe <_printf_float+0xb6>
 8004286:	9a06      	ldr	r2, [sp, #24]
 8004288:	f10b 0b01 	add.w	fp, fp, #1
 800428c:	e7bb      	b.n	8004206 <_printf_float+0x2fe>
 800428e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	d1c0      	bne.n	800421e <_printf_float+0x316>
 800429c:	e68f      	b.n	8003fbe <_printf_float+0xb6>
 800429e:	9a06      	ldr	r2, [sp, #24]
 80042a0:	464b      	mov	r3, r9
 80042a2:	4442      	add	r2, r8
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	d1c3      	bne.n	8004236 <_printf_float+0x32e>
 80042ae:	e686      	b.n	8003fbe <_printf_float+0xb6>
 80042b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042b4:	f1ba 0f01 	cmp.w	sl, #1
 80042b8:	dc01      	bgt.n	80042be <_printf_float+0x3b6>
 80042ba:	07db      	lsls	r3, r3, #31
 80042bc:	d536      	bpl.n	800432c <_printf_float+0x424>
 80042be:	2301      	movs	r3, #1
 80042c0:	4642      	mov	r2, r8
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	f43f ae78 	beq.w	8003fbe <_printf_float+0xb6>
 80042ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042d2:	4631      	mov	r1, r6
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b8      	blx	r7
 80042d8:	3001      	adds	r0, #1
 80042da:	f43f ae70 	beq.w	8003fbe <_printf_float+0xb6>
 80042de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042e2:	2200      	movs	r2, #0
 80042e4:	2300      	movs	r3, #0
 80042e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042ea:	f7fc fbf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80042ee:	b9c0      	cbnz	r0, 8004322 <_printf_float+0x41a>
 80042f0:	4653      	mov	r3, sl
 80042f2:	f108 0201 	add.w	r2, r8, #1
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	d10c      	bne.n	800431a <_printf_float+0x412>
 8004300:	e65d      	b.n	8003fbe <_printf_float+0xb6>
 8004302:	2301      	movs	r3, #1
 8004304:	465a      	mov	r2, fp
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f ae56 	beq.w	8003fbe <_printf_float+0xb6>
 8004312:	f108 0801 	add.w	r8, r8, #1
 8004316:	45d0      	cmp	r8, sl
 8004318:	dbf3      	blt.n	8004302 <_printf_float+0x3fa>
 800431a:	464b      	mov	r3, r9
 800431c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004320:	e6df      	b.n	80040e2 <_printf_float+0x1da>
 8004322:	f04f 0800 	mov.w	r8, #0
 8004326:	f104 0b1a 	add.w	fp, r4, #26
 800432a:	e7f4      	b.n	8004316 <_printf_float+0x40e>
 800432c:	2301      	movs	r3, #1
 800432e:	4642      	mov	r2, r8
 8004330:	e7e1      	b.n	80042f6 <_printf_float+0x3ee>
 8004332:	2301      	movs	r3, #1
 8004334:	464a      	mov	r2, r9
 8004336:	4631      	mov	r1, r6
 8004338:	4628      	mov	r0, r5
 800433a:	47b8      	blx	r7
 800433c:	3001      	adds	r0, #1
 800433e:	f43f ae3e 	beq.w	8003fbe <_printf_float+0xb6>
 8004342:	f108 0801 	add.w	r8, r8, #1
 8004346:	68e3      	ldr	r3, [r4, #12]
 8004348:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800434a:	1a5b      	subs	r3, r3, r1
 800434c:	4543      	cmp	r3, r8
 800434e:	dcf0      	bgt.n	8004332 <_printf_float+0x42a>
 8004350:	e6fc      	b.n	800414c <_printf_float+0x244>
 8004352:	f04f 0800 	mov.w	r8, #0
 8004356:	f104 0919 	add.w	r9, r4, #25
 800435a:	e7f4      	b.n	8004346 <_printf_float+0x43e>

0800435c <_printf_common>:
 800435c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004360:	4616      	mov	r6, r2
 8004362:	4698      	mov	r8, r3
 8004364:	688a      	ldr	r2, [r1, #8]
 8004366:	690b      	ldr	r3, [r1, #16]
 8004368:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800436c:	4293      	cmp	r3, r2
 800436e:	bfb8      	it	lt
 8004370:	4613      	movlt	r3, r2
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004378:	4607      	mov	r7, r0
 800437a:	460c      	mov	r4, r1
 800437c:	b10a      	cbz	r2, 8004382 <_printf_common+0x26>
 800437e:	3301      	adds	r3, #1
 8004380:	6033      	str	r3, [r6, #0]
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	0699      	lsls	r1, r3, #26
 8004386:	bf42      	ittt	mi
 8004388:	6833      	ldrmi	r3, [r6, #0]
 800438a:	3302      	addmi	r3, #2
 800438c:	6033      	strmi	r3, [r6, #0]
 800438e:	6825      	ldr	r5, [r4, #0]
 8004390:	f015 0506 	ands.w	r5, r5, #6
 8004394:	d106      	bne.n	80043a4 <_printf_common+0x48>
 8004396:	f104 0a19 	add.w	sl, r4, #25
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	6832      	ldr	r2, [r6, #0]
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dc26      	bgt.n	80043f2 <_printf_common+0x96>
 80043a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043a8:	6822      	ldr	r2, [r4, #0]
 80043aa:	3b00      	subs	r3, #0
 80043ac:	bf18      	it	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	0692      	lsls	r2, r2, #26
 80043b2:	d42b      	bmi.n	800440c <_printf_common+0xb0>
 80043b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043b8:	4641      	mov	r1, r8
 80043ba:	4638      	mov	r0, r7
 80043bc:	47c8      	blx	r9
 80043be:	3001      	adds	r0, #1
 80043c0:	d01e      	beq.n	8004400 <_printf_common+0xa4>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	6922      	ldr	r2, [r4, #16]
 80043c6:	f003 0306 	and.w	r3, r3, #6
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	bf02      	ittt	eq
 80043ce:	68e5      	ldreq	r5, [r4, #12]
 80043d0:	6833      	ldreq	r3, [r6, #0]
 80043d2:	1aed      	subeq	r5, r5, r3
 80043d4:	68a3      	ldr	r3, [r4, #8]
 80043d6:	bf0c      	ite	eq
 80043d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043dc:	2500      	movne	r5, #0
 80043de:	4293      	cmp	r3, r2
 80043e0:	bfc4      	itt	gt
 80043e2:	1a9b      	subgt	r3, r3, r2
 80043e4:	18ed      	addgt	r5, r5, r3
 80043e6:	2600      	movs	r6, #0
 80043e8:	341a      	adds	r4, #26
 80043ea:	42b5      	cmp	r5, r6
 80043ec:	d11a      	bne.n	8004424 <_printf_common+0xc8>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e008      	b.n	8004404 <_printf_common+0xa8>
 80043f2:	2301      	movs	r3, #1
 80043f4:	4652      	mov	r2, sl
 80043f6:	4641      	mov	r1, r8
 80043f8:	4638      	mov	r0, r7
 80043fa:	47c8      	blx	r9
 80043fc:	3001      	adds	r0, #1
 80043fe:	d103      	bne.n	8004408 <_printf_common+0xac>
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	3501      	adds	r5, #1
 800440a:	e7c6      	b.n	800439a <_printf_common+0x3e>
 800440c:	18e1      	adds	r1, r4, r3
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	2030      	movs	r0, #48	@ 0x30
 8004412:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004416:	4422      	add	r2, r4
 8004418:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800441c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004420:	3302      	adds	r3, #2
 8004422:	e7c7      	b.n	80043b4 <_printf_common+0x58>
 8004424:	2301      	movs	r3, #1
 8004426:	4622      	mov	r2, r4
 8004428:	4641      	mov	r1, r8
 800442a:	4638      	mov	r0, r7
 800442c:	47c8      	blx	r9
 800442e:	3001      	adds	r0, #1
 8004430:	d0e6      	beq.n	8004400 <_printf_common+0xa4>
 8004432:	3601      	adds	r6, #1
 8004434:	e7d9      	b.n	80043ea <_printf_common+0x8e>
	...

08004438 <_printf_i>:
 8004438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800443c:	7e0f      	ldrb	r7, [r1, #24]
 800443e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004440:	2f78      	cmp	r7, #120	@ 0x78
 8004442:	4691      	mov	r9, r2
 8004444:	4680      	mov	r8, r0
 8004446:	460c      	mov	r4, r1
 8004448:	469a      	mov	sl, r3
 800444a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800444e:	d807      	bhi.n	8004460 <_printf_i+0x28>
 8004450:	2f62      	cmp	r7, #98	@ 0x62
 8004452:	d80a      	bhi.n	800446a <_printf_i+0x32>
 8004454:	2f00      	cmp	r7, #0
 8004456:	f000 80d2 	beq.w	80045fe <_printf_i+0x1c6>
 800445a:	2f58      	cmp	r7, #88	@ 0x58
 800445c:	f000 80b9 	beq.w	80045d2 <_printf_i+0x19a>
 8004460:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004464:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004468:	e03a      	b.n	80044e0 <_printf_i+0xa8>
 800446a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800446e:	2b15      	cmp	r3, #21
 8004470:	d8f6      	bhi.n	8004460 <_printf_i+0x28>
 8004472:	a101      	add	r1, pc, #4	@ (adr r1, 8004478 <_printf_i+0x40>)
 8004474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044e5 	.word	0x080044e5
 8004480:	08004461 	.word	0x08004461
 8004484:	08004461 	.word	0x08004461
 8004488:	08004461 	.word	0x08004461
 800448c:	08004461 	.word	0x08004461
 8004490:	080044e5 	.word	0x080044e5
 8004494:	08004461 	.word	0x08004461
 8004498:	08004461 	.word	0x08004461
 800449c:	08004461 	.word	0x08004461
 80044a0:	08004461 	.word	0x08004461
 80044a4:	080045e5 	.word	0x080045e5
 80044a8:	0800450f 	.word	0x0800450f
 80044ac:	0800459f 	.word	0x0800459f
 80044b0:	08004461 	.word	0x08004461
 80044b4:	08004461 	.word	0x08004461
 80044b8:	08004607 	.word	0x08004607
 80044bc:	08004461 	.word	0x08004461
 80044c0:	0800450f 	.word	0x0800450f
 80044c4:	08004461 	.word	0x08004461
 80044c8:	08004461 	.word	0x08004461
 80044cc:	080045a7 	.word	0x080045a7
 80044d0:	6833      	ldr	r3, [r6, #0]
 80044d2:	1d1a      	adds	r2, r3, #4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6032      	str	r2, [r6, #0]
 80044d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044e0:	2301      	movs	r3, #1
 80044e2:	e09d      	b.n	8004620 <_printf_i+0x1e8>
 80044e4:	6833      	ldr	r3, [r6, #0]
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	1d19      	adds	r1, r3, #4
 80044ea:	6031      	str	r1, [r6, #0]
 80044ec:	0606      	lsls	r6, r0, #24
 80044ee:	d501      	bpl.n	80044f4 <_printf_i+0xbc>
 80044f0:	681d      	ldr	r5, [r3, #0]
 80044f2:	e003      	b.n	80044fc <_printf_i+0xc4>
 80044f4:	0645      	lsls	r5, r0, #25
 80044f6:	d5fb      	bpl.n	80044f0 <_printf_i+0xb8>
 80044f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044fc:	2d00      	cmp	r5, #0
 80044fe:	da03      	bge.n	8004508 <_printf_i+0xd0>
 8004500:	232d      	movs	r3, #45	@ 0x2d
 8004502:	426d      	negs	r5, r5
 8004504:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004508:	4859      	ldr	r0, [pc, #356]	@ (8004670 <_printf_i+0x238>)
 800450a:	230a      	movs	r3, #10
 800450c:	e011      	b.n	8004532 <_printf_i+0xfa>
 800450e:	6821      	ldr	r1, [r4, #0]
 8004510:	6833      	ldr	r3, [r6, #0]
 8004512:	0608      	lsls	r0, r1, #24
 8004514:	f853 5b04 	ldr.w	r5, [r3], #4
 8004518:	d402      	bmi.n	8004520 <_printf_i+0xe8>
 800451a:	0649      	lsls	r1, r1, #25
 800451c:	bf48      	it	mi
 800451e:	b2ad      	uxthmi	r5, r5
 8004520:	2f6f      	cmp	r7, #111	@ 0x6f
 8004522:	4853      	ldr	r0, [pc, #332]	@ (8004670 <_printf_i+0x238>)
 8004524:	6033      	str	r3, [r6, #0]
 8004526:	bf14      	ite	ne
 8004528:	230a      	movne	r3, #10
 800452a:	2308      	moveq	r3, #8
 800452c:	2100      	movs	r1, #0
 800452e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004532:	6866      	ldr	r6, [r4, #4]
 8004534:	60a6      	str	r6, [r4, #8]
 8004536:	2e00      	cmp	r6, #0
 8004538:	bfa2      	ittt	ge
 800453a:	6821      	ldrge	r1, [r4, #0]
 800453c:	f021 0104 	bicge.w	r1, r1, #4
 8004540:	6021      	strge	r1, [r4, #0]
 8004542:	b90d      	cbnz	r5, 8004548 <_printf_i+0x110>
 8004544:	2e00      	cmp	r6, #0
 8004546:	d04b      	beq.n	80045e0 <_printf_i+0x1a8>
 8004548:	4616      	mov	r6, r2
 800454a:	fbb5 f1f3 	udiv	r1, r5, r3
 800454e:	fb03 5711 	mls	r7, r3, r1, r5
 8004552:	5dc7      	ldrb	r7, [r0, r7]
 8004554:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004558:	462f      	mov	r7, r5
 800455a:	42bb      	cmp	r3, r7
 800455c:	460d      	mov	r5, r1
 800455e:	d9f4      	bls.n	800454a <_printf_i+0x112>
 8004560:	2b08      	cmp	r3, #8
 8004562:	d10b      	bne.n	800457c <_printf_i+0x144>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	07df      	lsls	r7, r3, #31
 8004568:	d508      	bpl.n	800457c <_printf_i+0x144>
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	6861      	ldr	r1, [r4, #4]
 800456e:	4299      	cmp	r1, r3
 8004570:	bfde      	ittt	le
 8004572:	2330      	movle	r3, #48	@ 0x30
 8004574:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004578:	f106 36ff 	addle.w	r6, r6, #4294967295
 800457c:	1b92      	subs	r2, r2, r6
 800457e:	6122      	str	r2, [r4, #16]
 8004580:	f8cd a000 	str.w	sl, [sp]
 8004584:	464b      	mov	r3, r9
 8004586:	aa03      	add	r2, sp, #12
 8004588:	4621      	mov	r1, r4
 800458a:	4640      	mov	r0, r8
 800458c:	f7ff fee6 	bl	800435c <_printf_common>
 8004590:	3001      	adds	r0, #1
 8004592:	d14a      	bne.n	800462a <_printf_i+0x1f2>
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	b004      	add	sp, #16
 800459a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f043 0320 	orr.w	r3, r3, #32
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	4833      	ldr	r0, [pc, #204]	@ (8004674 <_printf_i+0x23c>)
 80045a8:	2778      	movs	r7, #120	@ 0x78
 80045aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	6831      	ldr	r1, [r6, #0]
 80045b2:	061f      	lsls	r7, r3, #24
 80045b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80045b8:	d402      	bmi.n	80045c0 <_printf_i+0x188>
 80045ba:	065f      	lsls	r7, r3, #25
 80045bc:	bf48      	it	mi
 80045be:	b2ad      	uxthmi	r5, r5
 80045c0:	6031      	str	r1, [r6, #0]
 80045c2:	07d9      	lsls	r1, r3, #31
 80045c4:	bf44      	itt	mi
 80045c6:	f043 0320 	orrmi.w	r3, r3, #32
 80045ca:	6023      	strmi	r3, [r4, #0]
 80045cc:	b11d      	cbz	r5, 80045d6 <_printf_i+0x19e>
 80045ce:	2310      	movs	r3, #16
 80045d0:	e7ac      	b.n	800452c <_printf_i+0xf4>
 80045d2:	4827      	ldr	r0, [pc, #156]	@ (8004670 <_printf_i+0x238>)
 80045d4:	e7e9      	b.n	80045aa <_printf_i+0x172>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f023 0320 	bic.w	r3, r3, #32
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	e7f6      	b.n	80045ce <_printf_i+0x196>
 80045e0:	4616      	mov	r6, r2
 80045e2:	e7bd      	b.n	8004560 <_printf_i+0x128>
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	6825      	ldr	r5, [r4, #0]
 80045e8:	6961      	ldr	r1, [r4, #20]
 80045ea:	1d18      	adds	r0, r3, #4
 80045ec:	6030      	str	r0, [r6, #0]
 80045ee:	062e      	lsls	r6, r5, #24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	d501      	bpl.n	80045f8 <_printf_i+0x1c0>
 80045f4:	6019      	str	r1, [r3, #0]
 80045f6:	e002      	b.n	80045fe <_printf_i+0x1c6>
 80045f8:	0668      	lsls	r0, r5, #25
 80045fa:	d5fb      	bpl.n	80045f4 <_printf_i+0x1bc>
 80045fc:	8019      	strh	r1, [r3, #0]
 80045fe:	2300      	movs	r3, #0
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	4616      	mov	r6, r2
 8004604:	e7bc      	b.n	8004580 <_printf_i+0x148>
 8004606:	6833      	ldr	r3, [r6, #0]
 8004608:	1d1a      	adds	r2, r3, #4
 800460a:	6032      	str	r2, [r6, #0]
 800460c:	681e      	ldr	r6, [r3, #0]
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	2100      	movs	r1, #0
 8004612:	4630      	mov	r0, r6
 8004614:	f7fb fde4 	bl	80001e0 <memchr>
 8004618:	b108      	cbz	r0, 800461e <_printf_i+0x1e6>
 800461a:	1b80      	subs	r0, r0, r6
 800461c:	6060      	str	r0, [r4, #4]
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	2300      	movs	r3, #0
 8004624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004628:	e7aa      	b.n	8004580 <_printf_i+0x148>
 800462a:	6923      	ldr	r3, [r4, #16]
 800462c:	4632      	mov	r2, r6
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	47d0      	blx	sl
 8004634:	3001      	adds	r0, #1
 8004636:	d0ad      	beq.n	8004594 <_printf_i+0x15c>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	079b      	lsls	r3, r3, #30
 800463c:	d413      	bmi.n	8004666 <_printf_i+0x22e>
 800463e:	68e0      	ldr	r0, [r4, #12]
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	4298      	cmp	r0, r3
 8004644:	bfb8      	it	lt
 8004646:	4618      	movlt	r0, r3
 8004648:	e7a6      	b.n	8004598 <_printf_i+0x160>
 800464a:	2301      	movs	r3, #1
 800464c:	4632      	mov	r2, r6
 800464e:	4649      	mov	r1, r9
 8004650:	4640      	mov	r0, r8
 8004652:	47d0      	blx	sl
 8004654:	3001      	adds	r0, #1
 8004656:	d09d      	beq.n	8004594 <_printf_i+0x15c>
 8004658:	3501      	adds	r5, #1
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	9903      	ldr	r1, [sp, #12]
 800465e:	1a5b      	subs	r3, r3, r1
 8004660:	42ab      	cmp	r3, r5
 8004662:	dcf2      	bgt.n	800464a <_printf_i+0x212>
 8004664:	e7eb      	b.n	800463e <_printf_i+0x206>
 8004666:	2500      	movs	r5, #0
 8004668:	f104 0619 	add.w	r6, r4, #25
 800466c:	e7f5      	b.n	800465a <_printf_i+0x222>
 800466e:	bf00      	nop
 8004670:	08006ade 	.word	0x08006ade
 8004674:	08006aef 	.word	0x08006aef

08004678 <std>:
 8004678:	2300      	movs	r3, #0
 800467a:	b510      	push	{r4, lr}
 800467c:	4604      	mov	r4, r0
 800467e:	e9c0 3300 	strd	r3, r3, [r0]
 8004682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004686:	6083      	str	r3, [r0, #8]
 8004688:	8181      	strh	r1, [r0, #12]
 800468a:	6643      	str	r3, [r0, #100]	@ 0x64
 800468c:	81c2      	strh	r2, [r0, #14]
 800468e:	6183      	str	r3, [r0, #24]
 8004690:	4619      	mov	r1, r3
 8004692:	2208      	movs	r2, #8
 8004694:	305c      	adds	r0, #92	@ 0x5c
 8004696:	f000 f928 	bl	80048ea <memset>
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <std+0x58>)
 800469c:	6263      	str	r3, [r4, #36]	@ 0x24
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <std+0x5c>)
 80046a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <std+0x60>)
 80046a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046a6:	4b0d      	ldr	r3, [pc, #52]	@ (80046dc <std+0x64>)
 80046a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <std+0x68>)
 80046ac:	6224      	str	r4, [r4, #32]
 80046ae:	429c      	cmp	r4, r3
 80046b0:	d006      	beq.n	80046c0 <std+0x48>
 80046b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046b6:	4294      	cmp	r4, r2
 80046b8:	d002      	beq.n	80046c0 <std+0x48>
 80046ba:	33d0      	adds	r3, #208	@ 0xd0
 80046bc:	429c      	cmp	r4, r3
 80046be:	d105      	bne.n	80046cc <std+0x54>
 80046c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c8:	f000 b98c 	b.w	80049e4 <__retarget_lock_init_recursive>
 80046cc:	bd10      	pop	{r4, pc}
 80046ce:	bf00      	nop
 80046d0:	08004865 	.word	0x08004865
 80046d4:	08004887 	.word	0x08004887
 80046d8:	080048bf 	.word	0x080048bf
 80046dc:	080048e3 	.word	0x080048e3
 80046e0:	200002e8 	.word	0x200002e8

080046e4 <stdio_exit_handler>:
 80046e4:	4a02      	ldr	r2, [pc, #8]	@ (80046f0 <stdio_exit_handler+0xc>)
 80046e6:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <stdio_exit_handler+0x10>)
 80046e8:	4803      	ldr	r0, [pc, #12]	@ (80046f8 <stdio_exit_handler+0x14>)
 80046ea:	f000 b869 	b.w	80047c0 <_fwalk_sglue>
 80046ee:	bf00      	nop
 80046f0:	2000000c 	.word	0x2000000c
 80046f4:	08006345 	.word	0x08006345
 80046f8:	2000001c 	.word	0x2000001c

080046fc <cleanup_stdio>:
 80046fc:	6841      	ldr	r1, [r0, #4]
 80046fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <cleanup_stdio+0x34>)
 8004700:	4299      	cmp	r1, r3
 8004702:	b510      	push	{r4, lr}
 8004704:	4604      	mov	r4, r0
 8004706:	d001      	beq.n	800470c <cleanup_stdio+0x10>
 8004708:	f001 fe1c 	bl	8006344 <_fflush_r>
 800470c:	68a1      	ldr	r1, [r4, #8]
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <cleanup_stdio+0x38>)
 8004710:	4299      	cmp	r1, r3
 8004712:	d002      	beq.n	800471a <cleanup_stdio+0x1e>
 8004714:	4620      	mov	r0, r4
 8004716:	f001 fe15 	bl	8006344 <_fflush_r>
 800471a:	68e1      	ldr	r1, [r4, #12]
 800471c:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <cleanup_stdio+0x3c>)
 800471e:	4299      	cmp	r1, r3
 8004720:	d004      	beq.n	800472c <cleanup_stdio+0x30>
 8004722:	4620      	mov	r0, r4
 8004724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004728:	f001 be0c 	b.w	8006344 <_fflush_r>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	bf00      	nop
 8004730:	200002e8 	.word	0x200002e8
 8004734:	20000350 	.word	0x20000350
 8004738:	200003b8 	.word	0x200003b8

0800473c <global_stdio_init.part.0>:
 800473c:	b510      	push	{r4, lr}
 800473e:	4b0b      	ldr	r3, [pc, #44]	@ (800476c <global_stdio_init.part.0+0x30>)
 8004740:	4c0b      	ldr	r4, [pc, #44]	@ (8004770 <global_stdio_init.part.0+0x34>)
 8004742:	4a0c      	ldr	r2, [pc, #48]	@ (8004774 <global_stdio_init.part.0+0x38>)
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	4620      	mov	r0, r4
 8004748:	2200      	movs	r2, #0
 800474a:	2104      	movs	r1, #4
 800474c:	f7ff ff94 	bl	8004678 <std>
 8004750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004754:	2201      	movs	r2, #1
 8004756:	2109      	movs	r1, #9
 8004758:	f7ff ff8e 	bl	8004678 <std>
 800475c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004760:	2202      	movs	r2, #2
 8004762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004766:	2112      	movs	r1, #18
 8004768:	f7ff bf86 	b.w	8004678 <std>
 800476c:	20000420 	.word	0x20000420
 8004770:	200002e8 	.word	0x200002e8
 8004774:	080046e5 	.word	0x080046e5

08004778 <__sfp_lock_acquire>:
 8004778:	4801      	ldr	r0, [pc, #4]	@ (8004780 <__sfp_lock_acquire+0x8>)
 800477a:	f000 b934 	b.w	80049e6 <__retarget_lock_acquire_recursive>
 800477e:	bf00      	nop
 8004780:	20000429 	.word	0x20000429

08004784 <__sfp_lock_release>:
 8004784:	4801      	ldr	r0, [pc, #4]	@ (800478c <__sfp_lock_release+0x8>)
 8004786:	f000 b92f 	b.w	80049e8 <__retarget_lock_release_recursive>
 800478a:	bf00      	nop
 800478c:	20000429 	.word	0x20000429

08004790 <__sinit>:
 8004790:	b510      	push	{r4, lr}
 8004792:	4604      	mov	r4, r0
 8004794:	f7ff fff0 	bl	8004778 <__sfp_lock_acquire>
 8004798:	6a23      	ldr	r3, [r4, #32]
 800479a:	b11b      	cbz	r3, 80047a4 <__sinit+0x14>
 800479c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a0:	f7ff bff0 	b.w	8004784 <__sfp_lock_release>
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <__sinit+0x28>)
 80047a6:	6223      	str	r3, [r4, #32]
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <__sinit+0x2c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f5      	bne.n	800479c <__sinit+0xc>
 80047b0:	f7ff ffc4 	bl	800473c <global_stdio_init.part.0>
 80047b4:	e7f2      	b.n	800479c <__sinit+0xc>
 80047b6:	bf00      	nop
 80047b8:	080046fd 	.word	0x080046fd
 80047bc:	20000420 	.word	0x20000420

080047c0 <_fwalk_sglue>:
 80047c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c4:	4607      	mov	r7, r0
 80047c6:	4688      	mov	r8, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	2600      	movs	r6, #0
 80047cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047d0:	f1b9 0901 	subs.w	r9, r9, #1
 80047d4:	d505      	bpl.n	80047e2 <_fwalk_sglue+0x22>
 80047d6:	6824      	ldr	r4, [r4, #0]
 80047d8:	2c00      	cmp	r4, #0
 80047da:	d1f7      	bne.n	80047cc <_fwalk_sglue+0xc>
 80047dc:	4630      	mov	r0, r6
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d907      	bls.n	80047f8 <_fwalk_sglue+0x38>
 80047e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047ec:	3301      	adds	r3, #1
 80047ee:	d003      	beq.n	80047f8 <_fwalk_sglue+0x38>
 80047f0:	4629      	mov	r1, r5
 80047f2:	4638      	mov	r0, r7
 80047f4:	47c0      	blx	r8
 80047f6:	4306      	orrs	r6, r0
 80047f8:	3568      	adds	r5, #104	@ 0x68
 80047fa:	e7e9      	b.n	80047d0 <_fwalk_sglue+0x10>

080047fc <sniprintf>:
 80047fc:	b40c      	push	{r2, r3}
 80047fe:	b530      	push	{r4, r5, lr}
 8004800:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <sniprintf+0x64>)
 8004802:	1e0c      	subs	r4, r1, #0
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	b09d      	sub	sp, #116	@ 0x74
 8004808:	da08      	bge.n	800481c <sniprintf+0x20>
 800480a:	238b      	movs	r3, #139	@ 0x8b
 800480c:	602b      	str	r3, [r5, #0]
 800480e:	f04f 30ff 	mov.w	r0, #4294967295
 8004812:	b01d      	add	sp, #116	@ 0x74
 8004814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004818:	b002      	add	sp, #8
 800481a:	4770      	bx	lr
 800481c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004820:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004824:	bf14      	ite	ne
 8004826:	f104 33ff 	addne.w	r3, r4, #4294967295
 800482a:	4623      	moveq	r3, r4
 800482c:	9304      	str	r3, [sp, #16]
 800482e:	9307      	str	r3, [sp, #28]
 8004830:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004834:	9002      	str	r0, [sp, #8]
 8004836:	9006      	str	r0, [sp, #24]
 8004838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800483c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800483e:	ab21      	add	r3, sp, #132	@ 0x84
 8004840:	a902      	add	r1, sp, #8
 8004842:	4628      	mov	r0, r5
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	f001 fbfd 	bl	8006044 <_svfiprintf_r>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	bfbc      	itt	lt
 800484e:	238b      	movlt	r3, #139	@ 0x8b
 8004850:	602b      	strlt	r3, [r5, #0]
 8004852:	2c00      	cmp	r4, #0
 8004854:	d0dd      	beq.n	8004812 <sniprintf+0x16>
 8004856:	9b02      	ldr	r3, [sp, #8]
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e7d9      	b.n	8004812 <sniprintf+0x16>
 800485e:	bf00      	nop
 8004860:	20000018 	.word	0x20000018

08004864 <__sread>:
 8004864:	b510      	push	{r4, lr}
 8004866:	460c      	mov	r4, r1
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	f000 f86c 	bl	8004948 <_read_r>
 8004870:	2800      	cmp	r0, #0
 8004872:	bfab      	itete	ge
 8004874:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004876:	89a3      	ldrhlt	r3, [r4, #12]
 8004878:	181b      	addge	r3, r3, r0
 800487a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800487e:	bfac      	ite	ge
 8004880:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004882:	81a3      	strhlt	r3, [r4, #12]
 8004884:	bd10      	pop	{r4, pc}

08004886 <__swrite>:
 8004886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488a:	461f      	mov	r7, r3
 800488c:	898b      	ldrh	r3, [r1, #12]
 800488e:	05db      	lsls	r3, r3, #23
 8004890:	4605      	mov	r5, r0
 8004892:	460c      	mov	r4, r1
 8004894:	4616      	mov	r6, r2
 8004896:	d505      	bpl.n	80048a4 <__swrite+0x1e>
 8004898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489c:	2302      	movs	r3, #2
 800489e:	2200      	movs	r2, #0
 80048a0:	f000 f840 	bl	8004924 <_lseek_r>
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	4632      	mov	r2, r6
 80048b2:	463b      	mov	r3, r7
 80048b4:	4628      	mov	r0, r5
 80048b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ba:	f000 b857 	b.w	800496c <_write_r>

080048be <__sseek>:
 80048be:	b510      	push	{r4, lr}
 80048c0:	460c      	mov	r4, r1
 80048c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c6:	f000 f82d 	bl	8004924 <_lseek_r>
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	bf15      	itete	ne
 80048d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048da:	81a3      	strheq	r3, [r4, #12]
 80048dc:	bf18      	it	ne
 80048de:	81a3      	strhne	r3, [r4, #12]
 80048e0:	bd10      	pop	{r4, pc}

080048e2 <__sclose>:
 80048e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e6:	f000 b80d 	b.w	8004904 <_close_r>

080048ea <memset>:
 80048ea:	4402      	add	r2, r0
 80048ec:	4603      	mov	r3, r0
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d100      	bne.n	80048f4 <memset+0xa>
 80048f2:	4770      	bx	lr
 80048f4:	f803 1b01 	strb.w	r1, [r3], #1
 80048f8:	e7f9      	b.n	80048ee <memset+0x4>
	...

080048fc <_localeconv_r>:
 80048fc:	4800      	ldr	r0, [pc, #0]	@ (8004900 <_localeconv_r+0x4>)
 80048fe:	4770      	bx	lr
 8004900:	20000158 	.word	0x20000158

08004904 <_close_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d06      	ldr	r5, [pc, #24]	@ (8004920 <_close_r+0x1c>)
 8004908:	2300      	movs	r3, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f7fc fe84 	bl	800161c <_close>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_close_r+0x1a>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_close_r+0x1a>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	20000424 	.word	0x20000424

08004924 <_lseek_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d07      	ldr	r5, [pc, #28]	@ (8004944 <_lseek_r+0x20>)
 8004928:	4604      	mov	r4, r0
 800492a:	4608      	mov	r0, r1
 800492c:	4611      	mov	r1, r2
 800492e:	2200      	movs	r2, #0
 8004930:	602a      	str	r2, [r5, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	f7fc fe99 	bl	800166a <_lseek>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_lseek_r+0x1e>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_lseek_r+0x1e>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000424 	.word	0x20000424

08004948 <_read_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	@ (8004968 <_read_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fc fe27 	bl	80015aa <_read>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_read_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_read_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000424 	.word	0x20000424

0800496c <_write_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4d07      	ldr	r5, [pc, #28]	@ (800498c <_write_r+0x20>)
 8004970:	4604      	mov	r4, r0
 8004972:	4608      	mov	r0, r1
 8004974:	4611      	mov	r1, r2
 8004976:	2200      	movs	r2, #0
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7fc fe32 	bl	80015e4 <_write>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_write_r+0x1e>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_write_r+0x1e>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000424 	.word	0x20000424

08004990 <__errno>:
 8004990:	4b01      	ldr	r3, [pc, #4]	@ (8004998 <__errno+0x8>)
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000018 	.word	0x20000018

0800499c <__libc_init_array>:
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	4d0d      	ldr	r5, [pc, #52]	@ (80049d4 <__libc_init_array+0x38>)
 80049a0:	4c0d      	ldr	r4, [pc, #52]	@ (80049d8 <__libc_init_array+0x3c>)
 80049a2:	1b64      	subs	r4, r4, r5
 80049a4:	10a4      	asrs	r4, r4, #2
 80049a6:	2600      	movs	r6, #0
 80049a8:	42a6      	cmp	r6, r4
 80049aa:	d109      	bne.n	80049c0 <__libc_init_array+0x24>
 80049ac:	4d0b      	ldr	r5, [pc, #44]	@ (80049dc <__libc_init_array+0x40>)
 80049ae:	4c0c      	ldr	r4, [pc, #48]	@ (80049e0 <__libc_init_array+0x44>)
 80049b0:	f002 f866 	bl	8006a80 <_init>
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	2600      	movs	r6, #0
 80049ba:	42a6      	cmp	r6, r4
 80049bc:	d105      	bne.n	80049ca <__libc_init_array+0x2e>
 80049be:	bd70      	pop	{r4, r5, r6, pc}
 80049c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c4:	4798      	blx	r3
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7ee      	b.n	80049a8 <__libc_init_array+0xc>
 80049ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ce:	4798      	blx	r3
 80049d0:	3601      	adds	r6, #1
 80049d2:	e7f2      	b.n	80049ba <__libc_init_array+0x1e>
 80049d4:	08006e48 	.word	0x08006e48
 80049d8:	08006e48 	.word	0x08006e48
 80049dc:	08006e48 	.word	0x08006e48
 80049e0:	08006e4c 	.word	0x08006e4c

080049e4 <__retarget_lock_init_recursive>:
 80049e4:	4770      	bx	lr

080049e6 <__retarget_lock_acquire_recursive>:
 80049e6:	4770      	bx	lr

080049e8 <__retarget_lock_release_recursive>:
 80049e8:	4770      	bx	lr

080049ea <quorem>:
 80049ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ee:	6903      	ldr	r3, [r0, #16]
 80049f0:	690c      	ldr	r4, [r1, #16]
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	4607      	mov	r7, r0
 80049f6:	db7e      	blt.n	8004af6 <quorem+0x10c>
 80049f8:	3c01      	subs	r4, #1
 80049fa:	f101 0814 	add.w	r8, r1, #20
 80049fe:	00a3      	lsls	r3, r4, #2
 8004a00:	f100 0514 	add.w	r5, r0, #20
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a14:	3301      	adds	r3, #1
 8004a16:	429a      	cmp	r2, r3
 8004a18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a20:	d32e      	bcc.n	8004a80 <quorem+0x96>
 8004a22:	f04f 0a00 	mov.w	sl, #0
 8004a26:	46c4      	mov	ip, r8
 8004a28:	46ae      	mov	lr, r5
 8004a2a:	46d3      	mov	fp, sl
 8004a2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a30:	b298      	uxth	r0, r3
 8004a32:	fb06 a000 	mla	r0, r6, r0, sl
 8004a36:	0c02      	lsrs	r2, r0, #16
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	fb06 2303 	mla	r3, r6, r3, r2
 8004a3e:	f8de 2000 	ldr.w	r2, [lr]
 8004a42:	b280      	uxth	r0, r0
 8004a44:	b292      	uxth	r2, r2
 8004a46:	1a12      	subs	r2, r2, r0
 8004a48:	445a      	add	r2, fp
 8004a4a:	f8de 0000 	ldr.w	r0, [lr]
 8004a4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004a58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a62:	45e1      	cmp	r9, ip
 8004a64:	f84e 2b04 	str.w	r2, [lr], #4
 8004a68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a6c:	d2de      	bcs.n	8004a2c <quorem+0x42>
 8004a6e:	9b00      	ldr	r3, [sp, #0]
 8004a70:	58eb      	ldr	r3, [r5, r3]
 8004a72:	b92b      	cbnz	r3, 8004a80 <quorem+0x96>
 8004a74:	9b01      	ldr	r3, [sp, #4]
 8004a76:	3b04      	subs	r3, #4
 8004a78:	429d      	cmp	r5, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	d32f      	bcc.n	8004ade <quorem+0xf4>
 8004a7e:	613c      	str	r4, [r7, #16]
 8004a80:	4638      	mov	r0, r7
 8004a82:	f001 f97b 	bl	8005d7c <__mcmp>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	db25      	blt.n	8004ad6 <quorem+0xec>
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a92:	f8d1 c000 	ldr.w	ip, [r1]
 8004a96:	fa1f fe82 	uxth.w	lr, r2
 8004a9a:	fa1f f38c 	uxth.w	r3, ip
 8004a9e:	eba3 030e 	sub.w	r3, r3, lr
 8004aa2:	4403      	add	r3, r0
 8004aa4:	0c12      	lsrs	r2, r2, #16
 8004aa6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004aaa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ab4:	45c1      	cmp	r9, r8
 8004ab6:	f841 3b04 	str.w	r3, [r1], #4
 8004aba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004abe:	d2e6      	bcs.n	8004a8e <quorem+0xa4>
 8004ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ac8:	b922      	cbnz	r2, 8004ad4 <quorem+0xea>
 8004aca:	3b04      	subs	r3, #4
 8004acc:	429d      	cmp	r5, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	d30b      	bcc.n	8004aea <quorem+0x100>
 8004ad2:	613c      	str	r4, [r7, #16]
 8004ad4:	3601      	adds	r6, #1
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	b003      	add	sp, #12
 8004ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	d1cb      	bne.n	8004a7e <quorem+0x94>
 8004ae6:	3c01      	subs	r4, #1
 8004ae8:	e7c6      	b.n	8004a78 <quorem+0x8e>
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	3b04      	subs	r3, #4
 8004aee:	2a00      	cmp	r2, #0
 8004af0:	d1ef      	bne.n	8004ad2 <quorem+0xe8>
 8004af2:	3c01      	subs	r4, #1
 8004af4:	e7ea      	b.n	8004acc <quorem+0xe2>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e7ee      	b.n	8004ad8 <quorem+0xee>
 8004afa:	0000      	movs	r0, r0
 8004afc:	0000      	movs	r0, r0
	...

08004b00 <_dtoa_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	69c7      	ldr	r7, [r0, #28]
 8004b06:	b099      	sub	sp, #100	@ 0x64
 8004b08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004b0c:	ec55 4b10 	vmov	r4, r5, d0
 8004b10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004b12:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b14:	4683      	mov	fp, r0
 8004b16:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b1a:	b97f      	cbnz	r7, 8004b3c <_dtoa_r+0x3c>
 8004b1c:	2010      	movs	r0, #16
 8004b1e:	f000 fdfd 	bl	800571c <malloc>
 8004b22:	4602      	mov	r2, r0
 8004b24:	f8cb 001c 	str.w	r0, [fp, #28]
 8004b28:	b920      	cbnz	r0, 8004b34 <_dtoa_r+0x34>
 8004b2a:	4ba7      	ldr	r3, [pc, #668]	@ (8004dc8 <_dtoa_r+0x2c8>)
 8004b2c:	21ef      	movs	r1, #239	@ 0xef
 8004b2e:	48a7      	ldr	r0, [pc, #668]	@ (8004dcc <_dtoa_r+0x2cc>)
 8004b30:	f001 fc68 	bl	8006404 <__assert_func>
 8004b34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004b38:	6007      	str	r7, [r0, #0]
 8004b3a:	60c7      	str	r7, [r0, #12]
 8004b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	b159      	cbz	r1, 8004b5c <_dtoa_r+0x5c>
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	604a      	str	r2, [r1, #4]
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4093      	lsls	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
 8004b4e:	4658      	mov	r0, fp
 8004b50:	f000 feda 	bl	8005908 <_Bfree>
 8004b54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	1e2b      	subs	r3, r5, #0
 8004b5e:	bfb9      	ittee	lt
 8004b60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004b64:	9303      	strlt	r3, [sp, #12]
 8004b66:	2300      	movge	r3, #0
 8004b68:	6033      	strge	r3, [r6, #0]
 8004b6a:	9f03      	ldr	r7, [sp, #12]
 8004b6c:	4b98      	ldr	r3, [pc, #608]	@ (8004dd0 <_dtoa_r+0x2d0>)
 8004b6e:	bfbc      	itt	lt
 8004b70:	2201      	movlt	r2, #1
 8004b72:	6032      	strlt	r2, [r6, #0]
 8004b74:	43bb      	bics	r3, r7
 8004b76:	d112      	bne.n	8004b9e <_dtoa_r+0x9e>
 8004b78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b84:	4323      	orrs	r3, r4
 8004b86:	f000 854d 	beq.w	8005624 <_dtoa_r+0xb24>
 8004b8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004de4 <_dtoa_r+0x2e4>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 854f 	beq.w	8005634 <_dtoa_r+0xb34>
 8004b96:	f10a 0303 	add.w	r3, sl, #3
 8004b9a:	f000 bd49 	b.w	8005630 <_dtoa_r+0xb30>
 8004b9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	ec51 0b17 	vmov	r0, r1, d7
 8004ba8:	2300      	movs	r3, #0
 8004baa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004bae:	f7fb ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bb2:	4680      	mov	r8, r0
 8004bb4:	b158      	cbz	r0, 8004bce <_dtoa_r+0xce>
 8004bb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004bb8:	2301      	movs	r3, #1
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004bbe:	b113      	cbz	r3, 8004bc6 <_dtoa_r+0xc6>
 8004bc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004bc2:	4b84      	ldr	r3, [pc, #528]	@ (8004dd4 <_dtoa_r+0x2d4>)
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004de8 <_dtoa_r+0x2e8>
 8004bca:	f000 bd33 	b.w	8005634 <_dtoa_r+0xb34>
 8004bce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004bd2:	aa16      	add	r2, sp, #88	@ 0x58
 8004bd4:	a917      	add	r1, sp, #92	@ 0x5c
 8004bd6:	4658      	mov	r0, fp
 8004bd8:	f001 f980 	bl	8005edc <__d2b>
 8004bdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004be0:	4681      	mov	r9, r0
 8004be2:	2e00      	cmp	r6, #0
 8004be4:	d077      	beq.n	8004cd6 <_dtoa_r+0x1d6>
 8004be6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004be8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004bf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004bfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c00:	4619      	mov	r1, r3
 8004c02:	2200      	movs	r2, #0
 8004c04:	4b74      	ldr	r3, [pc, #464]	@ (8004dd8 <_dtoa_r+0x2d8>)
 8004c06:	f7fb fb47 	bl	8000298 <__aeabi_dsub>
 8004c0a:	a369      	add	r3, pc, #420	@ (adr r3, 8004db0 <_dtoa_r+0x2b0>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb fcfa 	bl	8000608 <__aeabi_dmul>
 8004c14:	a368      	add	r3, pc, #416	@ (adr r3, 8004db8 <_dtoa_r+0x2b8>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fb3f 	bl	800029c <__adddf3>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	4630      	mov	r0, r6
 8004c22:	460d      	mov	r5, r1
 8004c24:	f7fb fc86 	bl	8000534 <__aeabi_i2d>
 8004c28:	a365      	add	r3, pc, #404	@ (adr r3, 8004dc0 <_dtoa_r+0x2c0>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f7fb fceb 	bl	8000608 <__aeabi_dmul>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7fb fb2f 	bl	800029c <__adddf3>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	f7fb ff91 	bl	8000b68 <__aeabi_d2iz>
 8004c46:	2200      	movs	r2, #0
 8004c48:	4607      	mov	r7, r0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	4629      	mov	r1, r5
 8004c50:	f7fb ff4c 	bl	8000aec <__aeabi_dcmplt>
 8004c54:	b140      	cbz	r0, 8004c68 <_dtoa_r+0x168>
 8004c56:	4638      	mov	r0, r7
 8004c58:	f7fb fc6c 	bl	8000534 <__aeabi_i2d>
 8004c5c:	4622      	mov	r2, r4
 8004c5e:	462b      	mov	r3, r5
 8004c60:	f7fb ff3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c64:	b900      	cbnz	r0, 8004c68 <_dtoa_r+0x168>
 8004c66:	3f01      	subs	r7, #1
 8004c68:	2f16      	cmp	r7, #22
 8004c6a:	d851      	bhi.n	8004d10 <_dtoa_r+0x210>
 8004c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ddc <_dtoa_r+0x2dc>)
 8004c6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c7a:	f7fb ff37 	bl	8000aec <__aeabi_dcmplt>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d048      	beq.n	8004d14 <_dtoa_r+0x214>
 8004c82:	3f01      	subs	r7, #1
 8004c84:	2300      	movs	r3, #0
 8004c86:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004c8a:	1b9b      	subs	r3, r3, r6
 8004c8c:	1e5a      	subs	r2, r3, #1
 8004c8e:	bf44      	itt	mi
 8004c90:	f1c3 0801 	rsbmi	r8, r3, #1
 8004c94:	2300      	movmi	r3, #0
 8004c96:	9208      	str	r2, [sp, #32]
 8004c98:	bf54      	ite	pl
 8004c9a:	f04f 0800 	movpl.w	r8, #0
 8004c9e:	9308      	strmi	r3, [sp, #32]
 8004ca0:	2f00      	cmp	r7, #0
 8004ca2:	db39      	blt.n	8004d18 <_dtoa_r+0x218>
 8004ca4:	9b08      	ldr	r3, [sp, #32]
 8004ca6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004ca8:	443b      	add	r3, r7
 8004caa:	9308      	str	r3, [sp, #32]
 8004cac:	2300      	movs	r3, #0
 8004cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb2:	2b09      	cmp	r3, #9
 8004cb4:	d864      	bhi.n	8004d80 <_dtoa_r+0x280>
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	bfc4      	itt	gt
 8004cba:	3b04      	subgt	r3, #4
 8004cbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc0:	f1a3 0302 	sub.w	r3, r3, #2
 8004cc4:	bfcc      	ite	gt
 8004cc6:	2400      	movgt	r4, #0
 8004cc8:	2401      	movle	r4, #1
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d863      	bhi.n	8004d96 <_dtoa_r+0x296>
 8004cce:	e8df f003 	tbb	[pc, r3]
 8004cd2:	372a      	.short	0x372a
 8004cd4:	5535      	.short	0x5535
 8004cd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004cda:	441e      	add	r6, r3
 8004cdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	bfc1      	itttt	gt
 8004ce4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ce8:	409f      	lslgt	r7, r3
 8004cea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004cee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004cf2:	bfd6      	itet	le
 8004cf4:	f1c3 0320 	rsble	r3, r3, #32
 8004cf8:	ea47 0003 	orrgt.w	r0, r7, r3
 8004cfc:	fa04 f003 	lslle.w	r0, r4, r3
 8004d00:	f7fb fc08 	bl	8000514 <__aeabi_ui2d>
 8004d04:	2201      	movs	r2, #1
 8004d06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d0a:	3e01      	subs	r6, #1
 8004d0c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004d0e:	e777      	b.n	8004c00 <_dtoa_r+0x100>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e7b8      	b.n	8004c86 <_dtoa_r+0x186>
 8004d14:	9012      	str	r0, [sp, #72]	@ 0x48
 8004d16:	e7b7      	b.n	8004c88 <_dtoa_r+0x188>
 8004d18:	427b      	negs	r3, r7
 8004d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	eba8 0807 	sub.w	r8, r8, r7
 8004d22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d24:	e7c4      	b.n	8004cb0 <_dtoa_r+0x1b0>
 8004d26:	2300      	movs	r3, #0
 8004d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	dc35      	bgt.n	8004d9c <_dtoa_r+0x29c>
 8004d30:	2301      	movs	r3, #1
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	9307      	str	r3, [sp, #28]
 8004d36:	461a      	mov	r2, r3
 8004d38:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d3a:	e00b      	b.n	8004d54 <_dtoa_r+0x254>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e7f3      	b.n	8004d28 <_dtoa_r+0x228>
 8004d40:	2300      	movs	r3, #0
 8004d42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	bfb8      	it	lt
 8004d52:	2301      	movlt	r3, #1
 8004d54:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f102 0514 	add.w	r5, r2, #20
 8004d60:	429d      	cmp	r5, r3
 8004d62:	d91f      	bls.n	8004da4 <_dtoa_r+0x2a4>
 8004d64:	6041      	str	r1, [r0, #4]
 8004d66:	4658      	mov	r0, fp
 8004d68:	f000 fd8e 	bl	8005888 <_Balloc>
 8004d6c:	4682      	mov	sl, r0
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d13c      	bne.n	8004dec <_dtoa_r+0x2ec>
 8004d72:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <_dtoa_r+0x2e0>)
 8004d74:	4602      	mov	r2, r0
 8004d76:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d7a:	e6d8      	b.n	8004b2e <_dtoa_r+0x2e>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e7e0      	b.n	8004d42 <_dtoa_r+0x242>
 8004d80:	2401      	movs	r4, #1
 8004d82:	2300      	movs	r3, #0
 8004d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	9307      	str	r3, [sp, #28]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2312      	movs	r3, #18
 8004d94:	e7d0      	b.n	8004d38 <_dtoa_r+0x238>
 8004d96:	2301      	movs	r3, #1
 8004d98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d9a:	e7f5      	b.n	8004d88 <_dtoa_r+0x288>
 8004d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	9307      	str	r3, [sp, #28]
 8004da2:	e7d7      	b.n	8004d54 <_dtoa_r+0x254>
 8004da4:	3101      	adds	r1, #1
 8004da6:	0052      	lsls	r2, r2, #1
 8004da8:	e7d8      	b.n	8004d5c <_dtoa_r+0x25c>
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w
 8004db0:	636f4361 	.word	0x636f4361
 8004db4:	3fd287a7 	.word	0x3fd287a7
 8004db8:	8b60c8b3 	.word	0x8b60c8b3
 8004dbc:	3fc68a28 	.word	0x3fc68a28
 8004dc0:	509f79fb 	.word	0x509f79fb
 8004dc4:	3fd34413 	.word	0x3fd34413
 8004dc8:	08006b0d 	.word	0x08006b0d
 8004dcc:	08006b24 	.word	0x08006b24
 8004dd0:	7ff00000 	.word	0x7ff00000
 8004dd4:	08006add 	.word	0x08006add
 8004dd8:	3ff80000 	.word	0x3ff80000
 8004ddc:	08006c20 	.word	0x08006c20
 8004de0:	08006b7c 	.word	0x08006b7c
 8004de4:	08006b09 	.word	0x08006b09
 8004de8:	08006adc 	.word	0x08006adc
 8004dec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004df0:	6018      	str	r0, [r3, #0]
 8004df2:	9b07      	ldr	r3, [sp, #28]
 8004df4:	2b0e      	cmp	r3, #14
 8004df6:	f200 80a4 	bhi.w	8004f42 <_dtoa_r+0x442>
 8004dfa:	2c00      	cmp	r4, #0
 8004dfc:	f000 80a1 	beq.w	8004f42 <_dtoa_r+0x442>
 8004e00:	2f00      	cmp	r7, #0
 8004e02:	dd33      	ble.n	8004e6c <_dtoa_r+0x36c>
 8004e04:	4bad      	ldr	r3, [pc, #692]	@ (80050bc <_dtoa_r+0x5bc>)
 8004e06:	f007 020f 	and.w	r2, r7, #15
 8004e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e0e:	ed93 7b00 	vldr	d7, [r3]
 8004e12:	05f8      	lsls	r0, r7, #23
 8004e14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004e18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e1c:	d516      	bpl.n	8004e4c <_dtoa_r+0x34c>
 8004e1e:	4ba8      	ldr	r3, [pc, #672]	@ (80050c0 <_dtoa_r+0x5c0>)
 8004e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e28:	f7fb fd18 	bl	800085c <__aeabi_ddiv>
 8004e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e30:	f004 040f 	and.w	r4, r4, #15
 8004e34:	2603      	movs	r6, #3
 8004e36:	4da2      	ldr	r5, [pc, #648]	@ (80050c0 <_dtoa_r+0x5c0>)
 8004e38:	b954      	cbnz	r4, 8004e50 <_dtoa_r+0x350>
 8004e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e42:	f7fb fd0b 	bl	800085c <__aeabi_ddiv>
 8004e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4a:	e028      	b.n	8004e9e <_dtoa_r+0x39e>
 8004e4c:	2602      	movs	r6, #2
 8004e4e:	e7f2      	b.n	8004e36 <_dtoa_r+0x336>
 8004e50:	07e1      	lsls	r1, r4, #31
 8004e52:	d508      	bpl.n	8004e66 <_dtoa_r+0x366>
 8004e54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e5c:	f7fb fbd4 	bl	8000608 <__aeabi_dmul>
 8004e60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e64:	3601      	adds	r6, #1
 8004e66:	1064      	asrs	r4, r4, #1
 8004e68:	3508      	adds	r5, #8
 8004e6a:	e7e5      	b.n	8004e38 <_dtoa_r+0x338>
 8004e6c:	f000 80d2 	beq.w	8005014 <_dtoa_r+0x514>
 8004e70:	427c      	negs	r4, r7
 8004e72:	4b92      	ldr	r3, [pc, #584]	@ (80050bc <_dtoa_r+0x5bc>)
 8004e74:	4d92      	ldr	r5, [pc, #584]	@ (80050c0 <_dtoa_r+0x5c0>)
 8004e76:	f004 020f 	and.w	r2, r4, #15
 8004e7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e86:	f7fb fbbf 	bl	8000608 <__aeabi_dmul>
 8004e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e8e:	1124      	asrs	r4, r4, #4
 8004e90:	2300      	movs	r3, #0
 8004e92:	2602      	movs	r6, #2
 8004e94:	2c00      	cmp	r4, #0
 8004e96:	f040 80b2 	bne.w	8004ffe <_dtoa_r+0x4fe>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1d3      	bne.n	8004e46 <_dtoa_r+0x346>
 8004e9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004ea0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80b7 	beq.w	8005018 <_dtoa_r+0x518>
 8004eaa:	4b86      	ldr	r3, [pc, #536]	@ (80050c4 <_dtoa_r+0x5c4>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f7fb fe1b 	bl	8000aec <__aeabi_dcmplt>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f000 80ae 	beq.w	8005018 <_dtoa_r+0x518>
 8004ebc:	9b07      	ldr	r3, [sp, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 80aa 	beq.w	8005018 <_dtoa_r+0x518>
 8004ec4:	9b00      	ldr	r3, [sp, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dd37      	ble.n	8004f3a <_dtoa_r+0x43a>
 8004eca:	1e7b      	subs	r3, r7, #1
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80050c8 <_dtoa_r+0x5c8>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fb97 	bl	8000608 <__aeabi_dmul>
 8004eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ede:	9c00      	ldr	r4, [sp, #0]
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7fb fb26 	bl	8000534 <__aeabi_i2d>
 8004ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eec:	f7fb fb8c 	bl	8000608 <__aeabi_dmul>
 8004ef0:	4b76      	ldr	r3, [pc, #472]	@ (80050cc <_dtoa_r+0x5cc>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f7fb f9d2 	bl	800029c <__adddf3>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	f040 808d 	bne.w	800501e <_dtoa_r+0x51e>
 8004f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f08:	4b71      	ldr	r3, [pc, #452]	@ (80050d0 <_dtoa_r+0x5d0>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f7fb f9c4 	bl	8000298 <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f18:	462a      	mov	r2, r5
 8004f1a:	4633      	mov	r3, r6
 8004f1c:	f7fb fe04 	bl	8000b28 <__aeabi_dcmpgt>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f040 828b 	bne.w	800543c <_dtoa_r+0x93c>
 8004f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f2a:	462a      	mov	r2, r5
 8004f2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004f30:	f7fb fddc 	bl	8000aec <__aeabi_dcmplt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f040 8128 	bne.w	800518a <_dtoa_r+0x68a>
 8004f3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004f3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004f42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f2c0 815a 	blt.w	80051fe <_dtoa_r+0x6fe>
 8004f4a:	2f0e      	cmp	r7, #14
 8004f4c:	f300 8157 	bgt.w	80051fe <_dtoa_r+0x6fe>
 8004f50:	4b5a      	ldr	r3, [pc, #360]	@ (80050bc <_dtoa_r+0x5bc>)
 8004f52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f56:	ed93 7b00 	vldr	d7, [r3]
 8004f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	ed8d 7b00 	vstr	d7, [sp]
 8004f62:	da03      	bge.n	8004f6c <_dtoa_r+0x46c>
 8004f64:	9b07      	ldr	r3, [sp, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f340 8101 	ble.w	800516e <_dtoa_r+0x66e>
 8004f6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f70:	4656      	mov	r6, sl
 8004f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f76:	4620      	mov	r0, r4
 8004f78:	4629      	mov	r1, r5
 8004f7a:	f7fb fc6f 	bl	800085c <__aeabi_ddiv>
 8004f7e:	f7fb fdf3 	bl	8000b68 <__aeabi_d2iz>
 8004f82:	4680      	mov	r8, r0
 8004f84:	f7fb fad6 	bl	8000534 <__aeabi_i2d>
 8004f88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f8c:	f7fb fb3c 	bl	8000608 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4620      	mov	r0, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004f9c:	f7fb f97c 	bl	8000298 <__aeabi_dsub>
 8004fa0:	f806 4b01 	strb.w	r4, [r6], #1
 8004fa4:	9d07      	ldr	r5, [sp, #28]
 8004fa6:	eba6 040a 	sub.w	r4, r6, sl
 8004faa:	42a5      	cmp	r5, r4
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	f040 8117 	bne.w	80051e2 <_dtoa_r+0x6e2>
 8004fb4:	f7fb f972 	bl	800029c <__adddf3>
 8004fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	f7fb fdb2 	bl	8000b28 <__aeabi_dcmpgt>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	f040 80f9 	bne.w	80051bc <_dtoa_r+0x6bc>
 8004fca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fce:	4620      	mov	r0, r4
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	f7fb fd81 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd6:	b118      	cbz	r0, 8004fe0 <_dtoa_r+0x4e0>
 8004fd8:	f018 0f01 	tst.w	r8, #1
 8004fdc:	f040 80ee 	bne.w	80051bc <_dtoa_r+0x6bc>
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4658      	mov	r0, fp
 8004fe4:	f000 fc90 	bl	8005908 <_Bfree>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	7033      	strb	r3, [r6, #0]
 8004fec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004fee:	3701      	adds	r7, #1
 8004ff0:	601f      	str	r7, [r3, #0]
 8004ff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 831d 	beq.w	8005634 <_dtoa_r+0xb34>
 8004ffa:	601e      	str	r6, [r3, #0]
 8004ffc:	e31a      	b.n	8005634 <_dtoa_r+0xb34>
 8004ffe:	07e2      	lsls	r2, r4, #31
 8005000:	d505      	bpl.n	800500e <_dtoa_r+0x50e>
 8005002:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005006:	f7fb faff 	bl	8000608 <__aeabi_dmul>
 800500a:	3601      	adds	r6, #1
 800500c:	2301      	movs	r3, #1
 800500e:	1064      	asrs	r4, r4, #1
 8005010:	3508      	adds	r5, #8
 8005012:	e73f      	b.n	8004e94 <_dtoa_r+0x394>
 8005014:	2602      	movs	r6, #2
 8005016:	e742      	b.n	8004e9e <_dtoa_r+0x39e>
 8005018:	9c07      	ldr	r4, [sp, #28]
 800501a:	9704      	str	r7, [sp, #16]
 800501c:	e761      	b.n	8004ee2 <_dtoa_r+0x3e2>
 800501e:	4b27      	ldr	r3, [pc, #156]	@ (80050bc <_dtoa_r+0x5bc>)
 8005020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005022:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005026:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800502a:	4454      	add	r4, sl
 800502c:	2900      	cmp	r1, #0
 800502e:	d053      	beq.n	80050d8 <_dtoa_r+0x5d8>
 8005030:	4928      	ldr	r1, [pc, #160]	@ (80050d4 <_dtoa_r+0x5d4>)
 8005032:	2000      	movs	r0, #0
 8005034:	f7fb fc12 	bl	800085c <__aeabi_ddiv>
 8005038:	4633      	mov	r3, r6
 800503a:	462a      	mov	r2, r5
 800503c:	f7fb f92c 	bl	8000298 <__aeabi_dsub>
 8005040:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005044:	4656      	mov	r6, sl
 8005046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504a:	f7fb fd8d 	bl	8000b68 <__aeabi_d2iz>
 800504e:	4605      	mov	r5, r0
 8005050:	f7fb fa70 	bl	8000534 <__aeabi_i2d>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800505c:	f7fb f91c 	bl	8000298 <__aeabi_dsub>
 8005060:	3530      	adds	r5, #48	@ 0x30
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800506a:	f806 5b01 	strb.w	r5, [r6], #1
 800506e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005072:	f7fb fd3b 	bl	8000aec <__aeabi_dcmplt>
 8005076:	2800      	cmp	r0, #0
 8005078:	d171      	bne.n	800515e <_dtoa_r+0x65e>
 800507a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800507e:	4911      	ldr	r1, [pc, #68]	@ (80050c4 <_dtoa_r+0x5c4>)
 8005080:	2000      	movs	r0, #0
 8005082:	f7fb f909 	bl	8000298 <__aeabi_dsub>
 8005086:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800508a:	f7fb fd2f 	bl	8000aec <__aeabi_dcmplt>
 800508e:	2800      	cmp	r0, #0
 8005090:	f040 8095 	bne.w	80051be <_dtoa_r+0x6be>
 8005094:	42a6      	cmp	r6, r4
 8005096:	f43f af50 	beq.w	8004f3a <_dtoa_r+0x43a>
 800509a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800509e:	4b0a      	ldr	r3, [pc, #40]	@ (80050c8 <_dtoa_r+0x5c8>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	f7fb fab1 	bl	8000608 <__aeabi_dmul>
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <_dtoa_r+0x5c8>)
 80050a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050ac:	2200      	movs	r2, #0
 80050ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050b2:	f7fb faa9 	bl	8000608 <__aeabi_dmul>
 80050b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ba:	e7c4      	b.n	8005046 <_dtoa_r+0x546>
 80050bc:	08006c20 	.word	0x08006c20
 80050c0:	08006bf8 	.word	0x08006bf8
 80050c4:	3ff00000 	.word	0x3ff00000
 80050c8:	40240000 	.word	0x40240000
 80050cc:	401c0000 	.word	0x401c0000
 80050d0:	40140000 	.word	0x40140000
 80050d4:	3fe00000 	.word	0x3fe00000
 80050d8:	4631      	mov	r1, r6
 80050da:	4628      	mov	r0, r5
 80050dc:	f7fb fa94 	bl	8000608 <__aeabi_dmul>
 80050e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80050e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80050e6:	4656      	mov	r6, sl
 80050e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ec:	f7fb fd3c 	bl	8000b68 <__aeabi_d2iz>
 80050f0:	4605      	mov	r5, r0
 80050f2:	f7fb fa1f 	bl	8000534 <__aeabi_i2d>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050fe:	f7fb f8cb 	bl	8000298 <__aeabi_dsub>
 8005102:	3530      	adds	r5, #48	@ 0x30
 8005104:	f806 5b01 	strb.w	r5, [r6], #1
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	42a6      	cmp	r6, r4
 800510e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	d124      	bne.n	8005162 <_dtoa_r+0x662>
 8005118:	4bac      	ldr	r3, [pc, #688]	@ (80053cc <_dtoa_r+0x8cc>)
 800511a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800511e:	f7fb f8bd 	bl	800029c <__adddf3>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512a:	f7fb fcfd 	bl	8000b28 <__aeabi_dcmpgt>
 800512e:	2800      	cmp	r0, #0
 8005130:	d145      	bne.n	80051be <_dtoa_r+0x6be>
 8005132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005136:	49a5      	ldr	r1, [pc, #660]	@ (80053cc <_dtoa_r+0x8cc>)
 8005138:	2000      	movs	r0, #0
 800513a:	f7fb f8ad 	bl	8000298 <__aeabi_dsub>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005146:	f7fb fcd1 	bl	8000aec <__aeabi_dcmplt>
 800514a:	2800      	cmp	r0, #0
 800514c:	f43f aef5 	beq.w	8004f3a <_dtoa_r+0x43a>
 8005150:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005152:	1e73      	subs	r3, r6, #1
 8005154:	9315      	str	r3, [sp, #84]	@ 0x54
 8005156:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800515a:	2b30      	cmp	r3, #48	@ 0x30
 800515c:	d0f8      	beq.n	8005150 <_dtoa_r+0x650>
 800515e:	9f04      	ldr	r7, [sp, #16]
 8005160:	e73e      	b.n	8004fe0 <_dtoa_r+0x4e0>
 8005162:	4b9b      	ldr	r3, [pc, #620]	@ (80053d0 <_dtoa_r+0x8d0>)
 8005164:	f7fb fa50 	bl	8000608 <__aeabi_dmul>
 8005168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516c:	e7bc      	b.n	80050e8 <_dtoa_r+0x5e8>
 800516e:	d10c      	bne.n	800518a <_dtoa_r+0x68a>
 8005170:	4b98      	ldr	r3, [pc, #608]	@ (80053d4 <_dtoa_r+0x8d4>)
 8005172:	2200      	movs	r2, #0
 8005174:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005178:	f7fb fa46 	bl	8000608 <__aeabi_dmul>
 800517c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005180:	f7fb fcc8 	bl	8000b14 <__aeabi_dcmpge>
 8005184:	2800      	cmp	r0, #0
 8005186:	f000 8157 	beq.w	8005438 <_dtoa_r+0x938>
 800518a:	2400      	movs	r4, #0
 800518c:	4625      	mov	r5, r4
 800518e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005190:	43db      	mvns	r3, r3
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	4656      	mov	r6, sl
 8005196:	2700      	movs	r7, #0
 8005198:	4621      	mov	r1, r4
 800519a:	4658      	mov	r0, fp
 800519c:	f000 fbb4 	bl	8005908 <_Bfree>
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	d0dc      	beq.n	800515e <_dtoa_r+0x65e>
 80051a4:	b12f      	cbz	r7, 80051b2 <_dtoa_r+0x6b2>
 80051a6:	42af      	cmp	r7, r5
 80051a8:	d003      	beq.n	80051b2 <_dtoa_r+0x6b2>
 80051aa:	4639      	mov	r1, r7
 80051ac:	4658      	mov	r0, fp
 80051ae:	f000 fbab 	bl	8005908 <_Bfree>
 80051b2:	4629      	mov	r1, r5
 80051b4:	4658      	mov	r0, fp
 80051b6:	f000 fba7 	bl	8005908 <_Bfree>
 80051ba:	e7d0      	b.n	800515e <_dtoa_r+0x65e>
 80051bc:	9704      	str	r7, [sp, #16]
 80051be:	4633      	mov	r3, r6
 80051c0:	461e      	mov	r6, r3
 80051c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051c6:	2a39      	cmp	r2, #57	@ 0x39
 80051c8:	d107      	bne.n	80051da <_dtoa_r+0x6da>
 80051ca:	459a      	cmp	sl, r3
 80051cc:	d1f8      	bne.n	80051c0 <_dtoa_r+0x6c0>
 80051ce:	9a04      	ldr	r2, [sp, #16]
 80051d0:	3201      	adds	r2, #1
 80051d2:	9204      	str	r2, [sp, #16]
 80051d4:	2230      	movs	r2, #48	@ 0x30
 80051d6:	f88a 2000 	strb.w	r2, [sl]
 80051da:	781a      	ldrb	r2, [r3, #0]
 80051dc:	3201      	adds	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	e7bd      	b.n	800515e <_dtoa_r+0x65e>
 80051e2:	4b7b      	ldr	r3, [pc, #492]	@ (80053d0 <_dtoa_r+0x8d0>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	f7fb fa0f 	bl	8000608 <__aeabi_dmul>
 80051ea:	2200      	movs	r2, #0
 80051ec:	2300      	movs	r3, #0
 80051ee:	4604      	mov	r4, r0
 80051f0:	460d      	mov	r5, r1
 80051f2:	f7fb fc71 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	f43f aebb 	beq.w	8004f72 <_dtoa_r+0x472>
 80051fc:	e6f0      	b.n	8004fe0 <_dtoa_r+0x4e0>
 80051fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005200:	2a00      	cmp	r2, #0
 8005202:	f000 80db 	beq.w	80053bc <_dtoa_r+0x8bc>
 8005206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005208:	2a01      	cmp	r2, #1
 800520a:	f300 80bf 	bgt.w	800538c <_dtoa_r+0x88c>
 800520e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005210:	2a00      	cmp	r2, #0
 8005212:	f000 80b7 	beq.w	8005384 <_dtoa_r+0x884>
 8005216:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800521a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800521c:	4646      	mov	r6, r8
 800521e:	9a08      	ldr	r2, [sp, #32]
 8005220:	2101      	movs	r1, #1
 8005222:	441a      	add	r2, r3
 8005224:	4658      	mov	r0, fp
 8005226:	4498      	add	r8, r3
 8005228:	9208      	str	r2, [sp, #32]
 800522a:	f000 fc21 	bl	8005a70 <__i2b>
 800522e:	4605      	mov	r5, r0
 8005230:	b15e      	cbz	r6, 800524a <_dtoa_r+0x74a>
 8005232:	9b08      	ldr	r3, [sp, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	dd08      	ble.n	800524a <_dtoa_r+0x74a>
 8005238:	42b3      	cmp	r3, r6
 800523a:	9a08      	ldr	r2, [sp, #32]
 800523c:	bfa8      	it	ge
 800523e:	4633      	movge	r3, r6
 8005240:	eba8 0803 	sub.w	r8, r8, r3
 8005244:	1af6      	subs	r6, r6, r3
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	9308      	str	r3, [sp, #32]
 800524a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800524c:	b1f3      	cbz	r3, 800528c <_dtoa_r+0x78c>
 800524e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80b7 	beq.w	80053c4 <_dtoa_r+0x8c4>
 8005256:	b18c      	cbz	r4, 800527c <_dtoa_r+0x77c>
 8005258:	4629      	mov	r1, r5
 800525a:	4622      	mov	r2, r4
 800525c:	4658      	mov	r0, fp
 800525e:	f000 fcc7 	bl	8005bf0 <__pow5mult>
 8005262:	464a      	mov	r2, r9
 8005264:	4601      	mov	r1, r0
 8005266:	4605      	mov	r5, r0
 8005268:	4658      	mov	r0, fp
 800526a:	f000 fc17 	bl	8005a9c <__multiply>
 800526e:	4649      	mov	r1, r9
 8005270:	9004      	str	r0, [sp, #16]
 8005272:	4658      	mov	r0, fp
 8005274:	f000 fb48 	bl	8005908 <_Bfree>
 8005278:	9b04      	ldr	r3, [sp, #16]
 800527a:	4699      	mov	r9, r3
 800527c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800527e:	1b1a      	subs	r2, r3, r4
 8005280:	d004      	beq.n	800528c <_dtoa_r+0x78c>
 8005282:	4649      	mov	r1, r9
 8005284:	4658      	mov	r0, fp
 8005286:	f000 fcb3 	bl	8005bf0 <__pow5mult>
 800528a:	4681      	mov	r9, r0
 800528c:	2101      	movs	r1, #1
 800528e:	4658      	mov	r0, fp
 8005290:	f000 fbee 	bl	8005a70 <__i2b>
 8005294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005296:	4604      	mov	r4, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 81cf 	beq.w	800563c <_dtoa_r+0xb3c>
 800529e:	461a      	mov	r2, r3
 80052a0:	4601      	mov	r1, r0
 80052a2:	4658      	mov	r0, fp
 80052a4:	f000 fca4 	bl	8005bf0 <__pow5mult>
 80052a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	4604      	mov	r4, r0
 80052ae:	f300 8095 	bgt.w	80053dc <_dtoa_r+0x8dc>
 80052b2:	9b02      	ldr	r3, [sp, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f040 8087 	bne.w	80053c8 <_dtoa_r+0x8c8>
 80052ba:	9b03      	ldr	r3, [sp, #12]
 80052bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 8089 	bne.w	80053d8 <_dtoa_r+0x8d8>
 80052c6:	9b03      	ldr	r3, [sp, #12]
 80052c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80052cc:	0d1b      	lsrs	r3, r3, #20
 80052ce:	051b      	lsls	r3, r3, #20
 80052d0:	b12b      	cbz	r3, 80052de <_dtoa_r+0x7de>
 80052d2:	9b08      	ldr	r3, [sp, #32]
 80052d4:	3301      	adds	r3, #1
 80052d6:	9308      	str	r3, [sp, #32]
 80052d8:	f108 0801 	add.w	r8, r8, #1
 80052dc:	2301      	movs	r3, #1
 80052de:	930a      	str	r3, [sp, #40]	@ 0x28
 80052e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 81b0 	beq.w	8005648 <_dtoa_r+0xb48>
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80052ee:	6918      	ldr	r0, [r3, #16]
 80052f0:	f000 fb72 	bl	80059d8 <__hi0bits>
 80052f4:	f1c0 0020 	rsb	r0, r0, #32
 80052f8:	9b08      	ldr	r3, [sp, #32]
 80052fa:	4418      	add	r0, r3
 80052fc:	f010 001f 	ands.w	r0, r0, #31
 8005300:	d077      	beq.n	80053f2 <_dtoa_r+0x8f2>
 8005302:	f1c0 0320 	rsb	r3, r0, #32
 8005306:	2b04      	cmp	r3, #4
 8005308:	dd6b      	ble.n	80053e2 <_dtoa_r+0x8e2>
 800530a:	9b08      	ldr	r3, [sp, #32]
 800530c:	f1c0 001c 	rsb	r0, r0, #28
 8005310:	4403      	add	r3, r0
 8005312:	4480      	add	r8, r0
 8005314:	4406      	add	r6, r0
 8005316:	9308      	str	r3, [sp, #32]
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	dd05      	ble.n	800532a <_dtoa_r+0x82a>
 800531e:	4649      	mov	r1, r9
 8005320:	4642      	mov	r2, r8
 8005322:	4658      	mov	r0, fp
 8005324:	f000 fcbe 	bl	8005ca4 <__lshift>
 8005328:	4681      	mov	r9, r0
 800532a:	9b08      	ldr	r3, [sp, #32]
 800532c:	2b00      	cmp	r3, #0
 800532e:	dd05      	ble.n	800533c <_dtoa_r+0x83c>
 8005330:	4621      	mov	r1, r4
 8005332:	461a      	mov	r2, r3
 8005334:	4658      	mov	r0, fp
 8005336:	f000 fcb5 	bl	8005ca4 <__lshift>
 800533a:	4604      	mov	r4, r0
 800533c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800533e:	2b00      	cmp	r3, #0
 8005340:	d059      	beq.n	80053f6 <_dtoa_r+0x8f6>
 8005342:	4621      	mov	r1, r4
 8005344:	4648      	mov	r0, r9
 8005346:	f000 fd19 	bl	8005d7c <__mcmp>
 800534a:	2800      	cmp	r0, #0
 800534c:	da53      	bge.n	80053f6 <_dtoa_r+0x8f6>
 800534e:	1e7b      	subs	r3, r7, #1
 8005350:	9304      	str	r3, [sp, #16]
 8005352:	4649      	mov	r1, r9
 8005354:	2300      	movs	r3, #0
 8005356:	220a      	movs	r2, #10
 8005358:	4658      	mov	r0, fp
 800535a:	f000 faf7 	bl	800594c <__multadd>
 800535e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005360:	4681      	mov	r9, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8172 	beq.w	800564c <_dtoa_r+0xb4c>
 8005368:	2300      	movs	r3, #0
 800536a:	4629      	mov	r1, r5
 800536c:	220a      	movs	r2, #10
 800536e:	4658      	mov	r0, fp
 8005370:	f000 faec 	bl	800594c <__multadd>
 8005374:	9b00      	ldr	r3, [sp, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	4605      	mov	r5, r0
 800537a:	dc67      	bgt.n	800544c <_dtoa_r+0x94c>
 800537c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800537e:	2b02      	cmp	r3, #2
 8005380:	dc41      	bgt.n	8005406 <_dtoa_r+0x906>
 8005382:	e063      	b.n	800544c <_dtoa_r+0x94c>
 8005384:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005386:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800538a:	e746      	b.n	800521a <_dtoa_r+0x71a>
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	1e5c      	subs	r4, r3, #1
 8005390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005392:	42a3      	cmp	r3, r4
 8005394:	bfbf      	itttt	lt
 8005396:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005398:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800539a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800539c:	1ae3      	sublt	r3, r4, r3
 800539e:	bfb4      	ite	lt
 80053a0:	18d2      	addlt	r2, r2, r3
 80053a2:	1b1c      	subge	r4, r3, r4
 80053a4:	9b07      	ldr	r3, [sp, #28]
 80053a6:	bfbc      	itt	lt
 80053a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80053aa:	2400      	movlt	r4, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bfb5      	itete	lt
 80053b0:	eba8 0603 	sublt.w	r6, r8, r3
 80053b4:	9b07      	ldrge	r3, [sp, #28]
 80053b6:	2300      	movlt	r3, #0
 80053b8:	4646      	movge	r6, r8
 80053ba:	e730      	b.n	800521e <_dtoa_r+0x71e>
 80053bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80053be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80053c0:	4646      	mov	r6, r8
 80053c2:	e735      	b.n	8005230 <_dtoa_r+0x730>
 80053c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053c6:	e75c      	b.n	8005282 <_dtoa_r+0x782>
 80053c8:	2300      	movs	r3, #0
 80053ca:	e788      	b.n	80052de <_dtoa_r+0x7de>
 80053cc:	3fe00000 	.word	0x3fe00000
 80053d0:	40240000 	.word	0x40240000
 80053d4:	40140000 	.word	0x40140000
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	e780      	b.n	80052de <_dtoa_r+0x7de>
 80053dc:	2300      	movs	r3, #0
 80053de:	930a      	str	r3, [sp, #40]	@ 0x28
 80053e0:	e782      	b.n	80052e8 <_dtoa_r+0x7e8>
 80053e2:	d099      	beq.n	8005318 <_dtoa_r+0x818>
 80053e4:	9a08      	ldr	r2, [sp, #32]
 80053e6:	331c      	adds	r3, #28
 80053e8:	441a      	add	r2, r3
 80053ea:	4498      	add	r8, r3
 80053ec:	441e      	add	r6, r3
 80053ee:	9208      	str	r2, [sp, #32]
 80053f0:	e792      	b.n	8005318 <_dtoa_r+0x818>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e7f6      	b.n	80053e4 <_dtoa_r+0x8e4>
 80053f6:	9b07      	ldr	r3, [sp, #28]
 80053f8:	9704      	str	r7, [sp, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dc20      	bgt.n	8005440 <_dtoa_r+0x940>
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005402:	2b02      	cmp	r3, #2
 8005404:	dd1e      	ble.n	8005444 <_dtoa_r+0x944>
 8005406:	9b00      	ldr	r3, [sp, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f aec0 	bne.w	800518e <_dtoa_r+0x68e>
 800540e:	4621      	mov	r1, r4
 8005410:	2205      	movs	r2, #5
 8005412:	4658      	mov	r0, fp
 8005414:	f000 fa9a 	bl	800594c <__multadd>
 8005418:	4601      	mov	r1, r0
 800541a:	4604      	mov	r4, r0
 800541c:	4648      	mov	r0, r9
 800541e:	f000 fcad 	bl	8005d7c <__mcmp>
 8005422:	2800      	cmp	r0, #0
 8005424:	f77f aeb3 	ble.w	800518e <_dtoa_r+0x68e>
 8005428:	4656      	mov	r6, sl
 800542a:	2331      	movs	r3, #49	@ 0x31
 800542c:	f806 3b01 	strb.w	r3, [r6], #1
 8005430:	9b04      	ldr	r3, [sp, #16]
 8005432:	3301      	adds	r3, #1
 8005434:	9304      	str	r3, [sp, #16]
 8005436:	e6ae      	b.n	8005196 <_dtoa_r+0x696>
 8005438:	9c07      	ldr	r4, [sp, #28]
 800543a:	9704      	str	r7, [sp, #16]
 800543c:	4625      	mov	r5, r4
 800543e:	e7f3      	b.n	8005428 <_dtoa_r+0x928>
 8005440:	9b07      	ldr	r3, [sp, #28]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8104 	beq.w	8005654 <_dtoa_r+0xb54>
 800544c:	2e00      	cmp	r6, #0
 800544e:	dd05      	ble.n	800545c <_dtoa_r+0x95c>
 8005450:	4629      	mov	r1, r5
 8005452:	4632      	mov	r2, r6
 8005454:	4658      	mov	r0, fp
 8005456:	f000 fc25 	bl	8005ca4 <__lshift>
 800545a:	4605      	mov	r5, r0
 800545c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d05a      	beq.n	8005518 <_dtoa_r+0xa18>
 8005462:	6869      	ldr	r1, [r5, #4]
 8005464:	4658      	mov	r0, fp
 8005466:	f000 fa0f 	bl	8005888 <_Balloc>
 800546a:	4606      	mov	r6, r0
 800546c:	b928      	cbnz	r0, 800547a <_dtoa_r+0x97a>
 800546e:	4b84      	ldr	r3, [pc, #528]	@ (8005680 <_dtoa_r+0xb80>)
 8005470:	4602      	mov	r2, r0
 8005472:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005476:	f7ff bb5a 	b.w	8004b2e <_dtoa_r+0x2e>
 800547a:	692a      	ldr	r2, [r5, #16]
 800547c:	3202      	adds	r2, #2
 800547e:	0092      	lsls	r2, r2, #2
 8005480:	f105 010c 	add.w	r1, r5, #12
 8005484:	300c      	adds	r0, #12
 8005486:	f000 ffaf 	bl	80063e8 <memcpy>
 800548a:	2201      	movs	r2, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4658      	mov	r0, fp
 8005490:	f000 fc08 	bl	8005ca4 <__lshift>
 8005494:	f10a 0301 	add.w	r3, sl, #1
 8005498:	9307      	str	r3, [sp, #28]
 800549a:	9b00      	ldr	r3, [sp, #0]
 800549c:	4453      	add	r3, sl
 800549e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054a0:	9b02      	ldr	r3, [sp, #8]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	462f      	mov	r7, r5
 80054a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80054aa:	4605      	mov	r5, r0
 80054ac:	9b07      	ldr	r3, [sp, #28]
 80054ae:	4621      	mov	r1, r4
 80054b0:	3b01      	subs	r3, #1
 80054b2:	4648      	mov	r0, r9
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	f7ff fa98 	bl	80049ea <quorem>
 80054ba:	4639      	mov	r1, r7
 80054bc:	9002      	str	r0, [sp, #8]
 80054be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80054c2:	4648      	mov	r0, r9
 80054c4:	f000 fc5a 	bl	8005d7c <__mcmp>
 80054c8:	462a      	mov	r2, r5
 80054ca:	9008      	str	r0, [sp, #32]
 80054cc:	4621      	mov	r1, r4
 80054ce:	4658      	mov	r0, fp
 80054d0:	f000 fc70 	bl	8005db4 <__mdiff>
 80054d4:	68c2      	ldr	r2, [r0, #12]
 80054d6:	4606      	mov	r6, r0
 80054d8:	bb02      	cbnz	r2, 800551c <_dtoa_r+0xa1c>
 80054da:	4601      	mov	r1, r0
 80054dc:	4648      	mov	r0, r9
 80054de:	f000 fc4d 	bl	8005d7c <__mcmp>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4631      	mov	r1, r6
 80054e6:	4658      	mov	r0, fp
 80054e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80054ea:	f000 fa0d 	bl	8005908 <_Bfree>
 80054ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054f2:	9e07      	ldr	r6, [sp, #28]
 80054f4:	ea43 0102 	orr.w	r1, r3, r2
 80054f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054fa:	4319      	orrs	r1, r3
 80054fc:	d110      	bne.n	8005520 <_dtoa_r+0xa20>
 80054fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005502:	d029      	beq.n	8005558 <_dtoa_r+0xa58>
 8005504:	9b08      	ldr	r3, [sp, #32]
 8005506:	2b00      	cmp	r3, #0
 8005508:	dd02      	ble.n	8005510 <_dtoa_r+0xa10>
 800550a:	9b02      	ldr	r3, [sp, #8]
 800550c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005510:	9b00      	ldr	r3, [sp, #0]
 8005512:	f883 8000 	strb.w	r8, [r3]
 8005516:	e63f      	b.n	8005198 <_dtoa_r+0x698>
 8005518:	4628      	mov	r0, r5
 800551a:	e7bb      	b.n	8005494 <_dtoa_r+0x994>
 800551c:	2201      	movs	r2, #1
 800551e:	e7e1      	b.n	80054e4 <_dtoa_r+0x9e4>
 8005520:	9b08      	ldr	r3, [sp, #32]
 8005522:	2b00      	cmp	r3, #0
 8005524:	db04      	blt.n	8005530 <_dtoa_r+0xa30>
 8005526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005528:	430b      	orrs	r3, r1
 800552a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800552c:	430b      	orrs	r3, r1
 800552e:	d120      	bne.n	8005572 <_dtoa_r+0xa72>
 8005530:	2a00      	cmp	r2, #0
 8005532:	dded      	ble.n	8005510 <_dtoa_r+0xa10>
 8005534:	4649      	mov	r1, r9
 8005536:	2201      	movs	r2, #1
 8005538:	4658      	mov	r0, fp
 800553a:	f000 fbb3 	bl	8005ca4 <__lshift>
 800553e:	4621      	mov	r1, r4
 8005540:	4681      	mov	r9, r0
 8005542:	f000 fc1b 	bl	8005d7c <__mcmp>
 8005546:	2800      	cmp	r0, #0
 8005548:	dc03      	bgt.n	8005552 <_dtoa_r+0xa52>
 800554a:	d1e1      	bne.n	8005510 <_dtoa_r+0xa10>
 800554c:	f018 0f01 	tst.w	r8, #1
 8005550:	d0de      	beq.n	8005510 <_dtoa_r+0xa10>
 8005552:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005556:	d1d8      	bne.n	800550a <_dtoa_r+0xa0a>
 8005558:	9a00      	ldr	r2, [sp, #0]
 800555a:	2339      	movs	r3, #57	@ 0x39
 800555c:	7013      	strb	r3, [r2, #0]
 800555e:	4633      	mov	r3, r6
 8005560:	461e      	mov	r6, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005568:	2a39      	cmp	r2, #57	@ 0x39
 800556a:	d052      	beq.n	8005612 <_dtoa_r+0xb12>
 800556c:	3201      	adds	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e612      	b.n	8005198 <_dtoa_r+0x698>
 8005572:	2a00      	cmp	r2, #0
 8005574:	dd07      	ble.n	8005586 <_dtoa_r+0xa86>
 8005576:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800557a:	d0ed      	beq.n	8005558 <_dtoa_r+0xa58>
 800557c:	9a00      	ldr	r2, [sp, #0]
 800557e:	f108 0301 	add.w	r3, r8, #1
 8005582:	7013      	strb	r3, [r2, #0]
 8005584:	e608      	b.n	8005198 <_dtoa_r+0x698>
 8005586:	9b07      	ldr	r3, [sp, #28]
 8005588:	9a07      	ldr	r2, [sp, #28]
 800558a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800558e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005590:	4293      	cmp	r3, r2
 8005592:	d028      	beq.n	80055e6 <_dtoa_r+0xae6>
 8005594:	4649      	mov	r1, r9
 8005596:	2300      	movs	r3, #0
 8005598:	220a      	movs	r2, #10
 800559a:	4658      	mov	r0, fp
 800559c:	f000 f9d6 	bl	800594c <__multadd>
 80055a0:	42af      	cmp	r7, r5
 80055a2:	4681      	mov	r9, r0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	f04f 020a 	mov.w	r2, #10
 80055ac:	4639      	mov	r1, r7
 80055ae:	4658      	mov	r0, fp
 80055b0:	d107      	bne.n	80055c2 <_dtoa_r+0xac2>
 80055b2:	f000 f9cb 	bl	800594c <__multadd>
 80055b6:	4607      	mov	r7, r0
 80055b8:	4605      	mov	r5, r0
 80055ba:	9b07      	ldr	r3, [sp, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	9307      	str	r3, [sp, #28]
 80055c0:	e774      	b.n	80054ac <_dtoa_r+0x9ac>
 80055c2:	f000 f9c3 	bl	800594c <__multadd>
 80055c6:	4629      	mov	r1, r5
 80055c8:	4607      	mov	r7, r0
 80055ca:	2300      	movs	r3, #0
 80055cc:	220a      	movs	r2, #10
 80055ce:	4658      	mov	r0, fp
 80055d0:	f000 f9bc 	bl	800594c <__multadd>
 80055d4:	4605      	mov	r5, r0
 80055d6:	e7f0      	b.n	80055ba <_dtoa_r+0xaba>
 80055d8:	9b00      	ldr	r3, [sp, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bfcc      	ite	gt
 80055de:	461e      	movgt	r6, r3
 80055e0:	2601      	movle	r6, #1
 80055e2:	4456      	add	r6, sl
 80055e4:	2700      	movs	r7, #0
 80055e6:	4649      	mov	r1, r9
 80055e8:	2201      	movs	r2, #1
 80055ea:	4658      	mov	r0, fp
 80055ec:	f000 fb5a 	bl	8005ca4 <__lshift>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4681      	mov	r9, r0
 80055f4:	f000 fbc2 	bl	8005d7c <__mcmp>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	dcb0      	bgt.n	800555e <_dtoa_r+0xa5e>
 80055fc:	d102      	bne.n	8005604 <_dtoa_r+0xb04>
 80055fe:	f018 0f01 	tst.w	r8, #1
 8005602:	d1ac      	bne.n	800555e <_dtoa_r+0xa5e>
 8005604:	4633      	mov	r3, r6
 8005606:	461e      	mov	r6, r3
 8005608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800560c:	2a30      	cmp	r2, #48	@ 0x30
 800560e:	d0fa      	beq.n	8005606 <_dtoa_r+0xb06>
 8005610:	e5c2      	b.n	8005198 <_dtoa_r+0x698>
 8005612:	459a      	cmp	sl, r3
 8005614:	d1a4      	bne.n	8005560 <_dtoa_r+0xa60>
 8005616:	9b04      	ldr	r3, [sp, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	2331      	movs	r3, #49	@ 0x31
 800561e:	f88a 3000 	strb.w	r3, [sl]
 8005622:	e5b9      	b.n	8005198 <_dtoa_r+0x698>
 8005624:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005626:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005684 <_dtoa_r+0xb84>
 800562a:	b11b      	cbz	r3, 8005634 <_dtoa_r+0xb34>
 800562c:	f10a 0308 	add.w	r3, sl, #8
 8005630:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	4650      	mov	r0, sl
 8005636:	b019      	add	sp, #100	@ 0x64
 8005638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800563e:	2b01      	cmp	r3, #1
 8005640:	f77f ae37 	ble.w	80052b2 <_dtoa_r+0x7b2>
 8005644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005646:	930a      	str	r3, [sp, #40]	@ 0x28
 8005648:	2001      	movs	r0, #1
 800564a:	e655      	b.n	80052f8 <_dtoa_r+0x7f8>
 800564c:	9b00      	ldr	r3, [sp, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f77f aed6 	ble.w	8005400 <_dtoa_r+0x900>
 8005654:	4656      	mov	r6, sl
 8005656:	4621      	mov	r1, r4
 8005658:	4648      	mov	r0, r9
 800565a:	f7ff f9c6 	bl	80049ea <quorem>
 800565e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005662:	f806 8b01 	strb.w	r8, [r6], #1
 8005666:	9b00      	ldr	r3, [sp, #0]
 8005668:	eba6 020a 	sub.w	r2, r6, sl
 800566c:	4293      	cmp	r3, r2
 800566e:	ddb3      	ble.n	80055d8 <_dtoa_r+0xad8>
 8005670:	4649      	mov	r1, r9
 8005672:	2300      	movs	r3, #0
 8005674:	220a      	movs	r2, #10
 8005676:	4658      	mov	r0, fp
 8005678:	f000 f968 	bl	800594c <__multadd>
 800567c:	4681      	mov	r9, r0
 800567e:	e7ea      	b.n	8005656 <_dtoa_r+0xb56>
 8005680:	08006b7c 	.word	0x08006b7c
 8005684:	08006b00 	.word	0x08006b00

08005688 <_free_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	4605      	mov	r5, r0
 800568c:	2900      	cmp	r1, #0
 800568e:	d041      	beq.n	8005714 <_free_r+0x8c>
 8005690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005694:	1f0c      	subs	r4, r1, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	bfb8      	it	lt
 800569a:	18e4      	addlt	r4, r4, r3
 800569c:	f000 f8e8 	bl	8005870 <__malloc_lock>
 80056a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <_free_r+0x90>)
 80056a2:	6813      	ldr	r3, [r2, #0]
 80056a4:	b933      	cbnz	r3, 80056b4 <_free_r+0x2c>
 80056a6:	6063      	str	r3, [r4, #4]
 80056a8:	6014      	str	r4, [r2, #0]
 80056aa:	4628      	mov	r0, r5
 80056ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b0:	f000 b8e4 	b.w	800587c <__malloc_unlock>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d908      	bls.n	80056ca <_free_r+0x42>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	1821      	adds	r1, r4, r0
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf01      	itttt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	1809      	addeq	r1, r1, r0
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	e7ed      	b.n	80056a6 <_free_r+0x1e>
 80056ca:	461a      	mov	r2, r3
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	b10b      	cbz	r3, 80056d4 <_free_r+0x4c>
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	d9fa      	bls.n	80056ca <_free_r+0x42>
 80056d4:	6811      	ldr	r1, [r2, #0]
 80056d6:	1850      	adds	r0, r2, r1
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d10b      	bne.n	80056f4 <_free_r+0x6c>
 80056dc:	6820      	ldr	r0, [r4, #0]
 80056de:	4401      	add	r1, r0
 80056e0:	1850      	adds	r0, r2, r1
 80056e2:	4283      	cmp	r3, r0
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	d1e0      	bne.n	80056aa <_free_r+0x22>
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6053      	str	r3, [r2, #4]
 80056ee:	4408      	add	r0, r1
 80056f0:	6010      	str	r0, [r2, #0]
 80056f2:	e7da      	b.n	80056aa <_free_r+0x22>
 80056f4:	d902      	bls.n	80056fc <_free_r+0x74>
 80056f6:	230c      	movs	r3, #12
 80056f8:	602b      	str	r3, [r5, #0]
 80056fa:	e7d6      	b.n	80056aa <_free_r+0x22>
 80056fc:	6820      	ldr	r0, [r4, #0]
 80056fe:	1821      	adds	r1, r4, r0
 8005700:	428b      	cmp	r3, r1
 8005702:	bf04      	itt	eq
 8005704:	6819      	ldreq	r1, [r3, #0]
 8005706:	685b      	ldreq	r3, [r3, #4]
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	bf04      	itt	eq
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6054      	str	r4, [r2, #4]
 8005712:	e7ca      	b.n	80056aa <_free_r+0x22>
 8005714:	bd38      	pop	{r3, r4, r5, pc}
 8005716:	bf00      	nop
 8005718:	20000430 	.word	0x20000430

0800571c <malloc>:
 800571c:	4b02      	ldr	r3, [pc, #8]	@ (8005728 <malloc+0xc>)
 800571e:	4601      	mov	r1, r0
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	f000 b825 	b.w	8005770 <_malloc_r>
 8005726:	bf00      	nop
 8005728:	20000018 	.word	0x20000018

0800572c <sbrk_aligned>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4e0f      	ldr	r6, [pc, #60]	@ (800576c <sbrk_aligned+0x40>)
 8005730:	460c      	mov	r4, r1
 8005732:	6831      	ldr	r1, [r6, #0]
 8005734:	4605      	mov	r5, r0
 8005736:	b911      	cbnz	r1, 800573e <sbrk_aligned+0x12>
 8005738:	f000 fe46 	bl	80063c8 <_sbrk_r>
 800573c:	6030      	str	r0, [r6, #0]
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 fe41 	bl	80063c8 <_sbrk_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d103      	bne.n	8005752 <sbrk_aligned+0x26>
 800574a:	f04f 34ff 	mov.w	r4, #4294967295
 800574e:	4620      	mov	r0, r4
 8005750:	bd70      	pop	{r4, r5, r6, pc}
 8005752:	1cc4      	adds	r4, r0, #3
 8005754:	f024 0403 	bic.w	r4, r4, #3
 8005758:	42a0      	cmp	r0, r4
 800575a:	d0f8      	beq.n	800574e <sbrk_aligned+0x22>
 800575c:	1a21      	subs	r1, r4, r0
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fe32 	bl	80063c8 <_sbrk_r>
 8005764:	3001      	adds	r0, #1
 8005766:	d1f2      	bne.n	800574e <sbrk_aligned+0x22>
 8005768:	e7ef      	b.n	800574a <sbrk_aligned+0x1e>
 800576a:	bf00      	nop
 800576c:	2000042c 	.word	0x2000042c

08005770 <_malloc_r>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	1ccd      	adds	r5, r1, #3
 8005776:	f025 0503 	bic.w	r5, r5, #3
 800577a:	3508      	adds	r5, #8
 800577c:	2d0c      	cmp	r5, #12
 800577e:	bf38      	it	cc
 8005780:	250c      	movcc	r5, #12
 8005782:	2d00      	cmp	r5, #0
 8005784:	4606      	mov	r6, r0
 8005786:	db01      	blt.n	800578c <_malloc_r+0x1c>
 8005788:	42a9      	cmp	r1, r5
 800578a:	d904      	bls.n	8005796 <_malloc_r+0x26>
 800578c:	230c      	movs	r3, #12
 800578e:	6033      	str	r3, [r6, #0]
 8005790:	2000      	movs	r0, #0
 8005792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800586c <_malloc_r+0xfc>
 800579a:	f000 f869 	bl	8005870 <__malloc_lock>
 800579e:	f8d8 3000 	ldr.w	r3, [r8]
 80057a2:	461c      	mov	r4, r3
 80057a4:	bb44      	cbnz	r4, 80057f8 <_malloc_r+0x88>
 80057a6:	4629      	mov	r1, r5
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff ffbf 	bl	800572c <sbrk_aligned>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	4604      	mov	r4, r0
 80057b2:	d158      	bne.n	8005866 <_malloc_r+0xf6>
 80057b4:	f8d8 4000 	ldr.w	r4, [r8]
 80057b8:	4627      	mov	r7, r4
 80057ba:	2f00      	cmp	r7, #0
 80057bc:	d143      	bne.n	8005846 <_malloc_r+0xd6>
 80057be:	2c00      	cmp	r4, #0
 80057c0:	d04b      	beq.n	800585a <_malloc_r+0xea>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	4639      	mov	r1, r7
 80057c6:	4630      	mov	r0, r6
 80057c8:	eb04 0903 	add.w	r9, r4, r3
 80057cc:	f000 fdfc 	bl	80063c8 <_sbrk_r>
 80057d0:	4581      	cmp	r9, r0
 80057d2:	d142      	bne.n	800585a <_malloc_r+0xea>
 80057d4:	6821      	ldr	r1, [r4, #0]
 80057d6:	1a6d      	subs	r5, r5, r1
 80057d8:	4629      	mov	r1, r5
 80057da:	4630      	mov	r0, r6
 80057dc:	f7ff ffa6 	bl	800572c <sbrk_aligned>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d03a      	beq.n	800585a <_malloc_r+0xea>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	442b      	add	r3, r5
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	f8d8 3000 	ldr.w	r3, [r8]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	bb62      	cbnz	r2, 800584c <_malloc_r+0xdc>
 80057f2:	f8c8 7000 	str.w	r7, [r8]
 80057f6:	e00f      	b.n	8005818 <_malloc_r+0xa8>
 80057f8:	6822      	ldr	r2, [r4, #0]
 80057fa:	1b52      	subs	r2, r2, r5
 80057fc:	d420      	bmi.n	8005840 <_malloc_r+0xd0>
 80057fe:	2a0b      	cmp	r2, #11
 8005800:	d917      	bls.n	8005832 <_malloc_r+0xc2>
 8005802:	1961      	adds	r1, r4, r5
 8005804:	42a3      	cmp	r3, r4
 8005806:	6025      	str	r5, [r4, #0]
 8005808:	bf18      	it	ne
 800580a:	6059      	strne	r1, [r3, #4]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	bf08      	it	eq
 8005810:	f8c8 1000 	streq.w	r1, [r8]
 8005814:	5162      	str	r2, [r4, r5]
 8005816:	604b      	str	r3, [r1, #4]
 8005818:	4630      	mov	r0, r6
 800581a:	f000 f82f 	bl	800587c <__malloc_unlock>
 800581e:	f104 000b 	add.w	r0, r4, #11
 8005822:	1d23      	adds	r3, r4, #4
 8005824:	f020 0007 	bic.w	r0, r0, #7
 8005828:	1ac2      	subs	r2, r0, r3
 800582a:	bf1c      	itt	ne
 800582c:	1a1b      	subne	r3, r3, r0
 800582e:	50a3      	strne	r3, [r4, r2]
 8005830:	e7af      	b.n	8005792 <_malloc_r+0x22>
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	42a3      	cmp	r3, r4
 8005836:	bf0c      	ite	eq
 8005838:	f8c8 2000 	streq.w	r2, [r8]
 800583c:	605a      	strne	r2, [r3, #4]
 800583e:	e7eb      	b.n	8005818 <_malloc_r+0xa8>
 8005840:	4623      	mov	r3, r4
 8005842:	6864      	ldr	r4, [r4, #4]
 8005844:	e7ae      	b.n	80057a4 <_malloc_r+0x34>
 8005846:	463c      	mov	r4, r7
 8005848:	687f      	ldr	r7, [r7, #4]
 800584a:	e7b6      	b.n	80057ba <_malloc_r+0x4a>
 800584c:	461a      	mov	r2, r3
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	42a3      	cmp	r3, r4
 8005852:	d1fb      	bne.n	800584c <_malloc_r+0xdc>
 8005854:	2300      	movs	r3, #0
 8005856:	6053      	str	r3, [r2, #4]
 8005858:	e7de      	b.n	8005818 <_malloc_r+0xa8>
 800585a:	230c      	movs	r3, #12
 800585c:	6033      	str	r3, [r6, #0]
 800585e:	4630      	mov	r0, r6
 8005860:	f000 f80c 	bl	800587c <__malloc_unlock>
 8005864:	e794      	b.n	8005790 <_malloc_r+0x20>
 8005866:	6005      	str	r5, [r0, #0]
 8005868:	e7d6      	b.n	8005818 <_malloc_r+0xa8>
 800586a:	bf00      	nop
 800586c:	20000430 	.word	0x20000430

08005870 <__malloc_lock>:
 8005870:	4801      	ldr	r0, [pc, #4]	@ (8005878 <__malloc_lock+0x8>)
 8005872:	f7ff b8b8 	b.w	80049e6 <__retarget_lock_acquire_recursive>
 8005876:	bf00      	nop
 8005878:	20000428 	.word	0x20000428

0800587c <__malloc_unlock>:
 800587c:	4801      	ldr	r0, [pc, #4]	@ (8005884 <__malloc_unlock+0x8>)
 800587e:	f7ff b8b3 	b.w	80049e8 <__retarget_lock_release_recursive>
 8005882:	bf00      	nop
 8005884:	20000428 	.word	0x20000428

08005888 <_Balloc>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	69c6      	ldr	r6, [r0, #28]
 800588c:	4604      	mov	r4, r0
 800588e:	460d      	mov	r5, r1
 8005890:	b976      	cbnz	r6, 80058b0 <_Balloc+0x28>
 8005892:	2010      	movs	r0, #16
 8005894:	f7ff ff42 	bl	800571c <malloc>
 8005898:	4602      	mov	r2, r0
 800589a:	61e0      	str	r0, [r4, #28]
 800589c:	b920      	cbnz	r0, 80058a8 <_Balloc+0x20>
 800589e:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <_Balloc+0x78>)
 80058a0:	4818      	ldr	r0, [pc, #96]	@ (8005904 <_Balloc+0x7c>)
 80058a2:	216b      	movs	r1, #107	@ 0x6b
 80058a4:	f000 fdae 	bl	8006404 <__assert_func>
 80058a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058ac:	6006      	str	r6, [r0, #0]
 80058ae:	60c6      	str	r6, [r0, #12]
 80058b0:	69e6      	ldr	r6, [r4, #28]
 80058b2:	68f3      	ldr	r3, [r6, #12]
 80058b4:	b183      	cbz	r3, 80058d8 <_Balloc+0x50>
 80058b6:	69e3      	ldr	r3, [r4, #28]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058be:	b9b8      	cbnz	r0, 80058f0 <_Balloc+0x68>
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f605 	lsl.w	r6, r1, r5
 80058c6:	1d72      	adds	r2, r6, #5
 80058c8:	0092      	lsls	r2, r2, #2
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fdb8 	bl	8006440 <_calloc_r>
 80058d0:	b160      	cbz	r0, 80058ec <_Balloc+0x64>
 80058d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058d6:	e00e      	b.n	80058f6 <_Balloc+0x6e>
 80058d8:	2221      	movs	r2, #33	@ 0x21
 80058da:	2104      	movs	r1, #4
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fdaf 	bl	8006440 <_calloc_r>
 80058e2:	69e3      	ldr	r3, [r4, #28]
 80058e4:	60f0      	str	r0, [r6, #12]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e4      	bne.n	80058b6 <_Balloc+0x2e>
 80058ec:	2000      	movs	r0, #0
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	6802      	ldr	r2, [r0, #0]
 80058f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058f6:	2300      	movs	r3, #0
 80058f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058fc:	e7f7      	b.n	80058ee <_Balloc+0x66>
 80058fe:	bf00      	nop
 8005900:	08006b0d 	.word	0x08006b0d
 8005904:	08006b8d 	.word	0x08006b8d

08005908 <_Bfree>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	69c6      	ldr	r6, [r0, #28]
 800590c:	4605      	mov	r5, r0
 800590e:	460c      	mov	r4, r1
 8005910:	b976      	cbnz	r6, 8005930 <_Bfree+0x28>
 8005912:	2010      	movs	r0, #16
 8005914:	f7ff ff02 	bl	800571c <malloc>
 8005918:	4602      	mov	r2, r0
 800591a:	61e8      	str	r0, [r5, #28]
 800591c:	b920      	cbnz	r0, 8005928 <_Bfree+0x20>
 800591e:	4b09      	ldr	r3, [pc, #36]	@ (8005944 <_Bfree+0x3c>)
 8005920:	4809      	ldr	r0, [pc, #36]	@ (8005948 <_Bfree+0x40>)
 8005922:	218f      	movs	r1, #143	@ 0x8f
 8005924:	f000 fd6e 	bl	8006404 <__assert_func>
 8005928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800592c:	6006      	str	r6, [r0, #0]
 800592e:	60c6      	str	r6, [r0, #12]
 8005930:	b13c      	cbz	r4, 8005942 <_Bfree+0x3a>
 8005932:	69eb      	ldr	r3, [r5, #28]
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800593c:	6021      	str	r1, [r4, #0]
 800593e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	08006b0d 	.word	0x08006b0d
 8005948:	08006b8d 	.word	0x08006b8d

0800594c <__multadd>:
 800594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	690d      	ldr	r5, [r1, #16]
 8005952:	4607      	mov	r7, r0
 8005954:	460c      	mov	r4, r1
 8005956:	461e      	mov	r6, r3
 8005958:	f101 0c14 	add.w	ip, r1, #20
 800595c:	2000      	movs	r0, #0
 800595e:	f8dc 3000 	ldr.w	r3, [ip]
 8005962:	b299      	uxth	r1, r3
 8005964:	fb02 6101 	mla	r1, r2, r1, r6
 8005968:	0c1e      	lsrs	r6, r3, #16
 800596a:	0c0b      	lsrs	r3, r1, #16
 800596c:	fb02 3306 	mla	r3, r2, r6, r3
 8005970:	b289      	uxth	r1, r1
 8005972:	3001      	adds	r0, #1
 8005974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005978:	4285      	cmp	r5, r0
 800597a:	f84c 1b04 	str.w	r1, [ip], #4
 800597e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005982:	dcec      	bgt.n	800595e <__multadd+0x12>
 8005984:	b30e      	cbz	r6, 80059ca <__multadd+0x7e>
 8005986:	68a3      	ldr	r3, [r4, #8]
 8005988:	42ab      	cmp	r3, r5
 800598a:	dc19      	bgt.n	80059c0 <__multadd+0x74>
 800598c:	6861      	ldr	r1, [r4, #4]
 800598e:	4638      	mov	r0, r7
 8005990:	3101      	adds	r1, #1
 8005992:	f7ff ff79 	bl	8005888 <_Balloc>
 8005996:	4680      	mov	r8, r0
 8005998:	b928      	cbnz	r0, 80059a6 <__multadd+0x5a>
 800599a:	4602      	mov	r2, r0
 800599c:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <__multadd+0x84>)
 800599e:	480d      	ldr	r0, [pc, #52]	@ (80059d4 <__multadd+0x88>)
 80059a0:	21ba      	movs	r1, #186	@ 0xba
 80059a2:	f000 fd2f 	bl	8006404 <__assert_func>
 80059a6:	6922      	ldr	r2, [r4, #16]
 80059a8:	3202      	adds	r2, #2
 80059aa:	f104 010c 	add.w	r1, r4, #12
 80059ae:	0092      	lsls	r2, r2, #2
 80059b0:	300c      	adds	r0, #12
 80059b2:	f000 fd19 	bl	80063e8 <memcpy>
 80059b6:	4621      	mov	r1, r4
 80059b8:	4638      	mov	r0, r7
 80059ba:	f7ff ffa5 	bl	8005908 <_Bfree>
 80059be:	4644      	mov	r4, r8
 80059c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059c4:	3501      	adds	r5, #1
 80059c6:	615e      	str	r6, [r3, #20]
 80059c8:	6125      	str	r5, [r4, #16]
 80059ca:	4620      	mov	r0, r4
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	08006b7c 	.word	0x08006b7c
 80059d4:	08006b8d 	.word	0x08006b8d

080059d8 <__hi0bits>:
 80059d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80059dc:	4603      	mov	r3, r0
 80059de:	bf36      	itet	cc
 80059e0:	0403      	lslcc	r3, r0, #16
 80059e2:	2000      	movcs	r0, #0
 80059e4:	2010      	movcc	r0, #16
 80059e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059ea:	bf3c      	itt	cc
 80059ec:	021b      	lslcc	r3, r3, #8
 80059ee:	3008      	addcc	r0, #8
 80059f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059f4:	bf3c      	itt	cc
 80059f6:	011b      	lslcc	r3, r3, #4
 80059f8:	3004      	addcc	r0, #4
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fe:	bf3c      	itt	cc
 8005a00:	009b      	lslcc	r3, r3, #2
 8005a02:	3002      	addcc	r0, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db05      	blt.n	8005a14 <__hi0bits+0x3c>
 8005a08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a0c:	f100 0001 	add.w	r0, r0, #1
 8005a10:	bf08      	it	eq
 8005a12:	2020      	moveq	r0, #32
 8005a14:	4770      	bx	lr

08005a16 <__lo0bits>:
 8005a16:	6803      	ldr	r3, [r0, #0]
 8005a18:	4602      	mov	r2, r0
 8005a1a:	f013 0007 	ands.w	r0, r3, #7
 8005a1e:	d00b      	beq.n	8005a38 <__lo0bits+0x22>
 8005a20:	07d9      	lsls	r1, r3, #31
 8005a22:	d421      	bmi.n	8005a68 <__lo0bits+0x52>
 8005a24:	0798      	lsls	r0, r3, #30
 8005a26:	bf49      	itett	mi
 8005a28:	085b      	lsrmi	r3, r3, #1
 8005a2a:	089b      	lsrpl	r3, r3, #2
 8005a2c:	2001      	movmi	r0, #1
 8005a2e:	6013      	strmi	r3, [r2, #0]
 8005a30:	bf5c      	itt	pl
 8005a32:	6013      	strpl	r3, [r2, #0]
 8005a34:	2002      	movpl	r0, #2
 8005a36:	4770      	bx	lr
 8005a38:	b299      	uxth	r1, r3
 8005a3a:	b909      	cbnz	r1, 8005a40 <__lo0bits+0x2a>
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	2010      	movs	r0, #16
 8005a40:	b2d9      	uxtb	r1, r3
 8005a42:	b909      	cbnz	r1, 8005a48 <__lo0bits+0x32>
 8005a44:	3008      	adds	r0, #8
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	0719      	lsls	r1, r3, #28
 8005a4a:	bf04      	itt	eq
 8005a4c:	091b      	lsreq	r3, r3, #4
 8005a4e:	3004      	addeq	r0, #4
 8005a50:	0799      	lsls	r1, r3, #30
 8005a52:	bf04      	itt	eq
 8005a54:	089b      	lsreq	r3, r3, #2
 8005a56:	3002      	addeq	r0, #2
 8005a58:	07d9      	lsls	r1, r3, #31
 8005a5a:	d403      	bmi.n	8005a64 <__lo0bits+0x4e>
 8005a5c:	085b      	lsrs	r3, r3, #1
 8005a5e:	f100 0001 	add.w	r0, r0, #1
 8005a62:	d003      	beq.n	8005a6c <__lo0bits+0x56>
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4770      	bx	lr
 8005a68:	2000      	movs	r0, #0
 8005a6a:	4770      	bx	lr
 8005a6c:	2020      	movs	r0, #32
 8005a6e:	4770      	bx	lr

08005a70 <__i2b>:
 8005a70:	b510      	push	{r4, lr}
 8005a72:	460c      	mov	r4, r1
 8005a74:	2101      	movs	r1, #1
 8005a76:	f7ff ff07 	bl	8005888 <_Balloc>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	b928      	cbnz	r0, 8005a8a <__i2b+0x1a>
 8005a7e:	4b05      	ldr	r3, [pc, #20]	@ (8005a94 <__i2b+0x24>)
 8005a80:	4805      	ldr	r0, [pc, #20]	@ (8005a98 <__i2b+0x28>)
 8005a82:	f240 1145 	movw	r1, #325	@ 0x145
 8005a86:	f000 fcbd 	bl	8006404 <__assert_func>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	6144      	str	r4, [r0, #20]
 8005a8e:	6103      	str	r3, [r0, #16]
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	bf00      	nop
 8005a94:	08006b7c 	.word	0x08006b7c
 8005a98:	08006b8d 	.word	0x08006b8d

08005a9c <__multiply>:
 8005a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	690a      	ldr	r2, [r1, #16]
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	bfa8      	it	ge
 8005aaa:	4623      	movge	r3, r4
 8005aac:	460f      	mov	r7, r1
 8005aae:	bfa4      	itt	ge
 8005ab0:	460c      	movge	r4, r1
 8005ab2:	461f      	movge	r7, r3
 8005ab4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ab8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005abc:	68a3      	ldr	r3, [r4, #8]
 8005abe:	6861      	ldr	r1, [r4, #4]
 8005ac0:	eb0a 0609 	add.w	r6, sl, r9
 8005ac4:	42b3      	cmp	r3, r6
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	bfb8      	it	lt
 8005aca:	3101      	addlt	r1, #1
 8005acc:	f7ff fedc 	bl	8005888 <_Balloc>
 8005ad0:	b930      	cbnz	r0, 8005ae0 <__multiply+0x44>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b44      	ldr	r3, [pc, #272]	@ (8005be8 <__multiply+0x14c>)
 8005ad6:	4845      	ldr	r0, [pc, #276]	@ (8005bec <__multiply+0x150>)
 8005ad8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005adc:	f000 fc92 	bl	8006404 <__assert_func>
 8005ae0:	f100 0514 	add.w	r5, r0, #20
 8005ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ae8:	462b      	mov	r3, r5
 8005aea:	2200      	movs	r2, #0
 8005aec:	4543      	cmp	r3, r8
 8005aee:	d321      	bcc.n	8005b34 <__multiply+0x98>
 8005af0:	f107 0114 	add.w	r1, r7, #20
 8005af4:	f104 0214 	add.w	r2, r4, #20
 8005af8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005afc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005b00:	9302      	str	r3, [sp, #8]
 8005b02:	1b13      	subs	r3, r2, r4
 8005b04:	3b15      	subs	r3, #21
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	f104 0715 	add.w	r7, r4, #21
 8005b10:	42ba      	cmp	r2, r7
 8005b12:	bf38      	it	cc
 8005b14:	2304      	movcc	r3, #4
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	9b02      	ldr	r3, [sp, #8]
 8005b1a:	9103      	str	r1, [sp, #12]
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	d80c      	bhi.n	8005b3a <__multiply+0x9e>
 8005b20:	2e00      	cmp	r6, #0
 8005b22:	dd03      	ble.n	8005b2c <__multiply+0x90>
 8005b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d05b      	beq.n	8005be4 <__multiply+0x148>
 8005b2c:	6106      	str	r6, [r0, #16]
 8005b2e:	b005      	add	sp, #20
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	f843 2b04 	str.w	r2, [r3], #4
 8005b38:	e7d8      	b.n	8005aec <__multiply+0x50>
 8005b3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8005b3e:	f1ba 0f00 	cmp.w	sl, #0
 8005b42:	d024      	beq.n	8005b8e <__multiply+0xf2>
 8005b44:	f104 0e14 	add.w	lr, r4, #20
 8005b48:	46a9      	mov	r9, r5
 8005b4a:	f04f 0c00 	mov.w	ip, #0
 8005b4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b52:	f8d9 3000 	ldr.w	r3, [r9]
 8005b56:	fa1f fb87 	uxth.w	fp, r7
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005b64:	f8d9 7000 	ldr.w	r7, [r9]
 8005b68:	4463      	add	r3, ip
 8005b6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8005b72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b7c:	4572      	cmp	r2, lr
 8005b7e:	f849 3b04 	str.w	r3, [r9], #4
 8005b82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b86:	d8e2      	bhi.n	8005b4e <__multiply+0xb2>
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	f845 c003 	str.w	ip, [r5, r3]
 8005b8e:	9b03      	ldr	r3, [sp, #12]
 8005b90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b94:	3104      	adds	r1, #4
 8005b96:	f1b9 0f00 	cmp.w	r9, #0
 8005b9a:	d021      	beq.n	8005be0 <__multiply+0x144>
 8005b9c:	682b      	ldr	r3, [r5, #0]
 8005b9e:	f104 0c14 	add.w	ip, r4, #20
 8005ba2:	46ae      	mov	lr, r5
 8005ba4:	f04f 0a00 	mov.w	sl, #0
 8005ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8005bac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005bb0:	fb09 770b 	mla	r7, r9, fp, r7
 8005bb4:	4457      	add	r7, sl
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005bbc:	f84e 3b04 	str.w	r3, [lr], #4
 8005bc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bc8:	f8be 3000 	ldrh.w	r3, [lr]
 8005bcc:	fb09 330a 	mla	r3, r9, sl, r3
 8005bd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005bd4:	4562      	cmp	r2, ip
 8005bd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bda:	d8e5      	bhi.n	8005ba8 <__multiply+0x10c>
 8005bdc:	9f01      	ldr	r7, [sp, #4]
 8005bde:	51eb      	str	r3, [r5, r7]
 8005be0:	3504      	adds	r5, #4
 8005be2:	e799      	b.n	8005b18 <__multiply+0x7c>
 8005be4:	3e01      	subs	r6, #1
 8005be6:	e79b      	b.n	8005b20 <__multiply+0x84>
 8005be8:	08006b7c 	.word	0x08006b7c
 8005bec:	08006b8d 	.word	0x08006b8d

08005bf0 <__pow5mult>:
 8005bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf4:	4615      	mov	r5, r2
 8005bf6:	f012 0203 	ands.w	r2, r2, #3
 8005bfa:	4607      	mov	r7, r0
 8005bfc:	460e      	mov	r6, r1
 8005bfe:	d007      	beq.n	8005c10 <__pow5mult+0x20>
 8005c00:	4c25      	ldr	r4, [pc, #148]	@ (8005c98 <__pow5mult+0xa8>)
 8005c02:	3a01      	subs	r2, #1
 8005c04:	2300      	movs	r3, #0
 8005c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c0a:	f7ff fe9f 	bl	800594c <__multadd>
 8005c0e:	4606      	mov	r6, r0
 8005c10:	10ad      	asrs	r5, r5, #2
 8005c12:	d03d      	beq.n	8005c90 <__pow5mult+0xa0>
 8005c14:	69fc      	ldr	r4, [r7, #28]
 8005c16:	b97c      	cbnz	r4, 8005c38 <__pow5mult+0x48>
 8005c18:	2010      	movs	r0, #16
 8005c1a:	f7ff fd7f 	bl	800571c <malloc>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	61f8      	str	r0, [r7, #28]
 8005c22:	b928      	cbnz	r0, 8005c30 <__pow5mult+0x40>
 8005c24:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <__pow5mult+0xac>)
 8005c26:	481e      	ldr	r0, [pc, #120]	@ (8005ca0 <__pow5mult+0xb0>)
 8005c28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005c2c:	f000 fbea 	bl	8006404 <__assert_func>
 8005c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c34:	6004      	str	r4, [r0, #0]
 8005c36:	60c4      	str	r4, [r0, #12]
 8005c38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c40:	b94c      	cbnz	r4, 8005c56 <__pow5mult+0x66>
 8005c42:	f240 2171 	movw	r1, #625	@ 0x271
 8005c46:	4638      	mov	r0, r7
 8005c48:	f7ff ff12 	bl	8005a70 <__i2b>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c52:	4604      	mov	r4, r0
 8005c54:	6003      	str	r3, [r0, #0]
 8005c56:	f04f 0900 	mov.w	r9, #0
 8005c5a:	07eb      	lsls	r3, r5, #31
 8005c5c:	d50a      	bpl.n	8005c74 <__pow5mult+0x84>
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4622      	mov	r2, r4
 8005c62:	4638      	mov	r0, r7
 8005c64:	f7ff ff1a 	bl	8005a9c <__multiply>
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f7ff fe4b 	bl	8005908 <_Bfree>
 8005c72:	4646      	mov	r6, r8
 8005c74:	106d      	asrs	r5, r5, #1
 8005c76:	d00b      	beq.n	8005c90 <__pow5mult+0xa0>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	b938      	cbnz	r0, 8005c8c <__pow5mult+0x9c>
 8005c7c:	4622      	mov	r2, r4
 8005c7e:	4621      	mov	r1, r4
 8005c80:	4638      	mov	r0, r7
 8005c82:	f7ff ff0b 	bl	8005a9c <__multiply>
 8005c86:	6020      	str	r0, [r4, #0]
 8005c88:	f8c0 9000 	str.w	r9, [r0]
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	e7e4      	b.n	8005c5a <__pow5mult+0x6a>
 8005c90:	4630      	mov	r0, r6
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	bf00      	nop
 8005c98:	08006be8 	.word	0x08006be8
 8005c9c:	08006b0d 	.word	0x08006b0d
 8005ca0:	08006b8d 	.word	0x08006b8d

08005ca4 <__lshift>:
 8005ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca8:	460c      	mov	r4, r1
 8005caa:	6849      	ldr	r1, [r1, #4]
 8005cac:	6923      	ldr	r3, [r4, #16]
 8005cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cbc:	f108 0601 	add.w	r6, r8, #1
 8005cc0:	42b3      	cmp	r3, r6
 8005cc2:	db0b      	blt.n	8005cdc <__lshift+0x38>
 8005cc4:	4638      	mov	r0, r7
 8005cc6:	f7ff fddf 	bl	8005888 <_Balloc>
 8005cca:	4605      	mov	r5, r0
 8005ccc:	b948      	cbnz	r0, 8005ce2 <__lshift+0x3e>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	4b28      	ldr	r3, [pc, #160]	@ (8005d74 <__lshift+0xd0>)
 8005cd2:	4829      	ldr	r0, [pc, #164]	@ (8005d78 <__lshift+0xd4>)
 8005cd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005cd8:	f000 fb94 	bl	8006404 <__assert_func>
 8005cdc:	3101      	adds	r1, #1
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	e7ee      	b.n	8005cc0 <__lshift+0x1c>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f100 0114 	add.w	r1, r0, #20
 8005ce8:	f100 0210 	add.w	r2, r0, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	4553      	cmp	r3, sl
 8005cf0:	db33      	blt.n	8005d5a <__lshift+0xb6>
 8005cf2:	6920      	ldr	r0, [r4, #16]
 8005cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cf8:	f104 0314 	add.w	r3, r4, #20
 8005cfc:	f019 091f 	ands.w	r9, r9, #31
 8005d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d08:	d02b      	beq.n	8005d62 <__lshift+0xbe>
 8005d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8005d0e:	468a      	mov	sl, r1
 8005d10:	2200      	movs	r2, #0
 8005d12:	6818      	ldr	r0, [r3, #0]
 8005d14:	fa00 f009 	lsl.w	r0, r0, r9
 8005d18:	4310      	orrs	r0, r2
 8005d1a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d22:	459c      	cmp	ip, r3
 8005d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d28:	d8f3      	bhi.n	8005d12 <__lshift+0x6e>
 8005d2a:	ebac 0304 	sub.w	r3, ip, r4
 8005d2e:	3b15      	subs	r3, #21
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	3304      	adds	r3, #4
 8005d36:	f104 0015 	add.w	r0, r4, #21
 8005d3a:	4584      	cmp	ip, r0
 8005d3c:	bf38      	it	cc
 8005d3e:	2304      	movcc	r3, #4
 8005d40:	50ca      	str	r2, [r1, r3]
 8005d42:	b10a      	cbz	r2, 8005d48 <__lshift+0xa4>
 8005d44:	f108 0602 	add.w	r6, r8, #2
 8005d48:	3e01      	subs	r6, #1
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	612e      	str	r6, [r5, #16]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	f7ff fdda 	bl	8005908 <_Bfree>
 8005d54:	4628      	mov	r0, r5
 8005d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d5e:	3301      	adds	r3, #1
 8005d60:	e7c5      	b.n	8005cee <__lshift+0x4a>
 8005d62:	3904      	subs	r1, #4
 8005d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d68:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d6c:	459c      	cmp	ip, r3
 8005d6e:	d8f9      	bhi.n	8005d64 <__lshift+0xc0>
 8005d70:	e7ea      	b.n	8005d48 <__lshift+0xa4>
 8005d72:	bf00      	nop
 8005d74:	08006b7c 	.word	0x08006b7c
 8005d78:	08006b8d 	.word	0x08006b8d

08005d7c <__mcmp>:
 8005d7c:	690a      	ldr	r2, [r1, #16]
 8005d7e:	4603      	mov	r3, r0
 8005d80:	6900      	ldr	r0, [r0, #16]
 8005d82:	1a80      	subs	r0, r0, r2
 8005d84:	b530      	push	{r4, r5, lr}
 8005d86:	d10e      	bne.n	8005da6 <__mcmp+0x2a>
 8005d88:	3314      	adds	r3, #20
 8005d8a:	3114      	adds	r1, #20
 8005d8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d9c:	4295      	cmp	r5, r2
 8005d9e:	d003      	beq.n	8005da8 <__mcmp+0x2c>
 8005da0:	d205      	bcs.n	8005dae <__mcmp+0x32>
 8005da2:	f04f 30ff 	mov.w	r0, #4294967295
 8005da6:	bd30      	pop	{r4, r5, pc}
 8005da8:	42a3      	cmp	r3, r4
 8005daa:	d3f3      	bcc.n	8005d94 <__mcmp+0x18>
 8005dac:	e7fb      	b.n	8005da6 <__mcmp+0x2a>
 8005dae:	2001      	movs	r0, #1
 8005db0:	e7f9      	b.n	8005da6 <__mcmp+0x2a>
	...

08005db4 <__mdiff>:
 8005db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	4689      	mov	r9, r1
 8005dba:	4606      	mov	r6, r0
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4648      	mov	r0, r9
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	f7ff ffdb 	bl	8005d7c <__mcmp>
 8005dc6:	1e05      	subs	r5, r0, #0
 8005dc8:	d112      	bne.n	8005df0 <__mdiff+0x3c>
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7ff fd5b 	bl	8005888 <_Balloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	b928      	cbnz	r0, 8005de2 <__mdiff+0x2e>
 8005dd6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ed4 <__mdiff+0x120>)
 8005dd8:	f240 2137 	movw	r1, #567	@ 0x237
 8005ddc:	483e      	ldr	r0, [pc, #248]	@ (8005ed8 <__mdiff+0x124>)
 8005dde:	f000 fb11 	bl	8006404 <__assert_func>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005de8:	4610      	mov	r0, r2
 8005dea:	b003      	add	sp, #12
 8005dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df0:	bfbc      	itt	lt
 8005df2:	464b      	movlt	r3, r9
 8005df4:	46a1      	movlt	r9, r4
 8005df6:	4630      	mov	r0, r6
 8005df8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005dfc:	bfba      	itte	lt
 8005dfe:	461c      	movlt	r4, r3
 8005e00:	2501      	movlt	r5, #1
 8005e02:	2500      	movge	r5, #0
 8005e04:	f7ff fd40 	bl	8005888 <_Balloc>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	b918      	cbnz	r0, 8005e14 <__mdiff+0x60>
 8005e0c:	4b31      	ldr	r3, [pc, #196]	@ (8005ed4 <__mdiff+0x120>)
 8005e0e:	f240 2145 	movw	r1, #581	@ 0x245
 8005e12:	e7e3      	b.n	8005ddc <__mdiff+0x28>
 8005e14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e18:	6926      	ldr	r6, [r4, #16]
 8005e1a:	60c5      	str	r5, [r0, #12]
 8005e1c:	f109 0310 	add.w	r3, r9, #16
 8005e20:	f109 0514 	add.w	r5, r9, #20
 8005e24:	f104 0e14 	add.w	lr, r4, #20
 8005e28:	f100 0b14 	add.w	fp, r0, #20
 8005e2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005e30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	46d9      	mov	r9, fp
 8005e38:	f04f 0c00 	mov.w	ip, #0
 8005e3c:	9b01      	ldr	r3, [sp, #4]
 8005e3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005e42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	fa1f f38a 	uxth.w	r3, sl
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	b283      	uxth	r3, r0
 8005e50:	1acb      	subs	r3, r1, r3
 8005e52:	0c00      	lsrs	r0, r0, #16
 8005e54:	4463      	add	r3, ip
 8005e56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e64:	4576      	cmp	r6, lr
 8005e66:	f849 3b04 	str.w	r3, [r9], #4
 8005e6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e6e:	d8e5      	bhi.n	8005e3c <__mdiff+0x88>
 8005e70:	1b33      	subs	r3, r6, r4
 8005e72:	3b15      	subs	r3, #21
 8005e74:	f023 0303 	bic.w	r3, r3, #3
 8005e78:	3415      	adds	r4, #21
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	42a6      	cmp	r6, r4
 8005e7e:	bf38      	it	cc
 8005e80:	2304      	movcc	r3, #4
 8005e82:	441d      	add	r5, r3
 8005e84:	445b      	add	r3, fp
 8005e86:	461e      	mov	r6, r3
 8005e88:	462c      	mov	r4, r5
 8005e8a:	4544      	cmp	r4, r8
 8005e8c:	d30e      	bcc.n	8005eac <__mdiff+0xf8>
 8005e8e:	f108 0103 	add.w	r1, r8, #3
 8005e92:	1b49      	subs	r1, r1, r5
 8005e94:	f021 0103 	bic.w	r1, r1, #3
 8005e98:	3d03      	subs	r5, #3
 8005e9a:	45a8      	cmp	r8, r5
 8005e9c:	bf38      	it	cc
 8005e9e:	2100      	movcc	r1, #0
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ea6:	b191      	cbz	r1, 8005ece <__mdiff+0x11a>
 8005ea8:	6117      	str	r7, [r2, #16]
 8005eaa:	e79d      	b.n	8005de8 <__mdiff+0x34>
 8005eac:	f854 1b04 	ldr.w	r1, [r4], #4
 8005eb0:	46e6      	mov	lr, ip
 8005eb2:	0c08      	lsrs	r0, r1, #16
 8005eb4:	fa1c fc81 	uxtah	ip, ip, r1
 8005eb8:	4471      	add	r1, lr
 8005eba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ebe:	b289      	uxth	r1, r1
 8005ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ec4:	f846 1b04 	str.w	r1, [r6], #4
 8005ec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ecc:	e7dd      	b.n	8005e8a <__mdiff+0xd6>
 8005ece:	3f01      	subs	r7, #1
 8005ed0:	e7e7      	b.n	8005ea2 <__mdiff+0xee>
 8005ed2:	bf00      	nop
 8005ed4:	08006b7c 	.word	0x08006b7c
 8005ed8:	08006b8d 	.word	0x08006b8d

08005edc <__d2b>:
 8005edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	ec59 8b10 	vmov	r8, r9, d0
 8005ee8:	4616      	mov	r6, r2
 8005eea:	f7ff fccd 	bl	8005888 <_Balloc>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	b930      	cbnz	r0, 8005f00 <__d2b+0x24>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b23      	ldr	r3, [pc, #140]	@ (8005f84 <__d2b+0xa8>)
 8005ef6:	4824      	ldr	r0, [pc, #144]	@ (8005f88 <__d2b+0xac>)
 8005ef8:	f240 310f 	movw	r1, #783	@ 0x30f
 8005efc:	f000 fa82 	bl	8006404 <__assert_func>
 8005f00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f08:	b10d      	cbz	r5, 8005f0e <__d2b+0x32>
 8005f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	f1b8 0300 	subs.w	r3, r8, #0
 8005f14:	d023      	beq.n	8005f5e <__d2b+0x82>
 8005f16:	4668      	mov	r0, sp
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	f7ff fd7c 	bl	8005a16 <__lo0bits>
 8005f1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f22:	b1d0      	cbz	r0, 8005f5a <__d2b+0x7e>
 8005f24:	f1c0 0320 	rsb	r3, r0, #32
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	40c2      	lsrs	r2, r0
 8005f30:	6163      	str	r3, [r4, #20]
 8005f32:	9201      	str	r2, [sp, #4]
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	61a3      	str	r3, [r4, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2201      	moveq	r2, #1
 8005f3e:	2202      	movne	r2, #2
 8005f40:	6122      	str	r2, [r4, #16]
 8005f42:	b1a5      	cbz	r5, 8005f6e <__d2b+0x92>
 8005f44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005f48:	4405      	add	r5, r0
 8005f4a:	603d      	str	r5, [r7, #0]
 8005f4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005f50:	6030      	str	r0, [r6, #0]
 8005f52:	4620      	mov	r0, r4
 8005f54:	b003      	add	sp, #12
 8005f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	6161      	str	r1, [r4, #20]
 8005f5c:	e7ea      	b.n	8005f34 <__d2b+0x58>
 8005f5e:	a801      	add	r0, sp, #4
 8005f60:	f7ff fd59 	bl	8005a16 <__lo0bits>
 8005f64:	9b01      	ldr	r3, [sp, #4]
 8005f66:	6163      	str	r3, [r4, #20]
 8005f68:	3020      	adds	r0, #32
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	e7e8      	b.n	8005f40 <__d2b+0x64>
 8005f6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f76:	6038      	str	r0, [r7, #0]
 8005f78:	6918      	ldr	r0, [r3, #16]
 8005f7a:	f7ff fd2d 	bl	80059d8 <__hi0bits>
 8005f7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f82:	e7e5      	b.n	8005f50 <__d2b+0x74>
 8005f84:	08006b7c 	.word	0x08006b7c
 8005f88:	08006b8d 	.word	0x08006b8d

08005f8c <__ssputs_r>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	688e      	ldr	r6, [r1, #8]
 8005f92:	461f      	mov	r7, r3
 8005f94:	42be      	cmp	r6, r7
 8005f96:	680b      	ldr	r3, [r1, #0]
 8005f98:	4682      	mov	sl, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4690      	mov	r8, r2
 8005f9e:	d82d      	bhi.n	8005ffc <__ssputs_r+0x70>
 8005fa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fa8:	d026      	beq.n	8005ff8 <__ssputs_r+0x6c>
 8005faa:	6965      	ldr	r5, [r4, #20]
 8005fac:	6909      	ldr	r1, [r1, #16]
 8005fae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb2:	eba3 0901 	sub.w	r9, r3, r1
 8005fb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fba:	1c7b      	adds	r3, r7, #1
 8005fbc:	444b      	add	r3, r9
 8005fbe:	106d      	asrs	r5, r5, #1
 8005fc0:	429d      	cmp	r5, r3
 8005fc2:	bf38      	it	cc
 8005fc4:	461d      	movcc	r5, r3
 8005fc6:	0553      	lsls	r3, r2, #21
 8005fc8:	d527      	bpl.n	800601a <__ssputs_r+0x8e>
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7ff fbd0 	bl	8005770 <_malloc_r>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	b360      	cbz	r0, 800602e <__ssputs_r+0xa2>
 8005fd4:	6921      	ldr	r1, [r4, #16]
 8005fd6:	464a      	mov	r2, r9
 8005fd8:	f000 fa06 	bl	80063e8 <memcpy>
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	6126      	str	r6, [r4, #16]
 8005fea:	6165      	str	r5, [r4, #20]
 8005fec:	444e      	add	r6, r9
 8005fee:	eba5 0509 	sub.w	r5, r5, r9
 8005ff2:	6026      	str	r6, [r4, #0]
 8005ff4:	60a5      	str	r5, [r4, #8]
 8005ff6:	463e      	mov	r6, r7
 8005ff8:	42be      	cmp	r6, r7
 8005ffa:	d900      	bls.n	8005ffe <__ssputs_r+0x72>
 8005ffc:	463e      	mov	r6, r7
 8005ffe:	6820      	ldr	r0, [r4, #0]
 8006000:	4632      	mov	r2, r6
 8006002:	4641      	mov	r1, r8
 8006004:	f000 f9c6 	bl	8006394 <memmove>
 8006008:	68a3      	ldr	r3, [r4, #8]
 800600a:	1b9b      	subs	r3, r3, r6
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	4433      	add	r3, r6
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	2000      	movs	r0, #0
 8006016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601a:	462a      	mov	r2, r5
 800601c:	f000 fa36 	bl	800648c <_realloc_r>
 8006020:	4606      	mov	r6, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d1e0      	bne.n	8005fe8 <__ssputs_r+0x5c>
 8006026:	6921      	ldr	r1, [r4, #16]
 8006028:	4650      	mov	r0, sl
 800602a:	f7ff fb2d 	bl	8005688 <_free_r>
 800602e:	230c      	movs	r3, #12
 8006030:	f8ca 3000 	str.w	r3, [sl]
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800603a:	81a3      	strh	r3, [r4, #12]
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	e7e9      	b.n	8006016 <__ssputs_r+0x8a>
	...

08006044 <_svfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	4698      	mov	r8, r3
 800604a:	898b      	ldrh	r3, [r1, #12]
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	b09d      	sub	sp, #116	@ 0x74
 8006050:	4607      	mov	r7, r0
 8006052:	460d      	mov	r5, r1
 8006054:	4614      	mov	r4, r2
 8006056:	d510      	bpl.n	800607a <_svfiprintf_r+0x36>
 8006058:	690b      	ldr	r3, [r1, #16]
 800605a:	b973      	cbnz	r3, 800607a <_svfiprintf_r+0x36>
 800605c:	2140      	movs	r1, #64	@ 0x40
 800605e:	f7ff fb87 	bl	8005770 <_malloc_r>
 8006062:	6028      	str	r0, [r5, #0]
 8006064:	6128      	str	r0, [r5, #16]
 8006066:	b930      	cbnz	r0, 8006076 <_svfiprintf_r+0x32>
 8006068:	230c      	movs	r3, #12
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	b01d      	add	sp, #116	@ 0x74
 8006072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006076:	2340      	movs	r3, #64	@ 0x40
 8006078:	616b      	str	r3, [r5, #20]
 800607a:	2300      	movs	r3, #0
 800607c:	9309      	str	r3, [sp, #36]	@ 0x24
 800607e:	2320      	movs	r3, #32
 8006080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006084:	f8cd 800c 	str.w	r8, [sp, #12]
 8006088:	2330      	movs	r3, #48	@ 0x30
 800608a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006228 <_svfiprintf_r+0x1e4>
 800608e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006092:	f04f 0901 	mov.w	r9, #1
 8006096:	4623      	mov	r3, r4
 8006098:	469a      	mov	sl, r3
 800609a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800609e:	b10a      	cbz	r2, 80060a4 <_svfiprintf_r+0x60>
 80060a0:	2a25      	cmp	r2, #37	@ 0x25
 80060a2:	d1f9      	bne.n	8006098 <_svfiprintf_r+0x54>
 80060a4:	ebba 0b04 	subs.w	fp, sl, r4
 80060a8:	d00b      	beq.n	80060c2 <_svfiprintf_r+0x7e>
 80060aa:	465b      	mov	r3, fp
 80060ac:	4622      	mov	r2, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff ff6b 	bl	8005f8c <__ssputs_r>
 80060b6:	3001      	adds	r0, #1
 80060b8:	f000 80a7 	beq.w	800620a <_svfiprintf_r+0x1c6>
 80060bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060be:	445a      	add	r2, fp
 80060c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80060c2:	f89a 3000 	ldrb.w	r3, [sl]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 809f 	beq.w	800620a <_svfiprintf_r+0x1c6>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295
 80060d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060d6:	f10a 0a01 	add.w	sl, sl, #1
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	9307      	str	r3, [sp, #28]
 80060de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80060e4:	4654      	mov	r4, sl
 80060e6:	2205      	movs	r2, #5
 80060e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ec:	484e      	ldr	r0, [pc, #312]	@ (8006228 <_svfiprintf_r+0x1e4>)
 80060ee:	f7fa f877 	bl	80001e0 <memchr>
 80060f2:	9a04      	ldr	r2, [sp, #16]
 80060f4:	b9d8      	cbnz	r0, 800612e <_svfiprintf_r+0xea>
 80060f6:	06d0      	lsls	r0, r2, #27
 80060f8:	bf44      	itt	mi
 80060fa:	2320      	movmi	r3, #32
 80060fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006100:	0711      	lsls	r1, r2, #28
 8006102:	bf44      	itt	mi
 8006104:	232b      	movmi	r3, #43	@ 0x2b
 8006106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800610a:	f89a 3000 	ldrb.w	r3, [sl]
 800610e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006110:	d015      	beq.n	800613e <_svfiprintf_r+0xfa>
 8006112:	9a07      	ldr	r2, [sp, #28]
 8006114:	4654      	mov	r4, sl
 8006116:	2000      	movs	r0, #0
 8006118:	f04f 0c0a 	mov.w	ip, #10
 800611c:	4621      	mov	r1, r4
 800611e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006122:	3b30      	subs	r3, #48	@ 0x30
 8006124:	2b09      	cmp	r3, #9
 8006126:	d94b      	bls.n	80061c0 <_svfiprintf_r+0x17c>
 8006128:	b1b0      	cbz	r0, 8006158 <_svfiprintf_r+0x114>
 800612a:	9207      	str	r2, [sp, #28]
 800612c:	e014      	b.n	8006158 <_svfiprintf_r+0x114>
 800612e:	eba0 0308 	sub.w	r3, r0, r8
 8006132:	fa09 f303 	lsl.w	r3, r9, r3
 8006136:	4313      	orrs	r3, r2
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	46a2      	mov	sl, r4
 800613c:	e7d2      	b.n	80060e4 <_svfiprintf_r+0xa0>
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	9103      	str	r1, [sp, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfbb      	ittet	lt
 800614a:	425b      	neglt	r3, r3
 800614c:	f042 0202 	orrlt.w	r2, r2, #2
 8006150:	9307      	strge	r3, [sp, #28]
 8006152:	9307      	strlt	r3, [sp, #28]
 8006154:	bfb8      	it	lt
 8006156:	9204      	strlt	r2, [sp, #16]
 8006158:	7823      	ldrb	r3, [r4, #0]
 800615a:	2b2e      	cmp	r3, #46	@ 0x2e
 800615c:	d10a      	bne.n	8006174 <_svfiprintf_r+0x130>
 800615e:	7863      	ldrb	r3, [r4, #1]
 8006160:	2b2a      	cmp	r3, #42	@ 0x2a
 8006162:	d132      	bne.n	80061ca <_svfiprintf_r+0x186>
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	1d1a      	adds	r2, r3, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	9203      	str	r2, [sp, #12]
 800616c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006170:	3402      	adds	r4, #2
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006238 <_svfiprintf_r+0x1f4>
 8006178:	7821      	ldrb	r1, [r4, #0]
 800617a:	2203      	movs	r2, #3
 800617c:	4650      	mov	r0, sl
 800617e:	f7fa f82f 	bl	80001e0 <memchr>
 8006182:	b138      	cbz	r0, 8006194 <_svfiprintf_r+0x150>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	eba0 000a 	sub.w	r0, r0, sl
 800618a:	2240      	movs	r2, #64	@ 0x40
 800618c:	4082      	lsls	r2, r0
 800618e:	4313      	orrs	r3, r2
 8006190:	3401      	adds	r4, #1
 8006192:	9304      	str	r3, [sp, #16]
 8006194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006198:	4824      	ldr	r0, [pc, #144]	@ (800622c <_svfiprintf_r+0x1e8>)
 800619a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800619e:	2206      	movs	r2, #6
 80061a0:	f7fa f81e 	bl	80001e0 <memchr>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d036      	beq.n	8006216 <_svfiprintf_r+0x1d2>
 80061a8:	4b21      	ldr	r3, [pc, #132]	@ (8006230 <_svfiprintf_r+0x1ec>)
 80061aa:	bb1b      	cbnz	r3, 80061f4 <_svfiprintf_r+0x1b0>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	3307      	adds	r3, #7
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	3308      	adds	r3, #8
 80061b6:	9303      	str	r3, [sp, #12]
 80061b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061ba:	4433      	add	r3, r6
 80061bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061be:	e76a      	b.n	8006096 <_svfiprintf_r+0x52>
 80061c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c4:	460c      	mov	r4, r1
 80061c6:	2001      	movs	r0, #1
 80061c8:	e7a8      	b.n	800611c <_svfiprintf_r+0xd8>
 80061ca:	2300      	movs	r3, #0
 80061cc:	3401      	adds	r4, #1
 80061ce:	9305      	str	r3, [sp, #20]
 80061d0:	4619      	mov	r1, r3
 80061d2:	f04f 0c0a 	mov.w	ip, #10
 80061d6:	4620      	mov	r0, r4
 80061d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061dc:	3a30      	subs	r2, #48	@ 0x30
 80061de:	2a09      	cmp	r2, #9
 80061e0:	d903      	bls.n	80061ea <_svfiprintf_r+0x1a6>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0c6      	beq.n	8006174 <_svfiprintf_r+0x130>
 80061e6:	9105      	str	r1, [sp, #20]
 80061e8:	e7c4      	b.n	8006174 <_svfiprintf_r+0x130>
 80061ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ee:	4604      	mov	r4, r0
 80061f0:	2301      	movs	r3, #1
 80061f2:	e7f0      	b.n	80061d6 <_svfiprintf_r+0x192>
 80061f4:	ab03      	add	r3, sp, #12
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	462a      	mov	r2, r5
 80061fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006234 <_svfiprintf_r+0x1f0>)
 80061fc:	a904      	add	r1, sp, #16
 80061fe:	4638      	mov	r0, r7
 8006200:	f7fd fe82 	bl	8003f08 <_printf_float>
 8006204:	1c42      	adds	r2, r0, #1
 8006206:	4606      	mov	r6, r0
 8006208:	d1d6      	bne.n	80061b8 <_svfiprintf_r+0x174>
 800620a:	89ab      	ldrh	r3, [r5, #12]
 800620c:	065b      	lsls	r3, r3, #25
 800620e:	f53f af2d 	bmi.w	800606c <_svfiprintf_r+0x28>
 8006212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006214:	e72c      	b.n	8006070 <_svfiprintf_r+0x2c>
 8006216:	ab03      	add	r3, sp, #12
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	462a      	mov	r2, r5
 800621c:	4b05      	ldr	r3, [pc, #20]	@ (8006234 <_svfiprintf_r+0x1f0>)
 800621e:	a904      	add	r1, sp, #16
 8006220:	4638      	mov	r0, r7
 8006222:	f7fe f909 	bl	8004438 <_printf_i>
 8006226:	e7ed      	b.n	8006204 <_svfiprintf_r+0x1c0>
 8006228:	08006ce8 	.word	0x08006ce8
 800622c:	08006cf2 	.word	0x08006cf2
 8006230:	08003f09 	.word	0x08003f09
 8006234:	08005f8d 	.word	0x08005f8d
 8006238:	08006cee 	.word	0x08006cee

0800623c <__sflush_r>:
 800623c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	0716      	lsls	r6, r2, #28
 8006246:	4605      	mov	r5, r0
 8006248:	460c      	mov	r4, r1
 800624a:	d454      	bmi.n	80062f6 <__sflush_r+0xba>
 800624c:	684b      	ldr	r3, [r1, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	dc02      	bgt.n	8006258 <__sflush_r+0x1c>
 8006252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd48      	ble.n	80062ea <__sflush_r+0xae>
 8006258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800625a:	2e00      	cmp	r6, #0
 800625c:	d045      	beq.n	80062ea <__sflush_r+0xae>
 800625e:	2300      	movs	r3, #0
 8006260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006264:	682f      	ldr	r7, [r5, #0]
 8006266:	6a21      	ldr	r1, [r4, #32]
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	d030      	beq.n	80062ce <__sflush_r+0x92>
 800626c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800626e:	89a3      	ldrh	r3, [r4, #12]
 8006270:	0759      	lsls	r1, r3, #29
 8006272:	d505      	bpl.n	8006280 <__sflush_r+0x44>
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800627a:	b10b      	cbz	r3, 8006280 <__sflush_r+0x44>
 800627c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	2300      	movs	r3, #0
 8006282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006284:	6a21      	ldr	r1, [r4, #32]
 8006286:	4628      	mov	r0, r5
 8006288:	47b0      	blx	r6
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	d106      	bne.n	800629e <__sflush_r+0x62>
 8006290:	6829      	ldr	r1, [r5, #0]
 8006292:	291d      	cmp	r1, #29
 8006294:	d82b      	bhi.n	80062ee <__sflush_r+0xb2>
 8006296:	4a2a      	ldr	r2, [pc, #168]	@ (8006340 <__sflush_r+0x104>)
 8006298:	410a      	asrs	r2, r1
 800629a:	07d6      	lsls	r6, r2, #31
 800629c:	d427      	bmi.n	80062ee <__sflush_r+0xb2>
 800629e:	2200      	movs	r2, #0
 80062a0:	6062      	str	r2, [r4, #4]
 80062a2:	04d9      	lsls	r1, r3, #19
 80062a4:	6922      	ldr	r2, [r4, #16]
 80062a6:	6022      	str	r2, [r4, #0]
 80062a8:	d504      	bpl.n	80062b4 <__sflush_r+0x78>
 80062aa:	1c42      	adds	r2, r0, #1
 80062ac:	d101      	bne.n	80062b2 <__sflush_r+0x76>
 80062ae:	682b      	ldr	r3, [r5, #0]
 80062b0:	b903      	cbnz	r3, 80062b4 <__sflush_r+0x78>
 80062b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80062b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062b6:	602f      	str	r7, [r5, #0]
 80062b8:	b1b9      	cbz	r1, 80062ea <__sflush_r+0xae>
 80062ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062be:	4299      	cmp	r1, r3
 80062c0:	d002      	beq.n	80062c8 <__sflush_r+0x8c>
 80062c2:	4628      	mov	r0, r5
 80062c4:	f7ff f9e0 	bl	8005688 <_free_r>
 80062c8:	2300      	movs	r3, #0
 80062ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80062cc:	e00d      	b.n	80062ea <__sflush_r+0xae>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b0      	blx	r6
 80062d4:	4602      	mov	r2, r0
 80062d6:	1c50      	adds	r0, r2, #1
 80062d8:	d1c9      	bne.n	800626e <__sflush_r+0x32>
 80062da:	682b      	ldr	r3, [r5, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0c6      	beq.n	800626e <__sflush_r+0x32>
 80062e0:	2b1d      	cmp	r3, #29
 80062e2:	d001      	beq.n	80062e8 <__sflush_r+0xac>
 80062e4:	2b16      	cmp	r3, #22
 80062e6:	d11e      	bne.n	8006326 <__sflush_r+0xea>
 80062e8:	602f      	str	r7, [r5, #0]
 80062ea:	2000      	movs	r0, #0
 80062ec:	e022      	b.n	8006334 <__sflush_r+0xf8>
 80062ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062f2:	b21b      	sxth	r3, r3
 80062f4:	e01b      	b.n	800632e <__sflush_r+0xf2>
 80062f6:	690f      	ldr	r7, [r1, #16]
 80062f8:	2f00      	cmp	r7, #0
 80062fa:	d0f6      	beq.n	80062ea <__sflush_r+0xae>
 80062fc:	0793      	lsls	r3, r2, #30
 80062fe:	680e      	ldr	r6, [r1, #0]
 8006300:	bf08      	it	eq
 8006302:	694b      	ldreq	r3, [r1, #20]
 8006304:	600f      	str	r7, [r1, #0]
 8006306:	bf18      	it	ne
 8006308:	2300      	movne	r3, #0
 800630a:	eba6 0807 	sub.w	r8, r6, r7
 800630e:	608b      	str	r3, [r1, #8]
 8006310:	f1b8 0f00 	cmp.w	r8, #0
 8006314:	dde9      	ble.n	80062ea <__sflush_r+0xae>
 8006316:	6a21      	ldr	r1, [r4, #32]
 8006318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800631a:	4643      	mov	r3, r8
 800631c:	463a      	mov	r2, r7
 800631e:	4628      	mov	r0, r5
 8006320:	47b0      	blx	r6
 8006322:	2800      	cmp	r0, #0
 8006324:	dc08      	bgt.n	8006338 <__sflush_r+0xfc>
 8006326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800632e:	81a3      	strh	r3, [r4, #12]
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006338:	4407      	add	r7, r0
 800633a:	eba8 0800 	sub.w	r8, r8, r0
 800633e:	e7e7      	b.n	8006310 <__sflush_r+0xd4>
 8006340:	dfbffffe 	.word	0xdfbffffe

08006344 <_fflush_r>:
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	690b      	ldr	r3, [r1, #16]
 8006348:	4605      	mov	r5, r0
 800634a:	460c      	mov	r4, r1
 800634c:	b913      	cbnz	r3, 8006354 <_fflush_r+0x10>
 800634e:	2500      	movs	r5, #0
 8006350:	4628      	mov	r0, r5
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	b118      	cbz	r0, 800635e <_fflush_r+0x1a>
 8006356:	6a03      	ldr	r3, [r0, #32]
 8006358:	b90b      	cbnz	r3, 800635e <_fflush_r+0x1a>
 800635a:	f7fe fa19 	bl	8004790 <__sinit>
 800635e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f3      	beq.n	800634e <_fflush_r+0xa>
 8006366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006368:	07d0      	lsls	r0, r2, #31
 800636a:	d404      	bmi.n	8006376 <_fflush_r+0x32>
 800636c:	0599      	lsls	r1, r3, #22
 800636e:	d402      	bmi.n	8006376 <_fflush_r+0x32>
 8006370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006372:	f7fe fb38 	bl	80049e6 <__retarget_lock_acquire_recursive>
 8006376:	4628      	mov	r0, r5
 8006378:	4621      	mov	r1, r4
 800637a:	f7ff ff5f 	bl	800623c <__sflush_r>
 800637e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006380:	07da      	lsls	r2, r3, #31
 8006382:	4605      	mov	r5, r0
 8006384:	d4e4      	bmi.n	8006350 <_fflush_r+0xc>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	059b      	lsls	r3, r3, #22
 800638a:	d4e1      	bmi.n	8006350 <_fflush_r+0xc>
 800638c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800638e:	f7fe fb2b 	bl	80049e8 <__retarget_lock_release_recursive>
 8006392:	e7dd      	b.n	8006350 <_fflush_r+0xc>

08006394 <memmove>:
 8006394:	4288      	cmp	r0, r1
 8006396:	b510      	push	{r4, lr}
 8006398:	eb01 0402 	add.w	r4, r1, r2
 800639c:	d902      	bls.n	80063a4 <memmove+0x10>
 800639e:	4284      	cmp	r4, r0
 80063a0:	4623      	mov	r3, r4
 80063a2:	d807      	bhi.n	80063b4 <memmove+0x20>
 80063a4:	1e43      	subs	r3, r0, #1
 80063a6:	42a1      	cmp	r1, r4
 80063a8:	d008      	beq.n	80063bc <memmove+0x28>
 80063aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063b2:	e7f8      	b.n	80063a6 <memmove+0x12>
 80063b4:	4402      	add	r2, r0
 80063b6:	4601      	mov	r1, r0
 80063b8:	428a      	cmp	r2, r1
 80063ba:	d100      	bne.n	80063be <memmove+0x2a>
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063c6:	e7f7      	b.n	80063b8 <memmove+0x24>

080063c8 <_sbrk_r>:
 80063c8:	b538      	push	{r3, r4, r5, lr}
 80063ca:	4d06      	ldr	r5, [pc, #24]	@ (80063e4 <_sbrk_r+0x1c>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	4604      	mov	r4, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	602b      	str	r3, [r5, #0]
 80063d4:	f7fb f956 	bl	8001684 <_sbrk>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d102      	bne.n	80063e2 <_sbrk_r+0x1a>
 80063dc:	682b      	ldr	r3, [r5, #0]
 80063de:	b103      	cbz	r3, 80063e2 <_sbrk_r+0x1a>
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	bd38      	pop	{r3, r4, r5, pc}
 80063e4:	20000424 	.word	0x20000424

080063e8 <memcpy>:
 80063e8:	440a      	add	r2, r1
 80063ea:	4291      	cmp	r1, r2
 80063ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f0:	d100      	bne.n	80063f4 <memcpy+0xc>
 80063f2:	4770      	bx	lr
 80063f4:	b510      	push	{r4, lr}
 80063f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fe:	4291      	cmp	r1, r2
 8006400:	d1f9      	bne.n	80063f6 <memcpy+0xe>
 8006402:	bd10      	pop	{r4, pc}

08006404 <__assert_func>:
 8006404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006406:	4614      	mov	r4, r2
 8006408:	461a      	mov	r2, r3
 800640a:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <__assert_func+0x2c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4605      	mov	r5, r0
 8006410:	68d8      	ldr	r0, [r3, #12]
 8006412:	b954      	cbnz	r4, 800642a <__assert_func+0x26>
 8006414:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <__assert_func+0x30>)
 8006416:	461c      	mov	r4, r3
 8006418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800641c:	9100      	str	r1, [sp, #0]
 800641e:	462b      	mov	r3, r5
 8006420:	4905      	ldr	r1, [pc, #20]	@ (8006438 <__assert_func+0x34>)
 8006422:	f000 f86f 	bl	8006504 <fiprintf>
 8006426:	f000 f87f 	bl	8006528 <abort>
 800642a:	4b04      	ldr	r3, [pc, #16]	@ (800643c <__assert_func+0x38>)
 800642c:	e7f4      	b.n	8006418 <__assert_func+0x14>
 800642e:	bf00      	nop
 8006430:	20000018 	.word	0x20000018
 8006434:	08006d3e 	.word	0x08006d3e
 8006438:	08006d10 	.word	0x08006d10
 800643c:	08006d03 	.word	0x08006d03

08006440 <_calloc_r>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	fba1 5402 	umull	r5, r4, r1, r2
 8006446:	b93c      	cbnz	r4, 8006458 <_calloc_r+0x18>
 8006448:	4629      	mov	r1, r5
 800644a:	f7ff f991 	bl	8005770 <_malloc_r>
 800644e:	4606      	mov	r6, r0
 8006450:	b928      	cbnz	r0, 800645e <_calloc_r+0x1e>
 8006452:	2600      	movs	r6, #0
 8006454:	4630      	mov	r0, r6
 8006456:	bd70      	pop	{r4, r5, r6, pc}
 8006458:	220c      	movs	r2, #12
 800645a:	6002      	str	r2, [r0, #0]
 800645c:	e7f9      	b.n	8006452 <_calloc_r+0x12>
 800645e:	462a      	mov	r2, r5
 8006460:	4621      	mov	r1, r4
 8006462:	f7fe fa42 	bl	80048ea <memset>
 8006466:	e7f5      	b.n	8006454 <_calloc_r+0x14>

08006468 <__ascii_mbtowc>:
 8006468:	b082      	sub	sp, #8
 800646a:	b901      	cbnz	r1, 800646e <__ascii_mbtowc+0x6>
 800646c:	a901      	add	r1, sp, #4
 800646e:	b142      	cbz	r2, 8006482 <__ascii_mbtowc+0x1a>
 8006470:	b14b      	cbz	r3, 8006486 <__ascii_mbtowc+0x1e>
 8006472:	7813      	ldrb	r3, [r2, #0]
 8006474:	600b      	str	r3, [r1, #0]
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	1e10      	subs	r0, r2, #0
 800647a:	bf18      	it	ne
 800647c:	2001      	movne	r0, #1
 800647e:	b002      	add	sp, #8
 8006480:	4770      	bx	lr
 8006482:	4610      	mov	r0, r2
 8006484:	e7fb      	b.n	800647e <__ascii_mbtowc+0x16>
 8006486:	f06f 0001 	mvn.w	r0, #1
 800648a:	e7f8      	b.n	800647e <__ascii_mbtowc+0x16>

0800648c <_realloc_r>:
 800648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	4680      	mov	r8, r0
 8006492:	4615      	mov	r5, r2
 8006494:	460c      	mov	r4, r1
 8006496:	b921      	cbnz	r1, 80064a2 <_realloc_r+0x16>
 8006498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	4611      	mov	r1, r2
 800649e:	f7ff b967 	b.w	8005770 <_malloc_r>
 80064a2:	b92a      	cbnz	r2, 80064b0 <_realloc_r+0x24>
 80064a4:	f7ff f8f0 	bl	8005688 <_free_r>
 80064a8:	2400      	movs	r4, #0
 80064aa:	4620      	mov	r0, r4
 80064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b0:	f000 f841 	bl	8006536 <_malloc_usable_size_r>
 80064b4:	4285      	cmp	r5, r0
 80064b6:	4606      	mov	r6, r0
 80064b8:	d802      	bhi.n	80064c0 <_realloc_r+0x34>
 80064ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064be:	d8f4      	bhi.n	80064aa <_realloc_r+0x1e>
 80064c0:	4629      	mov	r1, r5
 80064c2:	4640      	mov	r0, r8
 80064c4:	f7ff f954 	bl	8005770 <_malloc_r>
 80064c8:	4607      	mov	r7, r0
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d0ec      	beq.n	80064a8 <_realloc_r+0x1c>
 80064ce:	42b5      	cmp	r5, r6
 80064d0:	462a      	mov	r2, r5
 80064d2:	4621      	mov	r1, r4
 80064d4:	bf28      	it	cs
 80064d6:	4632      	movcs	r2, r6
 80064d8:	f7ff ff86 	bl	80063e8 <memcpy>
 80064dc:	4621      	mov	r1, r4
 80064de:	4640      	mov	r0, r8
 80064e0:	f7ff f8d2 	bl	8005688 <_free_r>
 80064e4:	463c      	mov	r4, r7
 80064e6:	e7e0      	b.n	80064aa <_realloc_r+0x1e>

080064e8 <__ascii_wctomb>:
 80064e8:	4603      	mov	r3, r0
 80064ea:	4608      	mov	r0, r1
 80064ec:	b141      	cbz	r1, 8006500 <__ascii_wctomb+0x18>
 80064ee:	2aff      	cmp	r2, #255	@ 0xff
 80064f0:	d904      	bls.n	80064fc <__ascii_wctomb+0x14>
 80064f2:	228a      	movs	r2, #138	@ 0x8a
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	4770      	bx	lr
 80064fc:	700a      	strb	r2, [r1, #0]
 80064fe:	2001      	movs	r0, #1
 8006500:	4770      	bx	lr
	...

08006504 <fiprintf>:
 8006504:	b40e      	push	{r1, r2, r3}
 8006506:	b503      	push	{r0, r1, lr}
 8006508:	4601      	mov	r1, r0
 800650a:	ab03      	add	r3, sp, #12
 800650c:	4805      	ldr	r0, [pc, #20]	@ (8006524 <fiprintf+0x20>)
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	f000 f83f 	bl	8006598 <_vfiprintf_r>
 800651a:	b002      	add	sp, #8
 800651c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006520:	b003      	add	sp, #12
 8006522:	4770      	bx	lr
 8006524:	20000018 	.word	0x20000018

08006528 <abort>:
 8006528:	b508      	push	{r3, lr}
 800652a:	2006      	movs	r0, #6
 800652c:	f000 fa08 	bl	8006940 <raise>
 8006530:	2001      	movs	r0, #1
 8006532:	f7fb f82f 	bl	8001594 <_exit>

08006536 <_malloc_usable_size_r>:
 8006536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653a:	1f18      	subs	r0, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfbc      	itt	lt
 8006540:	580b      	ldrlt	r3, [r1, r0]
 8006542:	18c0      	addlt	r0, r0, r3
 8006544:	4770      	bx	lr

08006546 <__sfputc_r>:
 8006546:	6893      	ldr	r3, [r2, #8]
 8006548:	3b01      	subs	r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	b410      	push	{r4}
 800654e:	6093      	str	r3, [r2, #8]
 8006550:	da08      	bge.n	8006564 <__sfputc_r+0x1e>
 8006552:	6994      	ldr	r4, [r2, #24]
 8006554:	42a3      	cmp	r3, r4
 8006556:	db01      	blt.n	800655c <__sfputc_r+0x16>
 8006558:	290a      	cmp	r1, #10
 800655a:	d103      	bne.n	8006564 <__sfputc_r+0x1e>
 800655c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006560:	f000 b932 	b.w	80067c8 <__swbuf_r>
 8006564:	6813      	ldr	r3, [r2, #0]
 8006566:	1c58      	adds	r0, r3, #1
 8006568:	6010      	str	r0, [r2, #0]
 800656a:	7019      	strb	r1, [r3, #0]
 800656c:	4608      	mov	r0, r1
 800656e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006572:	4770      	bx	lr

08006574 <__sfputs_r>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	4606      	mov	r6, r0
 8006578:	460f      	mov	r7, r1
 800657a:	4614      	mov	r4, r2
 800657c:	18d5      	adds	r5, r2, r3
 800657e:	42ac      	cmp	r4, r5
 8006580:	d101      	bne.n	8006586 <__sfputs_r+0x12>
 8006582:	2000      	movs	r0, #0
 8006584:	e007      	b.n	8006596 <__sfputs_r+0x22>
 8006586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658a:	463a      	mov	r2, r7
 800658c:	4630      	mov	r0, r6
 800658e:	f7ff ffda 	bl	8006546 <__sfputc_r>
 8006592:	1c43      	adds	r3, r0, #1
 8006594:	d1f3      	bne.n	800657e <__sfputs_r+0xa>
 8006596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006598 <_vfiprintf_r>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	460d      	mov	r5, r1
 800659e:	b09d      	sub	sp, #116	@ 0x74
 80065a0:	4614      	mov	r4, r2
 80065a2:	4698      	mov	r8, r3
 80065a4:	4606      	mov	r6, r0
 80065a6:	b118      	cbz	r0, 80065b0 <_vfiprintf_r+0x18>
 80065a8:	6a03      	ldr	r3, [r0, #32]
 80065aa:	b90b      	cbnz	r3, 80065b0 <_vfiprintf_r+0x18>
 80065ac:	f7fe f8f0 	bl	8004790 <__sinit>
 80065b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065b2:	07d9      	lsls	r1, r3, #31
 80065b4:	d405      	bmi.n	80065c2 <_vfiprintf_r+0x2a>
 80065b6:	89ab      	ldrh	r3, [r5, #12]
 80065b8:	059a      	lsls	r2, r3, #22
 80065ba:	d402      	bmi.n	80065c2 <_vfiprintf_r+0x2a>
 80065bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065be:	f7fe fa12 	bl	80049e6 <__retarget_lock_acquire_recursive>
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	071b      	lsls	r3, r3, #28
 80065c6:	d501      	bpl.n	80065cc <_vfiprintf_r+0x34>
 80065c8:	692b      	ldr	r3, [r5, #16]
 80065ca:	b99b      	cbnz	r3, 80065f4 <_vfiprintf_r+0x5c>
 80065cc:	4629      	mov	r1, r5
 80065ce:	4630      	mov	r0, r6
 80065d0:	f000 f938 	bl	8006844 <__swsetup_r>
 80065d4:	b170      	cbz	r0, 80065f4 <_vfiprintf_r+0x5c>
 80065d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065d8:	07dc      	lsls	r4, r3, #31
 80065da:	d504      	bpl.n	80065e6 <_vfiprintf_r+0x4e>
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	b01d      	add	sp, #116	@ 0x74
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	0598      	lsls	r0, r3, #22
 80065ea:	d4f7      	bmi.n	80065dc <_vfiprintf_r+0x44>
 80065ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ee:	f7fe f9fb 	bl	80049e8 <__retarget_lock_release_recursive>
 80065f2:	e7f3      	b.n	80065dc <_vfiprintf_r+0x44>
 80065f4:	2300      	movs	r3, #0
 80065f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80065f8:	2320      	movs	r3, #32
 80065fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006602:	2330      	movs	r3, #48	@ 0x30
 8006604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067b4 <_vfiprintf_r+0x21c>
 8006608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800660c:	f04f 0901 	mov.w	r9, #1
 8006610:	4623      	mov	r3, r4
 8006612:	469a      	mov	sl, r3
 8006614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006618:	b10a      	cbz	r2, 800661e <_vfiprintf_r+0x86>
 800661a:	2a25      	cmp	r2, #37	@ 0x25
 800661c:	d1f9      	bne.n	8006612 <_vfiprintf_r+0x7a>
 800661e:	ebba 0b04 	subs.w	fp, sl, r4
 8006622:	d00b      	beq.n	800663c <_vfiprintf_r+0xa4>
 8006624:	465b      	mov	r3, fp
 8006626:	4622      	mov	r2, r4
 8006628:	4629      	mov	r1, r5
 800662a:	4630      	mov	r0, r6
 800662c:	f7ff ffa2 	bl	8006574 <__sfputs_r>
 8006630:	3001      	adds	r0, #1
 8006632:	f000 80a7 	beq.w	8006784 <_vfiprintf_r+0x1ec>
 8006636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006638:	445a      	add	r2, fp
 800663a:	9209      	str	r2, [sp, #36]	@ 0x24
 800663c:	f89a 3000 	ldrb.w	r3, [sl]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 809f 	beq.w	8006784 <_vfiprintf_r+0x1ec>
 8006646:	2300      	movs	r3, #0
 8006648:	f04f 32ff 	mov.w	r2, #4294967295
 800664c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006650:	f10a 0a01 	add.w	sl, sl, #1
 8006654:	9304      	str	r3, [sp, #16]
 8006656:	9307      	str	r3, [sp, #28]
 8006658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800665c:	931a      	str	r3, [sp, #104]	@ 0x68
 800665e:	4654      	mov	r4, sl
 8006660:	2205      	movs	r2, #5
 8006662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006666:	4853      	ldr	r0, [pc, #332]	@ (80067b4 <_vfiprintf_r+0x21c>)
 8006668:	f7f9 fdba 	bl	80001e0 <memchr>
 800666c:	9a04      	ldr	r2, [sp, #16]
 800666e:	b9d8      	cbnz	r0, 80066a8 <_vfiprintf_r+0x110>
 8006670:	06d1      	lsls	r1, r2, #27
 8006672:	bf44      	itt	mi
 8006674:	2320      	movmi	r3, #32
 8006676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800667a:	0713      	lsls	r3, r2, #28
 800667c:	bf44      	itt	mi
 800667e:	232b      	movmi	r3, #43	@ 0x2b
 8006680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006684:	f89a 3000 	ldrb.w	r3, [sl]
 8006688:	2b2a      	cmp	r3, #42	@ 0x2a
 800668a:	d015      	beq.n	80066b8 <_vfiprintf_r+0x120>
 800668c:	9a07      	ldr	r2, [sp, #28]
 800668e:	4654      	mov	r4, sl
 8006690:	2000      	movs	r0, #0
 8006692:	f04f 0c0a 	mov.w	ip, #10
 8006696:	4621      	mov	r1, r4
 8006698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800669c:	3b30      	subs	r3, #48	@ 0x30
 800669e:	2b09      	cmp	r3, #9
 80066a0:	d94b      	bls.n	800673a <_vfiprintf_r+0x1a2>
 80066a2:	b1b0      	cbz	r0, 80066d2 <_vfiprintf_r+0x13a>
 80066a4:	9207      	str	r2, [sp, #28]
 80066a6:	e014      	b.n	80066d2 <_vfiprintf_r+0x13a>
 80066a8:	eba0 0308 	sub.w	r3, r0, r8
 80066ac:	fa09 f303 	lsl.w	r3, r9, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	46a2      	mov	sl, r4
 80066b6:	e7d2      	b.n	800665e <_vfiprintf_r+0xc6>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	1d19      	adds	r1, r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	9103      	str	r1, [sp, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	bfbb      	ittet	lt
 80066c4:	425b      	neglt	r3, r3
 80066c6:	f042 0202 	orrlt.w	r2, r2, #2
 80066ca:	9307      	strge	r3, [sp, #28]
 80066cc:	9307      	strlt	r3, [sp, #28]
 80066ce:	bfb8      	it	lt
 80066d0:	9204      	strlt	r2, [sp, #16]
 80066d2:	7823      	ldrb	r3, [r4, #0]
 80066d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80066d6:	d10a      	bne.n	80066ee <_vfiprintf_r+0x156>
 80066d8:	7863      	ldrb	r3, [r4, #1]
 80066da:	2b2a      	cmp	r3, #42	@ 0x2a
 80066dc:	d132      	bne.n	8006744 <_vfiprintf_r+0x1ac>
 80066de:	9b03      	ldr	r3, [sp, #12]
 80066e0:	1d1a      	adds	r2, r3, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	9203      	str	r2, [sp, #12]
 80066e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066ea:	3402      	adds	r4, #2
 80066ec:	9305      	str	r3, [sp, #20]
 80066ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067c4 <_vfiprintf_r+0x22c>
 80066f2:	7821      	ldrb	r1, [r4, #0]
 80066f4:	2203      	movs	r2, #3
 80066f6:	4650      	mov	r0, sl
 80066f8:	f7f9 fd72 	bl	80001e0 <memchr>
 80066fc:	b138      	cbz	r0, 800670e <_vfiprintf_r+0x176>
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	eba0 000a 	sub.w	r0, r0, sl
 8006704:	2240      	movs	r2, #64	@ 0x40
 8006706:	4082      	lsls	r2, r0
 8006708:	4313      	orrs	r3, r2
 800670a:	3401      	adds	r4, #1
 800670c:	9304      	str	r3, [sp, #16]
 800670e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006712:	4829      	ldr	r0, [pc, #164]	@ (80067b8 <_vfiprintf_r+0x220>)
 8006714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006718:	2206      	movs	r2, #6
 800671a:	f7f9 fd61 	bl	80001e0 <memchr>
 800671e:	2800      	cmp	r0, #0
 8006720:	d03f      	beq.n	80067a2 <_vfiprintf_r+0x20a>
 8006722:	4b26      	ldr	r3, [pc, #152]	@ (80067bc <_vfiprintf_r+0x224>)
 8006724:	bb1b      	cbnz	r3, 800676e <_vfiprintf_r+0x1d6>
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	3307      	adds	r3, #7
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	3308      	adds	r3, #8
 8006730:	9303      	str	r3, [sp, #12]
 8006732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006734:	443b      	add	r3, r7
 8006736:	9309      	str	r3, [sp, #36]	@ 0x24
 8006738:	e76a      	b.n	8006610 <_vfiprintf_r+0x78>
 800673a:	fb0c 3202 	mla	r2, ip, r2, r3
 800673e:	460c      	mov	r4, r1
 8006740:	2001      	movs	r0, #1
 8006742:	e7a8      	b.n	8006696 <_vfiprintf_r+0xfe>
 8006744:	2300      	movs	r3, #0
 8006746:	3401      	adds	r4, #1
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	4619      	mov	r1, r3
 800674c:	f04f 0c0a 	mov.w	ip, #10
 8006750:	4620      	mov	r0, r4
 8006752:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006756:	3a30      	subs	r2, #48	@ 0x30
 8006758:	2a09      	cmp	r2, #9
 800675a:	d903      	bls.n	8006764 <_vfiprintf_r+0x1cc>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d0c6      	beq.n	80066ee <_vfiprintf_r+0x156>
 8006760:	9105      	str	r1, [sp, #20]
 8006762:	e7c4      	b.n	80066ee <_vfiprintf_r+0x156>
 8006764:	fb0c 2101 	mla	r1, ip, r1, r2
 8006768:	4604      	mov	r4, r0
 800676a:	2301      	movs	r3, #1
 800676c:	e7f0      	b.n	8006750 <_vfiprintf_r+0x1b8>
 800676e:	ab03      	add	r3, sp, #12
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	462a      	mov	r2, r5
 8006774:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <_vfiprintf_r+0x228>)
 8006776:	a904      	add	r1, sp, #16
 8006778:	4630      	mov	r0, r6
 800677a:	f7fd fbc5 	bl	8003f08 <_printf_float>
 800677e:	4607      	mov	r7, r0
 8006780:	1c78      	adds	r0, r7, #1
 8006782:	d1d6      	bne.n	8006732 <_vfiprintf_r+0x19a>
 8006784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006786:	07d9      	lsls	r1, r3, #31
 8006788:	d405      	bmi.n	8006796 <_vfiprintf_r+0x1fe>
 800678a:	89ab      	ldrh	r3, [r5, #12]
 800678c:	059a      	lsls	r2, r3, #22
 800678e:	d402      	bmi.n	8006796 <_vfiprintf_r+0x1fe>
 8006790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006792:	f7fe f929 	bl	80049e8 <__retarget_lock_release_recursive>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	065b      	lsls	r3, r3, #25
 800679a:	f53f af1f 	bmi.w	80065dc <_vfiprintf_r+0x44>
 800679e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067a0:	e71e      	b.n	80065e0 <_vfiprintf_r+0x48>
 80067a2:	ab03      	add	r3, sp, #12
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	462a      	mov	r2, r5
 80067a8:	4b05      	ldr	r3, [pc, #20]	@ (80067c0 <_vfiprintf_r+0x228>)
 80067aa:	a904      	add	r1, sp, #16
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7fd fe43 	bl	8004438 <_printf_i>
 80067b2:	e7e4      	b.n	800677e <_vfiprintf_r+0x1e6>
 80067b4:	08006ce8 	.word	0x08006ce8
 80067b8:	08006cf2 	.word	0x08006cf2
 80067bc:	08003f09 	.word	0x08003f09
 80067c0:	08006575 	.word	0x08006575
 80067c4:	08006cee 	.word	0x08006cee

080067c8 <__swbuf_r>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	460e      	mov	r6, r1
 80067cc:	4614      	mov	r4, r2
 80067ce:	4605      	mov	r5, r0
 80067d0:	b118      	cbz	r0, 80067da <__swbuf_r+0x12>
 80067d2:	6a03      	ldr	r3, [r0, #32]
 80067d4:	b90b      	cbnz	r3, 80067da <__swbuf_r+0x12>
 80067d6:	f7fd ffdb 	bl	8004790 <__sinit>
 80067da:	69a3      	ldr	r3, [r4, #24]
 80067dc:	60a3      	str	r3, [r4, #8]
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	071a      	lsls	r2, r3, #28
 80067e2:	d501      	bpl.n	80067e8 <__swbuf_r+0x20>
 80067e4:	6923      	ldr	r3, [r4, #16]
 80067e6:	b943      	cbnz	r3, 80067fa <__swbuf_r+0x32>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f000 f82a 	bl	8006844 <__swsetup_r>
 80067f0:	b118      	cbz	r0, 80067fa <__swbuf_r+0x32>
 80067f2:	f04f 37ff 	mov.w	r7, #4294967295
 80067f6:	4638      	mov	r0, r7
 80067f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	6922      	ldr	r2, [r4, #16]
 80067fe:	1a98      	subs	r0, r3, r2
 8006800:	6963      	ldr	r3, [r4, #20]
 8006802:	b2f6      	uxtb	r6, r6
 8006804:	4283      	cmp	r3, r0
 8006806:	4637      	mov	r7, r6
 8006808:	dc05      	bgt.n	8006816 <__swbuf_r+0x4e>
 800680a:	4621      	mov	r1, r4
 800680c:	4628      	mov	r0, r5
 800680e:	f7ff fd99 	bl	8006344 <_fflush_r>
 8006812:	2800      	cmp	r0, #0
 8006814:	d1ed      	bne.n	80067f2 <__swbuf_r+0x2a>
 8006816:	68a3      	ldr	r3, [r4, #8]
 8006818:	3b01      	subs	r3, #1
 800681a:	60a3      	str	r3, [r4, #8]
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	701e      	strb	r6, [r3, #0]
 8006824:	6962      	ldr	r2, [r4, #20]
 8006826:	1c43      	adds	r3, r0, #1
 8006828:	429a      	cmp	r2, r3
 800682a:	d004      	beq.n	8006836 <__swbuf_r+0x6e>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	07db      	lsls	r3, r3, #31
 8006830:	d5e1      	bpl.n	80067f6 <__swbuf_r+0x2e>
 8006832:	2e0a      	cmp	r6, #10
 8006834:	d1df      	bne.n	80067f6 <__swbuf_r+0x2e>
 8006836:	4621      	mov	r1, r4
 8006838:	4628      	mov	r0, r5
 800683a:	f7ff fd83 	bl	8006344 <_fflush_r>
 800683e:	2800      	cmp	r0, #0
 8006840:	d0d9      	beq.n	80067f6 <__swbuf_r+0x2e>
 8006842:	e7d6      	b.n	80067f2 <__swbuf_r+0x2a>

08006844 <__swsetup_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4b29      	ldr	r3, [pc, #164]	@ (80068ec <__swsetup_r+0xa8>)
 8006848:	4605      	mov	r5, r0
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	460c      	mov	r4, r1
 800684e:	b118      	cbz	r0, 8006858 <__swsetup_r+0x14>
 8006850:	6a03      	ldr	r3, [r0, #32]
 8006852:	b90b      	cbnz	r3, 8006858 <__swsetup_r+0x14>
 8006854:	f7fd ff9c 	bl	8004790 <__sinit>
 8006858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800685c:	0719      	lsls	r1, r3, #28
 800685e:	d422      	bmi.n	80068a6 <__swsetup_r+0x62>
 8006860:	06da      	lsls	r2, r3, #27
 8006862:	d407      	bmi.n	8006874 <__swsetup_r+0x30>
 8006864:	2209      	movs	r2, #9
 8006866:	602a      	str	r2, [r5, #0]
 8006868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	f04f 30ff 	mov.w	r0, #4294967295
 8006872:	e033      	b.n	80068dc <__swsetup_r+0x98>
 8006874:	0758      	lsls	r0, r3, #29
 8006876:	d512      	bpl.n	800689e <__swsetup_r+0x5a>
 8006878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800687a:	b141      	cbz	r1, 800688e <__swsetup_r+0x4a>
 800687c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006880:	4299      	cmp	r1, r3
 8006882:	d002      	beq.n	800688a <__swsetup_r+0x46>
 8006884:	4628      	mov	r0, r5
 8006886:	f7fe feff 	bl	8005688 <_free_r>
 800688a:	2300      	movs	r3, #0
 800688c:	6363      	str	r3, [r4, #52]	@ 0x34
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006894:	81a3      	strh	r3, [r4, #12]
 8006896:	2300      	movs	r3, #0
 8006898:	6063      	str	r3, [r4, #4]
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f043 0308 	orr.w	r3, r3, #8
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	b94b      	cbnz	r3, 80068be <__swsetup_r+0x7a>
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b4:	d003      	beq.n	80068be <__swsetup_r+0x7a>
 80068b6:	4621      	mov	r1, r4
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 f883 	bl	80069c4 <__smakebuf_r>
 80068be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c2:	f013 0201 	ands.w	r2, r3, #1
 80068c6:	d00a      	beq.n	80068de <__swsetup_r+0x9a>
 80068c8:	2200      	movs	r2, #0
 80068ca:	60a2      	str	r2, [r4, #8]
 80068cc:	6962      	ldr	r2, [r4, #20]
 80068ce:	4252      	negs	r2, r2
 80068d0:	61a2      	str	r2, [r4, #24]
 80068d2:	6922      	ldr	r2, [r4, #16]
 80068d4:	b942      	cbnz	r2, 80068e8 <__swsetup_r+0xa4>
 80068d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068da:	d1c5      	bne.n	8006868 <__swsetup_r+0x24>
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	0799      	lsls	r1, r3, #30
 80068e0:	bf58      	it	pl
 80068e2:	6962      	ldrpl	r2, [r4, #20]
 80068e4:	60a2      	str	r2, [r4, #8]
 80068e6:	e7f4      	b.n	80068d2 <__swsetup_r+0x8e>
 80068e8:	2000      	movs	r0, #0
 80068ea:	e7f7      	b.n	80068dc <__swsetup_r+0x98>
 80068ec:	20000018 	.word	0x20000018

080068f0 <_raise_r>:
 80068f0:	291f      	cmp	r1, #31
 80068f2:	b538      	push	{r3, r4, r5, lr}
 80068f4:	4605      	mov	r5, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	d904      	bls.n	8006904 <_raise_r+0x14>
 80068fa:	2316      	movs	r3, #22
 80068fc:	6003      	str	r3, [r0, #0]
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006906:	b112      	cbz	r2, 800690e <_raise_r+0x1e>
 8006908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800690c:	b94b      	cbnz	r3, 8006922 <_raise_r+0x32>
 800690e:	4628      	mov	r0, r5
 8006910:	f000 f830 	bl	8006974 <_getpid_r>
 8006914:	4622      	mov	r2, r4
 8006916:	4601      	mov	r1, r0
 8006918:	4628      	mov	r0, r5
 800691a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800691e:	f000 b817 	b.w	8006950 <_kill_r>
 8006922:	2b01      	cmp	r3, #1
 8006924:	d00a      	beq.n	800693c <_raise_r+0x4c>
 8006926:	1c59      	adds	r1, r3, #1
 8006928:	d103      	bne.n	8006932 <_raise_r+0x42>
 800692a:	2316      	movs	r3, #22
 800692c:	6003      	str	r3, [r0, #0]
 800692e:	2001      	movs	r0, #1
 8006930:	e7e7      	b.n	8006902 <_raise_r+0x12>
 8006932:	2100      	movs	r1, #0
 8006934:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006938:	4620      	mov	r0, r4
 800693a:	4798      	blx	r3
 800693c:	2000      	movs	r0, #0
 800693e:	e7e0      	b.n	8006902 <_raise_r+0x12>

08006940 <raise>:
 8006940:	4b02      	ldr	r3, [pc, #8]	@ (800694c <raise+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f7ff bfd3 	b.w	80068f0 <_raise_r>
 800694a:	bf00      	nop
 800694c:	20000018 	.word	0x20000018

08006950 <_kill_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d07      	ldr	r5, [pc, #28]	@ (8006970 <_kill_r+0x20>)
 8006954:	2300      	movs	r3, #0
 8006956:	4604      	mov	r4, r0
 8006958:	4608      	mov	r0, r1
 800695a:	4611      	mov	r1, r2
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	f7fa fe09 	bl	8001574 <_kill>
 8006962:	1c43      	adds	r3, r0, #1
 8006964:	d102      	bne.n	800696c <_kill_r+0x1c>
 8006966:	682b      	ldr	r3, [r5, #0]
 8006968:	b103      	cbz	r3, 800696c <_kill_r+0x1c>
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	bd38      	pop	{r3, r4, r5, pc}
 800696e:	bf00      	nop
 8006970:	20000424 	.word	0x20000424

08006974 <_getpid_r>:
 8006974:	f7fa bdf6 	b.w	8001564 <_getpid>

08006978 <__swhatbuf_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	460c      	mov	r4, r1
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	2900      	cmp	r1, #0
 8006982:	b096      	sub	sp, #88	@ 0x58
 8006984:	4615      	mov	r5, r2
 8006986:	461e      	mov	r6, r3
 8006988:	da0d      	bge.n	80069a6 <__swhatbuf_r+0x2e>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006990:	f04f 0100 	mov.w	r1, #0
 8006994:	bf14      	ite	ne
 8006996:	2340      	movne	r3, #64	@ 0x40
 8006998:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800699c:	2000      	movs	r0, #0
 800699e:	6031      	str	r1, [r6, #0]
 80069a0:	602b      	str	r3, [r5, #0]
 80069a2:	b016      	add	sp, #88	@ 0x58
 80069a4:	bd70      	pop	{r4, r5, r6, pc}
 80069a6:	466a      	mov	r2, sp
 80069a8:	f000 f848 	bl	8006a3c <_fstat_r>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dbec      	blt.n	800698a <__swhatbuf_r+0x12>
 80069b0:	9901      	ldr	r1, [sp, #4]
 80069b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069ba:	4259      	negs	r1, r3
 80069bc:	4159      	adcs	r1, r3
 80069be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069c2:	e7eb      	b.n	800699c <__swhatbuf_r+0x24>

080069c4 <__smakebuf_r>:
 80069c4:	898b      	ldrh	r3, [r1, #12]
 80069c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c8:	079d      	lsls	r5, r3, #30
 80069ca:	4606      	mov	r6, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	d507      	bpl.n	80069e0 <__smakebuf_r+0x1c>
 80069d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069d4:	6023      	str	r3, [r4, #0]
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	2301      	movs	r3, #1
 80069da:	6163      	str	r3, [r4, #20]
 80069dc:	b003      	add	sp, #12
 80069de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069e0:	ab01      	add	r3, sp, #4
 80069e2:	466a      	mov	r2, sp
 80069e4:	f7ff ffc8 	bl	8006978 <__swhatbuf_r>
 80069e8:	9f00      	ldr	r7, [sp, #0]
 80069ea:	4605      	mov	r5, r0
 80069ec:	4639      	mov	r1, r7
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7fe febe 	bl	8005770 <_malloc_r>
 80069f4:	b948      	cbnz	r0, 8006a0a <__smakebuf_r+0x46>
 80069f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fa:	059a      	lsls	r2, r3, #22
 80069fc:	d4ee      	bmi.n	80069dc <__smakebuf_r+0x18>
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	f043 0302 	orr.w	r3, r3, #2
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	e7e2      	b.n	80069d0 <__smakebuf_r+0xc>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	6020      	str	r0, [r4, #0]
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a12:	81a3      	strh	r3, [r4, #12]
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a1a:	b15b      	cbz	r3, 8006a34 <__smakebuf_r+0x70>
 8006a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f81d 	bl	8006a60 <_isatty_r>
 8006a26:	b128      	cbz	r0, 8006a34 <__smakebuf_r+0x70>
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	f023 0303 	bic.w	r3, r3, #3
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	81a3      	strh	r3, [r4, #12]
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	431d      	orrs	r5, r3
 8006a38:	81a5      	strh	r5, [r4, #12]
 8006a3a:	e7cf      	b.n	80069dc <__smakebuf_r+0x18>

08006a3c <_fstat_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	@ (8006a5c <_fstat_r+0x20>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f7fa fdf3 	bl	8001634 <_fstat>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d102      	bne.n	8006a58 <_fstat_r+0x1c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b103      	cbz	r3, 8006a58 <_fstat_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000424 	.word	0x20000424

08006a60 <_isatty_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	4d06      	ldr	r5, [pc, #24]	@ (8006a7c <_isatty_r+0x1c>)
 8006a64:	2300      	movs	r3, #0
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	f7fa fdf2 	bl	8001654 <_isatty>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_isatty_r+0x1a>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_isatty_r+0x1a>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	20000424 	.word	0x20000424

08006a80 <_init>:
 8006a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a82:	bf00      	nop
 8006a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a86:	bc08      	pop	{r3}
 8006a88:	469e      	mov	lr, r3
 8006a8a:	4770      	bx	lr

08006a8c <_fini>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr
