
HW_03_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d0  080037d0  000050fc  2**0
                  CONTENTS
  4 .ARM          00000008  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d8  080037d8  000050fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d8  080037d8  000047d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080037e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200000fc  080038dc  000050fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080038dc  000051fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c510  00000000  00000000  0000512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e9  00000000  00000000  0001163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00013028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000939  00000000  00000000  00013be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001551f  00000000  00000000  00014519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccd1  00000000  00000000  00029a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a6b  00000000  00000000  00036709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031a8  00000000  00000000  000c01b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000c3360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037a0 	.word	0x080037a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080037a0 	.word	0x080037a0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <playNote>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void playNote() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b096      	sub	sp, #88	@ 0x58
 80004c8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]
 80004f2:	615a      	str	r2, [r3, #20]
 80004f4:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2220      	movs	r2, #32
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f003 f923 	bl	8003748 <memset>

	  htim1.Instance = TIM1;
 8000502:	4b46      	ldr	r3, [pc, #280]	@ (800061c <playNote+0x158>)
 8000504:	4a46      	ldr	r2, [pc, #280]	@ (8000620 <playNote+0x15c>)
 8000506:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 100-1;                                                ///modificato
 8000508:	4b44      	ldr	r3, [pc, #272]	@ (800061c <playNote+0x158>)
 800050a:	2263      	movs	r2, #99	@ 0x63
 800050c:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050e:	4b43      	ldr	r3, [pc, #268]	@ (800061c <playNote+0x158>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = song[currentNote].period;                                ///modificato
 8000514:	4b43      	ldr	r3, [pc, #268]	@ (8000624 <playNote+0x160>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a43      	ldr	r2, [pc, #268]	@ (8000628 <playNote+0x164>)
 800051a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800051e:	461a      	mov	r2, r3
 8000520:	4b3e      	ldr	r3, [pc, #248]	@ (800061c <playNote+0x158>)
 8000522:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b3d      	ldr	r3, [pc, #244]	@ (800061c <playNote+0x158>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 800052a:	4b3c      	ldr	r3, [pc, #240]	@ (800061c <playNote+0x158>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000530:	4b3a      	ldr	r3, [pc, #232]	@ (800061c <playNote+0x158>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000536:	4839      	ldr	r0, [pc, #228]	@ (800061c <playNote+0x158>)
 8000538:	f001 fcf0 	bl	8001f1c <HAL_TIM_Base_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <playNote+0x82>
	  {
		Error_Handler();
 8000542:	f000 fb8b 	bl	8000c5c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054a:	64bb      	str	r3, [r7, #72]	@ 0x48
	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800054c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000550:	4619      	mov	r1, r3
 8000552:	4832      	ldr	r0, [pc, #200]	@ (800061c <playNote+0x158>)
 8000554:	f002 f998 	bl	8002888 <HAL_TIM_ConfigClockSource>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <playNote+0x9e>
	  {
		Error_Handler();
 800055e:	f000 fb7d 	bl	8000c5c <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000562:	482e      	ldr	r0, [pc, #184]	@ (800061c <playNote+0x158>)
 8000564:	f001 fe14 	bl	8002190 <HAL_TIM_PWM_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <playNote+0xae>
	  {
		Error_Handler();
 800056e:	f000 fb75 	bl	8000c5c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000572:	2300      	movs	r3, #0
 8000574:	643b      	str	r3, [r7, #64]	@ 0x40
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	647b      	str	r3, [r7, #68]	@ 0x44
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800057e:	4619      	mov	r1, r3
 8000580:	4826      	ldr	r0, [pc, #152]	@ (800061c <playNote+0x158>)
 8000582:	f002 fd49 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <playNote+0xcc>
	  {
		Error_Handler();
 800058c:	f000 fb66 	bl	8000c5c <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000590:	2360      	movs	r3, #96	@ 0x60
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
	  sConfigOC.Pulse = song[currentNote].period / 2;                                   ///modificato
 8000594:	4b23      	ldr	r3, [pc, #140]	@ (8000624 <playNote+0x160>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a23      	ldr	r2, [pc, #140]	@ (8000628 <playNote+0x164>)
 800059a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800059e:	0fda      	lsrs	r2, r3, #31
 80005a0:	4413      	add	r3, r2
 80005a2:	105b      	asrs	r3, r3, #1
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a6:	2300      	movs	r3, #0
 80005a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005aa:	2300      	movs	r3, #0
 80005ac:	633b      	str	r3, [r7, #48]	@ 0x30
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	637b      	str	r3, [r7, #52]	@ 0x34
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005be:	2204      	movs	r2, #4
 80005c0:	4619      	mov	r1, r3
 80005c2:	4816      	ldr	r0, [pc, #88]	@ (800061c <playNote+0x158>)
 80005c4:	f002 f89e 	bl	8002704 <HAL_TIM_PWM_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <playNote+0x10e>
	  {
		Error_Handler();
 80005ce:	f000 fb45 	bl	8000c5c <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ea:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	4809      	ldr	r0, [pc, #36]	@ (800061c <playNote+0x158>)
 80005f6:	f002 fd7d 	bl	80030f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <playNote+0x140>
	  {
		Error_Handler();
 8000600:	f000 fb2c 	bl	8000c5c <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <playNote+0x158>)
 8000606:	f000 fb93 	bl	8000d30 <HAL_TIM_MspPostInit>

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // Start the PWM
 800060a:	2104      	movs	r1, #4
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <playNote+0x158>)
 800060e:	f001 fe19 	bl	8002244 <HAL_TIM_PWM_Start>
}
 8000612:	bf00      	nop
 8000614:	3758      	adds	r7, #88	@ 0x58
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000118 	.word	0x20000118
 8000620:	40010000 	.word	0x40010000
 8000624:	200001f0 	.word	0x200001f0
 8000628:	20000000 	.word	0x20000000

0800062c <startDuration>:

void startDuration() {
 800062c:	b580      	push	{r7, lr}
 800062e:	b08e      	sub	sp, #56	@ 0x38
 8000630:	af00      	add	r7, sp, #0

	//__HAL_TIM_SET_AUTORELOAD(&htim2, 10000-1);      // commented because is a wrong duration
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 800065c:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <startDuration+0x104>)
 800065e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000662:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 8400;
 8000664:	4b32      	ldr	r3, [pc, #200]	@ (8000730 <startDuration+0x104>)
 8000666:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 800066a:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b30      	ldr	r3, [pc, #192]	@ (8000730 <startDuration+0x104>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]

	  htim2.Init.Period = (4000-1) * song[currentNote].duration;   // (Period = 10000 - 1 == 1 second), prescaler = 8400 and period = 2000, then f=5hz and T=0.2s
 8000672:	4b30      	ldr	r3, [pc, #192]	@ (8000734 <startDuration+0x108>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a30      	ldr	r2, [pc, #192]	@ (8000738 <startDuration+0x10c>)
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	4413      	add	r3, r2
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	015b      	lsls	r3, r3, #5
 8000682:	1a9b      	subs	r3, r3, r2
 8000684:	01da      	lsls	r2, r3, #7
 8000686:	4413      	add	r3, r2
 8000688:	461a      	mov	r2, r3
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <startDuration+0x104>)
 800068c:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <startDuration+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <startDuration+0x104>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800069a:	4825      	ldr	r0, [pc, #148]	@ (8000730 <startDuration+0x104>)
 800069c:	f001 fc3e 	bl	8001f1c <HAL_TIM_Base_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <startDuration+0x7e>
	  {
		Error_Handler();
 80006a6:	f000 fad9 	bl	8000c5c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006b4:	4619      	mov	r1, r3
 80006b6:	481e      	ldr	r0, [pc, #120]	@ (8000730 <startDuration+0x104>)
 80006b8:	f002 f8e6 	bl	8002888 <HAL_TIM_ConfigClockSource>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <startDuration+0x9a>
	  {
		Error_Handler();
 80006c2:	f000 facb 	bl	8000c5c <Error_Handler>
	  }
	  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80006c6:	481a      	ldr	r0, [pc, #104]	@ (8000730 <startDuration+0x104>)
 80006c8:	f001 fd09 	bl	80020de <HAL_TIM_OC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <startDuration+0xaa>
	  {
		Error_Handler();
 80006d2:	f000 fac3 	bl	8000c5c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	4619      	mov	r1, r3
 80006e4:	4812      	ldr	r0, [pc, #72]	@ (8000730 <startDuration+0x104>)
 80006e6:	f002 fc97 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <startDuration+0xc8>
	  {
		Error_Handler();
 80006f0:	f000 fab4 	bl	8000c5c <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	4809      	ldr	r0, [pc, #36]	@ (8000730 <startDuration+0x104>)
 800070c:	f001 ff9e 	bl	800264c <HAL_TIM_OC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <startDuration+0xee>
	  {
		Error_Handler();
 8000716:	f000 faa1 	bl	8000c5c <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */
	  HAL_TIM_MspPostInit(&htim2);
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <startDuration+0x104>)
 800071c:	f000 fb08 	bl	8000d30 <HAL_TIM_MspPostInit>

	  HAL_TIM_Base_Start_IT(&htim2);
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <startDuration+0x104>)
 8000722:	f001 fc4b 	bl	8001fbc <HAL_TIM_Base_Start_IT>
}
 8000726:	bf00      	nop
 8000728:	3738      	adds	r7, #56	@ 0x38
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000160 	.word	0x20000160
 8000734:	200001f0 	.word	0x200001f0
 8000738:	20000000 	.word	0x20000000

0800073c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800074c:	d11a      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x48>
		// Stop the current note
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800074e:	2104      	movs	r1, #4
 8000750:	480e      	ldr	r0, [pc, #56]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000752:	f001 fe27 	bl	80023a4 <HAL_TIM_PWM_Stop>

		// Move to the next note
		currentNote++;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	4a0c      	ldr	r2, [pc, #48]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800075e:	6013      	str	r3, [r2, #0]
		if (currentNote >= (sizeof(song) / sizeof(song[0]) )) {
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b1d      	cmp	r3, #29
 8000766:	d909      	bls.n	800077c <HAL_TIM_PeriodElapsedCallback+0x40>
			currentNote = 0;  //reset to 0 in order to enable the song to be played again
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
			play = 0;          //song is not playing currently
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8000774:	4808      	ldr	r0, [pc, #32]	@ (8000798 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000776:	f001 fc83 	bl	8002080 <HAL_TIM_Base_Stop_IT>
			return;
 800077a:	e003      	b.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x48>
		}

		// Play the next note
		playNote();
 800077c:	f7ff fea2 	bl	80004c4 <playNote>

		// Start timer for the next note's duration
		startDuration();
 8000780:	f7ff ff54 	bl	800062c <startDuration>
	}
}
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000118 	.word	0x20000118
 8000790:	200001f0 	.word	0x200001f0
 8000794:	200001f4 	.word	0x200001f4
 8000798:	20000160 	.word	0x20000160

0800079c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){  //if there is an interrupt on the microphone
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	  switch(GPIO_Pin){
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007ac:	d10c      	bne.n	80007c8 <HAL_GPIO_EXTI_Callback+0x2c>
	  case GPIO_PIN_8:
		  if(play == 0){
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d109      	bne.n	80007cc <HAL_GPIO_EXTI_Callback+0x30>
			  play = 1;  //set that the song is currently playing
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
			  playNote(); //start the first note
 80007be:	f7ff fe81 	bl	80004c4 <playNote>
			  startDuration(); //start the delay for the first note
 80007c2:	f7ff ff33 	bl	800062c <startDuration>
		  }
		  break;
 80007c6:	e001      	b.n	80007cc <HAL_GPIO_EXTI_Callback+0x30>
	  default:
		  break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <HAL_GPIO_EXTI_Callback+0x32>
		  break;
 80007cc:	bf00      	nop
	  }
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001f4 	.word	0x200001f4

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fbca 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f80a 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f9b4 	bl	8000b54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f988 	bl	8000b00 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007f0:	f000 f870 	bl	80008d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007f4:	f000 f90e 	bl	8000a14 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <main+0x1c>

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f002 ff9c 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <SystemClock_Config+0xd0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a28      	ldr	r2, [pc, #160]	@ (80008cc <SystemClock_Config+0xd0>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <SystemClock_Config+0xd0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000848:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <SystemClock_Config+0xd4>)
 800084a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <SystemClock_Config+0xd4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000870:	2310      	movs	r3, #16
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000874:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000878:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800087a:	2304      	movs	r3, #4
 800087c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f000 feb0 	bl	80015ec <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000892:	f000 f9e3 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f912 	bl	8001adc <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008be:	f000 f9cd 	bl	8000c5c <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	@ 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b096      	sub	sp, #88	@ 0x58
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2220      	movs	r2, #32
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f002 ff1b 	bl	8003748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000912:	4b3e      	ldr	r3, [pc, #248]	@ (8000a0c <MX_TIM1_Init+0x138>)
 8000914:	4a3e      	ldr	r2, [pc, #248]	@ (8000a10 <MX_TIM1_Init+0x13c>)
 8000916:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000918:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <MX_TIM1_Init+0x138>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a0c <MX_TIM1_Init+0x138>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000924:	4b39      	ldr	r3, [pc, #228]	@ (8000a0c <MX_TIM1_Init+0x138>)
 8000926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800092a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092c:	4b37      	ldr	r3, [pc, #220]	@ (8000a0c <MX_TIM1_Init+0x138>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000932:	4b36      	ldr	r3, [pc, #216]	@ (8000a0c <MX_TIM1_Init+0x138>)
 8000934:	2200      	movs	r2, #0
 8000936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b34      	ldr	r3, [pc, #208]	@ (8000a0c <MX_TIM1_Init+0x138>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800093e:	4833      	ldr	r0, [pc, #204]	@ (8000a0c <MX_TIM1_Init+0x138>)
 8000940:	f001 faec 	bl	8001f1c <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800094a:	f000 f987 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000958:	4619      	mov	r1, r3
 800095a:	482c      	ldr	r0, [pc, #176]	@ (8000a0c <MX_TIM1_Init+0x138>)
 800095c:	f001 ff94 	bl	8002888 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000966:	f000 f979 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096a:	4828      	ldr	r0, [pc, #160]	@ (8000a0c <MX_TIM1_Init+0x138>)
 800096c:	f001 fc10 	bl	8002190 <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000976:	f000 f971 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000986:	4619      	mov	r1, r3
 8000988:	4820      	ldr	r0, [pc, #128]	@ (8000a0c <MX_TIM1_Init+0x138>)
 800098a:	f002 fb45 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000994:	f000 f962 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	@ 0x60
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b8:	2204      	movs	r2, #4
 80009ba:	4619      	mov	r1, r3
 80009bc:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <MX_TIM1_Init+0x138>)
 80009be:	f001 fea1 	bl	8002704 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80009c8:	f000 f948 	bl	8000c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <MX_TIM1_Init+0x138>)
 80009f0:	f002 fb80 	bl	80030f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80009fa:	f000 f92f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <MX_TIM1_Init+0x138>)
 8000a00:	f000 f996 	bl	8000d30 <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3758      	adds	r7, #88	@ 0x58
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000118 	.word	0x20000118
 8000a10:	40010000 	.word	0x40010000

08000a14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	@ 0x38
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a4e:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b29      	ldr	r3, [pc, #164]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a5c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6e:	4823      	ldr	r0, [pc, #140]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a70:	f001 fa54 	bl	8001f1c <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 f8ef 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a8c:	f001 fefc 	bl	8002888 <HAL_TIM_ConfigClockSource>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a96:	f000 f8e1 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000a9c:	f001 fb1f 	bl	80020de <HAL_TIM_OC_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000aa6:	f000 f8d9 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000aba:	f002 faad 	bl	8003018 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ac4:	f000 f8ca 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000ae0:	f001 fdb4 	bl	800264c <HAL_TIM_OC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000aea:	f000 f8b7 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aee:	4803      	ldr	r0, [pc, #12]	@ (8000afc <MX_TIM2_Init+0xe8>)
 8000af0:	f000 f91e 	bl	8000d30 <HAL_TIM_MspPostInit>

}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	@ 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000160 	.word	0x20000160

08000b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_USART2_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_USART2_UART_Init+0x4c>)
 8000b38:	f002 fb42 	bl	80031c0 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f88b 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001a8 	.word	0x200001a8
 8000b50:	40004400 	.word	0x40004400

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b38      	ldr	r3, [pc, #224]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a37      	ldr	r2, [pc, #220]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b35      	ldr	r3, [pc, #212]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b31      	ldr	r3, [pc, #196]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a30      	ldr	r2, [pc, #192]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a29      	ldr	r2, [pc, #164]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a22      	ldr	r2, [pc, #136]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_GPIO_Init+0xfc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	481d      	ldr	r0, [pc, #116]	@ (8000c54 <MX_GPIO_Init+0x100>)
 8000be0:	f000 fcd2 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4817      	ldr	r0, [pc, #92]	@ (8000c58 <MX_GPIO_Init+0x104>)
 8000bfc:	f000 fb40 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c00:	2320      	movs	r3, #32
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <MX_GPIO_Init+0x100>)
 8000c18:	f000 fb32 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <MX_GPIO_Init+0x100>)
 8000c34:	f000 fb24 	bl	8001280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2017      	movs	r0, #23
 8000c3e:	f000 fae8 	bl	8001212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c42:	2017      	movs	r0, #23
 8000c44:	f000 fb01 	bl	800124a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	@ 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020800 	.word	0x40020800

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f000 faa8 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a18      	ldr	r2, [pc, #96]	@ (8000d28 <HAL_TIM_Base_MspInit+0x70>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_TIM_Base_MspInit+0x74>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <HAL_TIM_Base_MspInit+0x74>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_TIM_Base_MspInit+0x74>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ce6:	e01a      	b.n	8000d1e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cf0:	d115      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_TIM_Base_MspInit+0x74>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000d2c <HAL_TIM_Base_MspInit+0x74>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_TIM_Base_MspInit+0x74>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	201c      	movs	r0, #28
 8000d14:	f000 fa7d 	bl	8001212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d18:	201c      	movs	r0, #28
 8000d1a:	f000 fa96 	bl	800124a <HAL_NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a24      	ldr	r2, [pc, #144]	@ (8000de0 <HAL_TIM_MspPostInit+0xb0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d11f      	bne.n	8000d92 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a22      	ldr	r2, [pc, #136]	@ (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4817      	ldr	r0, [pc, #92]	@ (8000de8 <HAL_TIM_MspPostInit+0xb8>)
 8000d8c:	f000 fa78 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d90:	e022      	b.n	8000dd8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d9a:	d11d      	bne.n	8000dd8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da4:	4a0f      	ldr	r2, [pc, #60]	@ (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <HAL_TIM_MspPostInit+0xb4>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <HAL_TIM_MspPostInit+0xb8>)
 8000dd4:	f000 fa54 	bl	8001280 <HAL_GPIO_Init>
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	@ 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <HAL_UART_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_UART_MspInit+0x8c>)
 8000e62:	f000 fa0d 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	@ 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <NMI_Handler+0x4>

08000e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <MemManage_Handler+0x4>

08000e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed2:	f000 f8a3 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ede:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000ee2:	f000 fb6b 	bl	80015bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM2_IRQHandler+0x10>)
 8000ef2:	f001 fabb 	bl	800246c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000160 	.word	0x20000160

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f002 fc01 	bl	8003758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fc41 	bl	80007dc <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f68:	080037e0 	.word	0x080037e0
  ldr r2, =_sbss
 8000f6c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000f70:	200001fc 	.word	0x200001fc

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f92b 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe5c 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f943 	bl	8001266 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f90b 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000f0 	.word	0x200000f0
 8001014:	200000f8 	.word	0x200000f8
 8001018:	200000f4 	.word	0x200000f4

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200000f8 	.word	0x200000f8
 8001040:	200001f8 	.word	0x200001f8

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001f8 	.word	0x200001f8

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff29 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff3e 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff31 	bl	80010c0 <__NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffa2 	bl	80011b8 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e159      	b.n	8001550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8148 	bne.w	800154a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a2 	beq.w	800154a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b57      	ldr	r3, [pc, #348]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	4a56      	ldr	r2, [pc, #344]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001414:	6453      	str	r3, [r2, #68]	@ 0x44
 8001416:	4b54      	ldr	r3, [pc, #336]	@ (8001568 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001422:	4a52      	ldr	r2, [pc, #328]	@ (800156c <HAL_GPIO_Init+0x2ec>)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	@ (8001570 <HAL_GPIO_Init+0x2f0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x202>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a48      	ldr	r2, [pc, #288]	@ (8001574 <HAL_GPIO_Init+0x2f4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x1fe>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a47      	ldr	r2, [pc, #284]	@ (8001578 <HAL_GPIO_Init+0x2f8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x1fa>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a46      	ldr	r2, [pc, #280]	@ (800157c <HAL_GPIO_Init+0x2fc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x1f6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a45      	ldr	r2, [pc, #276]	@ (8001580 <HAL_GPIO_Init+0x300>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x1f2>
 800146e:	2304      	movs	r3, #4
 8001470:	e008      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001472:	2307      	movs	r3, #7
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001476:	2303      	movs	r3, #3
 8001478:	e004      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001482:	2300      	movs	r3, #0
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4093      	lsls	r3, r2
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001494:	4935      	ldr	r1, [pc, #212]	@ (800156c <HAL_GPIO_Init+0x2ec>)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a24      	ldr	r2, [pc, #144]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <HAL_GPIO_Init+0x304>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151a:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <HAL_GPIO_Init+0x304>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001544:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3301      	adds	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	f67f aea2 	bls.w	800129c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015c6:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f8de 	bl	800079c <HAL_GPIO_EXTI_Callback>
  }
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e267      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d075      	beq.n	80016f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160a:	4b88      	ldr	r3, [pc, #544]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00c      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b85      	ldr	r3, [pc, #532]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800161e:	2b08      	cmp	r3, #8
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b82      	ldr	r3, [pc, #520]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b7e      	ldr	r3, [pc, #504]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d157      	bne.n	80016f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e242      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x74>
 8001652:	4b76      	ldr	r3, [pc, #472]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a75      	ldr	r2, [pc, #468]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x98>
 800166a:	4b70      	ldr	r3, [pc, #448]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6f      	ldr	r2, [pc, #444]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6d      	ldr	r3, [pc, #436]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6c      	ldr	r2, [pc, #432]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001684:	4b69      	ldr	r3, [pc, #420]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a68      	ldr	r2, [pc, #416]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fcce 	bl	8001044 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fcca 	bl	8001044 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e207      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b5b      	ldr	r3, [pc, #364]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fcba 	bl	8001044 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fcb6 	bl	8001044 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1f3      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b51      	ldr	r3, [pc, #324]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xe8>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b47      	ldr	r3, [pc, #284]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b44      	ldr	r3, [pc, #272]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b41      	ldr	r3, [pc, #260]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1c7      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4937      	ldr	r1, [pc, #220]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_RCC_OscConfig+0x244>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fc6f 	bl	8001044 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fc6b 	bl	8001044 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1a8      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4925      	ldr	r1, [pc, #148]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_OscConfig+0x244>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc4e 	bl	8001044 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc4a 	bl	8001044 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e187      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d036      	beq.n	8001844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_RCC_OscConfig+0x248>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fc2e 	bl	8001044 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fc2a 	bl	8001044 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e167      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x200>
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_RCC_OscConfig+0x248>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fc17 	bl	8001044 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	e00e      	b.n	8001838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fc13 	bl	8001044 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d907      	bls.n	8001838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e150      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 800182c:	40023800 	.word	0x40023800
 8001830:	42470000 	.word	0x42470000
 8001834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b88      	ldr	r3, [pc, #544]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ea      	bne.n	800181a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8097 	beq.w	8001980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b81      	ldr	r3, [pc, #516]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b7a      	ldr	r3, [pc, #488]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b77      	ldr	r3, [pc, #476]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b74      	ldr	r3, [pc, #464]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a73      	ldr	r2, [pc, #460]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff fbd3 	bl	8001044 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fbcf 	bl	8001044 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e10c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2ea>
 80018c8:	4b64      	ldr	r3, [pc, #400]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a63      	ldr	r2, [pc, #396]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x30c>
 80018de:	4b5f      	ldr	r3, [pc, #380]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ee:	4a5b      	ldr	r2, [pc, #364]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018f8:	4b58      	ldr	r3, [pc, #352]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a57      	ldr	r2, [pc, #348]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	4b55      	ldr	r3, [pc, #340]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a54      	ldr	r2, [pc, #336]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fb94 	bl	8001044 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fb90 	bl	8001044 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0cb      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	4b49      	ldr	r3, [pc, #292]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x334>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fb7e 	bl	8001044 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fb7a 	bl	8001044 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0b5      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	4b3e      	ldr	r3, [pc, #248]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	4a38      	ldr	r2, [pc, #224]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a1 	beq.w	8001acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198a:	4b34      	ldr	r3, [pc, #208]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b08      	cmp	r3, #8
 8001994:	d05c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d141      	bne.n	8001a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb4e 	bl	8001044 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fb4a 	bl	8001044 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e087      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	491b      	ldr	r1, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fb23 	bl	8001044 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fb1f 	bl	8001044 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e05c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x416>
 8001a20:	e054      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fb0c 	bl	8001044 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fb08 	bl	8001044 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e045      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x444>
 8001a4e:	e03d      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e038      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d028      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d121      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0cc      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b68      	ldr	r3, [pc, #416]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90c      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b8      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a58      	ldr	r2, [pc, #352]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b50      	ldr	r3, [pc, #320]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	494d      	ldr	r1, [pc, #308]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d044      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b47      	ldr	r3, [pc, #284]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e067      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b37      	ldr	r3, [pc, #220]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4934      	ldr	r1, [pc, #208]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff fa3a 	bl	8001044 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff fa36 	bl	8001044 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d20c      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e032      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4916      	ldr	r1, [pc, #88]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490e      	ldr	r1, [pc, #56]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c62:	f000 f821 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490a      	ldr	r1, [pc, #40]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f99a 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	080037b8 	.word	0x080037b8
 8001ca0:	200000f0 	.word	0x200000f0
 8001ca4:	200000f4 	.word	0x200000f4

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cac:	b094      	sub	sp, #80	@ 0x50
 8001cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc0:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d00d      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	f200 80e1 	bhi.w	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x34>
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cda:	e0db      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b73      	ldr	r3, [pc, #460]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce0:	e0db      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce2:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce6:	e0d8      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	2200      	movs	r2, #0
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	6139      	str	r1, [r7, #16]
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4651      	mov	r1, sl
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4651      	mov	r1, sl
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d60:	4659      	mov	r1, fp
 8001d62:	eb63 0901 	sbc.w	r9, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb18 0303 	adds.w	r3, r8, r3
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	462b      	mov	r3, r5
 8001d88:	eb49 0303 	adc.w	r3, r9, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	024b      	lsls	r3, r1, #9
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da4:	4621      	mov	r1, r4
 8001da6:	024a      	lsls	r2, r1, #9
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001db8:	f7fe fa0c 	bl	80001d4 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc4:	e058      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	0159      	lsls	r1, r3, #5
 8001dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df2:	0150      	lsls	r0, r2, #5
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4641      	mov	r1, r8
 8001dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e18:	ebb2 040a 	subs.w	r4, r2, sl
 8001e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	00eb      	lsls	r3, r5, #3
 8001e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2e:	00e2      	lsls	r2, r4, #3
 8001e30:	4614      	mov	r4, r2
 8001e32:	461d      	mov	r5, r3
 8001e34:	4643      	mov	r3, r8
 8001e36:	18e3      	adds	r3, r4, r3
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	eb45 0303 	adc.w	r3, r5, r3
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4e:	4629      	mov	r1, r5
 8001e50:	028b      	lsls	r3, r1, #10
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e58:	4621      	mov	r1, r4
 8001e5a:	028a      	lsls	r2, r1, #10
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e62:	2200      	movs	r2, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	61fa      	str	r2, [r7, #28]
 8001e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6c:	f7fe f9b2 	bl	80001d4 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3750      	adds	r7, #80	@ 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200000f0 	.word	0x200000f0

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	@ (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	080037c8 	.word	0x080037c8

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffdc 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0b5b      	lsrs	r3, r3, #13
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	@ (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	080037c8 	.word	0x080037c8

08001f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e041      	b.n	8001fb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe feb8 	bl	8000cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f000 fd84 	bl	8002a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d001      	beq.n	8001fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e044      	b.n	800205e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x6c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ffe:	d013      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x6c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1a      	ldr	r2, [pc, #104]	@ (8002070 <HAL_TIM_Base_Start_IT+0xb4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x6c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a19      	ldr	r2, [pc, #100]	@ (8002074 <HAL_TIM_Base_Start_IT+0xb8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x6c>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <HAL_TIM_Base_Start_IT+0xbc>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x6c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	@ (800207c <HAL_TIM_Base_Start_IT+0xc0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d111      	bne.n	800204c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d010      	beq.n	800205c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	e007      	b.n	800205c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800
 8002078:	40000c00 	.word	0x40000c00
 800207c:	40014000 	.word	0x40014000

08002080 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6a1a      	ldr	r2, [r3, #32]
 800209e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10f      	bne.n	80020c8 <HAL_TIM_Base_Stop_IT+0x48>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <HAL_TIM_Base_Stop_IT+0x48>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e041      	b.n	8002174 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f839 	bl	800217c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f000 fca3 	bl	8002a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e041      	b.n	8002226 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f839 	bl	800222e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3304      	adds	r3, #4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f000 fc4a 	bl	8002a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_TIM_PWM_Start+0x24>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e022      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d109      	bne.n	8002282 <HAL_TIM_PWM_Start+0x3e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e015      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x58>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e008      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e068      	b.n	8002388 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_PWM_Start+0x82>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022c4:	e013      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x92>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022d4:	e00b      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start+0xa2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022e4:	e003      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fe68 	bl	8002fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a23      	ldr	r2, [pc, #140]	@ (8002390 <HAL_TIM_PWM_Start+0x14c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d107      	bne.n	8002316 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <HAL_TIM_PWM_Start+0x14c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d018      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002328:	d013      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a19      	ldr	r2, [pc, #100]	@ (8002394 <HAL_TIM_PWM_Start+0x150>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00e      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a17      	ldr	r2, [pc, #92]	@ (8002398 <HAL_TIM_PWM_Start+0x154>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a16      	ldr	r2, [pc, #88]	@ (800239c <HAL_TIM_PWM_Start+0x158>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d004      	beq.n	8002352 <HAL_TIM_PWM_Start+0x10e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <HAL_TIM_PWM_Start+0x15c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d111      	bne.n	8002376 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d010      	beq.n	8002386 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002374:	e007      	b.n	8002386 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40010000 	.word	0x40010000
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40014000 	.word	0x40014000

080023a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fe08 	bl	8002fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a29      	ldr	r2, [pc, #164]	@ (8002468 <HAL_TIM_PWM_Stop+0xc4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d117      	bne.n	80023f6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_TIM_PWM_Stop+0x52>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6a1a      	ldr	r2, [r3, #32]
 80023dc:	f240 4344 	movw	r3, #1092	@ 0x444
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <HAL_TIM_PWM_Stop+0x52>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <HAL_TIM_PWM_Stop+0x82>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	f240 4344 	movw	r3, #1092	@ 0x444
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d107      	bne.n	8002426 <HAL_TIM_PWM_Stop+0x82>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_TIM_PWM_Stop+0x92>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002434:	e013      	b.n	800245e <HAL_TIM_PWM_Stop+0xba>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d104      	bne.n	8002446 <HAL_TIM_PWM_Stop+0xa2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002444:	e00b      	b.n	800245e <HAL_TIM_PWM_Stop+0xba>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d104      	bne.n	8002456 <HAL_TIM_PWM_Stop+0xb2>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002454:	e003      	b.n	800245e <HAL_TIM_PWM_Stop+0xba>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40010000 	.word	0x40010000

0800246c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d020      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d01b      	beq.n	80024d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0202 	mvn.w	r2, #2
 80024a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fab7 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 faa9 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 faba 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d020      	beq.n	800251c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0204 	mvn.w	r2, #4
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa91 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fa83 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fa94 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d020      	beq.n	8002568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0208 	mvn.w	r2, #8
 8002538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa6b 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa5d 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fa6e 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	d020      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0210 	mvn.w	r2, #16
 8002584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2208      	movs	r2, #8
 800258a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa45 	bl	8002a2a <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa37 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fa48 	bl	8002a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0201 	mvn.w	r2, #1
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe f8b2 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fdd8 	bl	80031ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa19 	bl	8002a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0220 	mvn.w	r2, #32
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fdaa 	bl	8003198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_TIM_OC_ConfigChannel+0x1e>
 8002666:	2302      	movs	r3, #2
 8002668:	e048      	b.n	80026fc <HAL_TIM_OC_ConfigChannel+0xb0>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d839      	bhi.n	80026ec <HAL_TIM_OC_ConfigChannel+0xa0>
 8002678:	a201      	add	r2, pc, #4	@ (adr r2, 8002680 <HAL_TIM_OC_ConfigChannel+0x34>)
 800267a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267e:	bf00      	nop
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080026ed 	.word	0x080026ed
 8002688:	080026ed 	.word	0x080026ed
 800268c:	080026ed 	.word	0x080026ed
 8002690:	080026c3 	.word	0x080026c3
 8002694:	080026ed 	.word	0x080026ed
 8002698:	080026ed 	.word	0x080026ed
 800269c:	080026ed 	.word	0x080026ed
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026ed 	.word	0x080026ed
 80026a8:	080026ed 	.word	0x080026ed
 80026ac:	080026ed 	.word	0x080026ed
 80026b0:	080026df 	.word	0x080026df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 fa60 	bl	8002b80 <TIM_OC1_SetConfig>
      break;
 80026c0:	e017      	b.n	80026f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fabf 	bl	8002c4c <TIM_OC2_SetConfig>
      break;
 80026ce:	e010      	b.n	80026f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fb24 	bl	8002d24 <TIM_OC3_SetConfig>
      break;
 80026dc:	e009      	b.n	80026f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fb87 	bl	8002df8 <TIM_OC4_SetConfig>
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	75fb      	strb	r3, [r7, #23]
      break;
 80026f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800271e:	2302      	movs	r3, #2
 8002720:	e0ae      	b.n	8002880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0c      	cmp	r3, #12
 800272e:	f200 809f 	bhi.w	8002870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002732:	a201      	add	r2, pc, #4	@ (adr r2, 8002738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	0800276d 	.word	0x0800276d
 800273c:	08002871 	.word	0x08002871
 8002740:	08002871 	.word	0x08002871
 8002744:	08002871 	.word	0x08002871
 8002748:	080027ad 	.word	0x080027ad
 800274c:	08002871 	.word	0x08002871
 8002750:	08002871 	.word	0x08002871
 8002754:	08002871 	.word	0x08002871
 8002758:	080027ef 	.word	0x080027ef
 800275c:	08002871 	.word	0x08002871
 8002760:	08002871 	.word	0x08002871
 8002764:	08002871 	.word	0x08002871
 8002768:	0800282f 	.word	0x0800282f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa04 	bl	8002b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0208 	orr.w	r2, r2, #8
 8002786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0204 	bic.w	r2, r2, #4
 8002796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6999      	ldr	r1, [r3, #24]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	619a      	str	r2, [r3, #24]
      break;
 80027aa:	e064      	b.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fa4a 	bl	8002c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6999      	ldr	r1, [r3, #24]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	619a      	str	r2, [r3, #24]
      break;
 80027ec:	e043      	b.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fa95 	bl	8002d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0208 	orr.w	r2, r2, #8
 8002808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0204 	bic.w	r2, r2, #4
 8002818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69d9      	ldr	r1, [r3, #28]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	61da      	str	r2, [r3, #28]
      break;
 800282c:	e023      	b.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fadf 	bl	8002df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69d9      	ldr	r1, [r3, #28]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	021a      	lsls	r2, r3, #8
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	61da      	str	r2, [r3, #28]
      break;
 800286e:	e002      	b.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	75fb      	strb	r3, [r7, #23]
      break;
 8002874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_TIM_ConfigClockSource+0x1c>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0b4      	b.n	8002a0e <HAL_TIM_ConfigClockSource+0x186>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028dc:	d03e      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xd4>
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	f200 8087 	bhi.w	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028ea:	f000 8086 	beq.w	80029fa <HAL_TIM_ConfigClockSource+0x172>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f2:	d87f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028f4:	2b70      	cmp	r3, #112	@ 0x70
 80028f6:	d01a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0xa6>
 80028f8:	2b70      	cmp	r3, #112	@ 0x70
 80028fa:	d87b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b60      	cmp	r3, #96	@ 0x60
 80028fe:	d050      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002900:	2b60      	cmp	r3, #96	@ 0x60
 8002902:	d877      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b50      	cmp	r3, #80	@ 0x50
 8002906:	d03c      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0xfa>
 8002908:	2b50      	cmp	r3, #80	@ 0x50
 800290a:	d873      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d058      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d86f      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b30      	cmp	r3, #48	@ 0x30
 8002916:	d064      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002918:	2b30      	cmp	r3, #48	@ 0x30
 800291a:	d86b      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b20      	cmp	r3, #32
 800291e:	d060      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	2b20      	cmp	r3, #32
 8002922:	d867      	bhi.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b10      	cmp	r3, #16
 800292a:	d05a      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	e062      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800293e:	f000 fb25 	bl	8002f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
      break;
 800295a:	e04f      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	f000 fb0e 	bl	8002f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800297e:	609a      	str	r2, [r3, #8]
      break;
 8002980:	e03c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	461a      	mov	r2, r3
 8002990:	f000 fa82 	bl	8002e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2150      	movs	r1, #80	@ 0x50
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fadb 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 80029a0:	e02c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	461a      	mov	r2, r3
 80029b0:	f000 faa1 	bl	8002ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2160      	movs	r1, #96	@ 0x60
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 facb 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 80029c0:	e01c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	461a      	mov	r2, r3
 80029d0:	f000 fa62 	bl	8002e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2140      	movs	r1, #64	@ 0x40
 80029da:	4618      	mov	r0, r3
 80029dc:	f000 fabb 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 80029e0:	e00c      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f000 fab2 	bl	8002f56 <TIM_ITRx_SetConfig>
      break;
 80029f2:	e003      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e000      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <TIM_Base_SetConfig+0xfc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00f      	beq.n	8002aa0 <TIM_Base_SetConfig+0x38>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a86:	d00b      	beq.n	8002aa0 <TIM_Base_SetConfig+0x38>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a37      	ldr	r2, [pc, #220]	@ (8002b68 <TIM_Base_SetConfig+0x100>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d007      	beq.n	8002aa0 <TIM_Base_SetConfig+0x38>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a36      	ldr	r2, [pc, #216]	@ (8002b6c <TIM_Base_SetConfig+0x104>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d003      	beq.n	8002aa0 <TIM_Base_SetConfig+0x38>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a35      	ldr	r2, [pc, #212]	@ (8002b70 <TIM_Base_SetConfig+0x108>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d108      	bne.n	8002ab2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <TIM_Base_SetConfig+0xfc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01b      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac0:	d017      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a28      	ldr	r2, [pc, #160]	@ (8002b68 <TIM_Base_SetConfig+0x100>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a27      	ldr	r2, [pc, #156]	@ (8002b6c <TIM_Base_SetConfig+0x104>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00f      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a26      	ldr	r2, [pc, #152]	@ (8002b70 <TIM_Base_SetConfig+0x108>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00b      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a25      	ldr	r2, [pc, #148]	@ (8002b74 <TIM_Base_SetConfig+0x10c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d007      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a24      	ldr	r2, [pc, #144]	@ (8002b78 <TIM_Base_SetConfig+0x110>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <TIM_Base_SetConfig+0x8a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a23      	ldr	r2, [pc, #140]	@ (8002b7c <TIM_Base_SetConfig+0x114>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d108      	bne.n	8002b04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b64 <TIM_Base_SetConfig+0xfc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d103      	bne.n	8002b38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d105      	bne.n	8002b56 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f023 0201 	bic.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	611a      	str	r2, [r3, #16]
  }
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40014400 	.word	0x40014400
 8002b7c:	40014800 	.word	0x40014800

08002b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f023 0201 	bic.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c48 <TIM_OC1_SetConfig+0xc8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d10c      	bne.n	8002bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0308 	bic.w	r3, r3, #8
 8002be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 0304 	bic.w	r3, r3, #4
 8002bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a13      	ldr	r2, [pc, #76]	@ (8002c48 <TIM_OC1_SetConfig+0xc8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d111      	bne.n	8002c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	621a      	str	r2, [r3, #32]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40010000 	.word	0x40010000

08002c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 0210 	bic.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0320 	bic.w	r3, r3, #32
 8002c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d20 <TIM_OC2_SetConfig+0xd4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d10d      	bne.n	8002cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a15      	ldr	r2, [pc, #84]	@ (8002d20 <TIM_OC2_SetConfig+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d113      	bne.n	8002cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
}
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40010000 	.word	0x40010000

08002d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0303 	bic.w	r3, r3, #3
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002df4 <TIM_OC3_SetConfig+0xd0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10d      	bne.n	8002d9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <TIM_OC3_SetConfig+0xd0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d113      	bne.n	8002dce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	621a      	str	r2, [r3, #32]
}
 8002de8:	bf00      	nop
 8002dea:	371c      	adds	r7, #28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40010000 	.word	0x40010000

08002df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	031b      	lsls	r3, r3, #12
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <TIM_OC4_SetConfig+0x9c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d109      	bne.n	8002e6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40010000 	.word	0x40010000

08002e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	f023 0201 	bic.w	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f023 030a 	bic.w	r3, r3, #10
 8002ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b087      	sub	sp, #28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f023 0210 	bic.w	r2, r3, #16
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	031b      	lsls	r3, r3, #12
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f043 0307 	orr.w	r3, r3, #7
 8002f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	021a      	lsls	r2, r3, #8
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2201      	movs	r2, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	621a      	str	r2, [r3, #32]
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800302c:	2302      	movs	r3, #2
 800302e:	e050      	b.n	80030d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307c:	d013      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a18      	ldr	r2, [pc, #96]	@ (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a13      	ldr	r2, [pc, #76]	@ (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10c      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000

080030f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e03d      	b.n	800318c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e042      	b.n	8003258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fe00 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	@ 0x24
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f82b 	bl	8003260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b0c0      	sub	sp, #256	@ 0x100
 8003266:	af00      	add	r7, sp, #0
 8003268:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327c:	68d9      	ldr	r1, [r3, #12]
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	ea40 0301 	orr.w	r3, r0, r1
 8003288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	431a      	orrs	r2, r3
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032b8:	f021 010c 	bic.w	r1, r1, #12
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032c6:	430b      	orrs	r3, r1
 80032c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032da:	6999      	ldr	r1, [r3, #24]
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	ea40 0301 	orr.w	r3, r0, r1
 80032e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b8f      	ldr	r3, [pc, #572]	@ (800352c <UART_SetConfig+0x2cc>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d005      	beq.n	8003300 <UART_SetConfig+0xa0>
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003530 <UART_SetConfig+0x2d0>)
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d104      	bne.n	800330a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003300:	f7fe fdf8 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8003304:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003308:	e003      	b.n	8003312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800330a:	f7fe fddf 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 800330e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800331c:	f040 810c 	bne.w	8003538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003324:	2200      	movs	r2, #0
 8003326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800332a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800332e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003332:	4622      	mov	r2, r4
 8003334:	462b      	mov	r3, r5
 8003336:	1891      	adds	r1, r2, r2
 8003338:	65b9      	str	r1, [r7, #88]	@ 0x58
 800333a:	415b      	adcs	r3, r3
 800333c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800333e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003342:	4621      	mov	r1, r4
 8003344:	eb12 0801 	adds.w	r8, r2, r1
 8003348:	4629      	mov	r1, r5
 800334a:	eb43 0901 	adc.w	r9, r3, r1
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800335a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800335e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003362:	4690      	mov	r8, r2
 8003364:	4699      	mov	r9, r3
 8003366:	4623      	mov	r3, r4
 8003368:	eb18 0303 	adds.w	r3, r8, r3
 800336c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003370:	462b      	mov	r3, r5
 8003372:	eb49 0303 	adc.w	r3, r9, r3
 8003376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003386:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800338a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800338e:	460b      	mov	r3, r1
 8003390:	18db      	adds	r3, r3, r3
 8003392:	653b      	str	r3, [r7, #80]	@ 0x50
 8003394:	4613      	mov	r3, r2
 8003396:	eb42 0303 	adc.w	r3, r2, r3
 800339a:	657b      	str	r3, [r7, #84]	@ 0x54
 800339c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033a4:	f7fc ff16 	bl	80001d4 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4b61      	ldr	r3, [pc, #388]	@ (8003534 <UART_SetConfig+0x2d4>)
 80033ae:	fba3 2302 	umull	r2, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	011c      	lsls	r4, r3, #4
 80033b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ba:	2200      	movs	r2, #0
 80033bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033d0:	415b      	adcs	r3, r3
 80033d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033d8:	4641      	mov	r1, r8
 80033da:	eb12 0a01 	adds.w	sl, r2, r1
 80033de:	4649      	mov	r1, r9
 80033e0:	eb43 0b01 	adc.w	fp, r3, r1
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f8:	4692      	mov	sl, r2
 80033fa:	469b      	mov	fp, r3
 80033fc:	4643      	mov	r3, r8
 80033fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003406:	464b      	mov	r3, r9
 8003408:	eb4b 0303 	adc.w	r3, fp, r3
 800340c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800341c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003424:	460b      	mov	r3, r1
 8003426:	18db      	adds	r3, r3, r3
 8003428:	643b      	str	r3, [r7, #64]	@ 0x40
 800342a:	4613      	mov	r3, r2
 800342c:	eb42 0303 	adc.w	r3, r2, r3
 8003430:	647b      	str	r3, [r7, #68]	@ 0x44
 8003432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800343a:	f7fc fecb 	bl	80001d4 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4611      	mov	r1, r2
 8003444:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <UART_SetConfig+0x2d4>)
 8003446:	fba3 2301 	umull	r2, r3, r3, r1
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	2264      	movs	r2, #100	@ 0x64
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	1acb      	subs	r3, r1, r3
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800345a:	4b36      	ldr	r3, [pc, #216]	@ (8003534 <UART_SetConfig+0x2d4>)
 800345c:	fba3 2302 	umull	r2, r3, r3, r2
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003468:	441c      	add	r4, r3
 800346a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003484:	415b      	adcs	r3, r3
 8003486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800348c:	4641      	mov	r1, r8
 800348e:	1851      	adds	r1, r2, r1
 8003490:	6339      	str	r1, [r7, #48]	@ 0x30
 8003492:	4649      	mov	r1, r9
 8003494:	414b      	adcs	r3, r1
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034a4:	4659      	mov	r1, fp
 80034a6:	00cb      	lsls	r3, r1, #3
 80034a8:	4651      	mov	r1, sl
 80034aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ae:	4651      	mov	r1, sl
 80034b0:	00ca      	lsls	r2, r1, #3
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	4642      	mov	r2, r8
 80034ba:	189b      	adds	r3, r3, r2
 80034bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034c0:	464b      	mov	r3, r9
 80034c2:	460a      	mov	r2, r1
 80034c4:	eb42 0303 	adc.w	r3, r2, r3
 80034c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034e0:	460b      	mov	r3, r1
 80034e2:	18db      	adds	r3, r3, r3
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034e6:	4613      	mov	r3, r2
 80034e8:	eb42 0303 	adc.w	r3, r2, r3
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034f6:	f7fc fe6d 	bl	80001d4 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003534 <UART_SetConfig+0x2d4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	@ 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	3332      	adds	r3, #50	@ 0x32
 8003512:	4a08      	ldr	r2, [pc, #32]	@ (8003534 <UART_SetConfig+0x2d4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 0207 	and.w	r2, r3, #7
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4422      	add	r2, r4
 8003526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003528:	e106      	b.n	8003738 <UART_SetConfig+0x4d8>
 800352a:	bf00      	nop
 800352c:	40011000 	.word	0x40011000
 8003530:	40011400 	.word	0x40011400
 8003534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800353c:	2200      	movs	r2, #0
 800353e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003542:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800354a:	4642      	mov	r2, r8
 800354c:	464b      	mov	r3, r9
 800354e:	1891      	adds	r1, r2, r2
 8003550:	6239      	str	r1, [r7, #32]
 8003552:	415b      	adcs	r3, r3
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
 8003556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800355a:	4641      	mov	r1, r8
 800355c:	1854      	adds	r4, r2, r1
 800355e:	4649      	mov	r1, r9
 8003560:	eb43 0501 	adc.w	r5, r3, r1
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	00eb      	lsls	r3, r5, #3
 800356e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003572:	00e2      	lsls	r2, r4, #3
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	4643      	mov	r3, r8
 800357a:	18e3      	adds	r3, r4, r3
 800357c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003580:	464b      	mov	r3, r9
 8003582:	eb45 0303 	adc.w	r3, r5, r3
 8003586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035a6:	4629      	mov	r1, r5
 80035a8:	008b      	lsls	r3, r1, #2
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b0:	4621      	mov	r1, r4
 80035b2:	008a      	lsls	r2, r1, #2
 80035b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035b8:	f7fc fe0c 	bl	80001d4 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4b60      	ldr	r3, [pc, #384]	@ (8003744 <UART_SetConfig+0x4e4>)
 80035c2:	fba3 2302 	umull	r2, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	011c      	lsls	r4, r3, #4
 80035ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	1891      	adds	r1, r2, r2
 80035e2:	61b9      	str	r1, [r7, #24]
 80035e4:	415b      	adcs	r3, r3
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ec:	4641      	mov	r1, r8
 80035ee:	1851      	adds	r1, r2, r1
 80035f0:	6139      	str	r1, [r7, #16]
 80035f2:	4649      	mov	r1, r9
 80035f4:	414b      	adcs	r3, r1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003604:	4659      	mov	r1, fp
 8003606:	00cb      	lsls	r3, r1, #3
 8003608:	4651      	mov	r1, sl
 800360a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360e:	4651      	mov	r1, sl
 8003610:	00ca      	lsls	r2, r1, #3
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	4603      	mov	r3, r0
 8003618:	4642      	mov	r2, r8
 800361a:	189b      	adds	r3, r3, r2
 800361c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003620:	464b      	mov	r3, r9
 8003622:	460a      	mov	r2, r1
 8003624:	eb42 0303 	adc.w	r3, r2, r3
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003644:	4649      	mov	r1, r9
 8003646:	008b      	lsls	r3, r1, #2
 8003648:	4641      	mov	r1, r8
 800364a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800364e:	4641      	mov	r1, r8
 8003650:	008a      	lsls	r2, r1, #2
 8003652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003656:	f7fc fdbd 	bl	80001d4 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4611      	mov	r1, r2
 8003660:	4b38      	ldr	r3, [pc, #224]	@ (8003744 <UART_SetConfig+0x4e4>)
 8003662:	fba3 2301 	umull	r2, r3, r3, r1
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2264      	movs	r2, #100	@ 0x64
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	1acb      	subs	r3, r1, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	3332      	adds	r3, #50	@ 0x32
 8003674:	4a33      	ldr	r2, [pc, #204]	@ (8003744 <UART_SetConfig+0x4e4>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003680:	441c      	add	r4, r3
 8003682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003686:	2200      	movs	r2, #0
 8003688:	673b      	str	r3, [r7, #112]	@ 0x70
 800368a:	677a      	str	r2, [r7, #116]	@ 0x74
 800368c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	415b      	adcs	r3, r3
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a0:	4641      	mov	r1, r8
 80036a2:	1851      	adds	r1, r2, r1
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	4649      	mov	r1, r9
 80036a8:	414b      	adcs	r3, r1
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036b8:	4659      	mov	r1, fp
 80036ba:	00cb      	lsls	r3, r1, #3
 80036bc:	4651      	mov	r1, sl
 80036be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c2:	4651      	mov	r1, sl
 80036c4:	00ca      	lsls	r2, r1, #3
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	4642      	mov	r2, r8
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036d2:	464b      	mov	r3, r9
 80036d4:	460a      	mov	r2, r1
 80036d6:	eb42 0303 	adc.w	r3, r2, r3
 80036da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80036e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036f4:	4649      	mov	r1, r9
 80036f6:	008b      	lsls	r3, r1, #2
 80036f8:	4641      	mov	r1, r8
 80036fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036fe:	4641      	mov	r1, r8
 8003700:	008a      	lsls	r2, r1, #2
 8003702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003706:	f7fc fd65 	bl	80001d4 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <UART_SetConfig+0x4e4>)
 8003710:	fba3 1302 	umull	r1, r3, r3, r2
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	2164      	movs	r1, #100	@ 0x64
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	3332      	adds	r3, #50	@ 0x32
 8003722:	4a08      	ldr	r2, [pc, #32]	@ (8003744 <UART_SetConfig+0x4e4>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4422      	add	r2, r4
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800373e:	46bd      	mov	sp, r7
 8003740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003744:	51eb851f 	.word	0x51eb851f

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <__libc_init_array>:
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4d0d      	ldr	r5, [pc, #52]	@ (8003790 <__libc_init_array+0x38>)
 800375c:	4c0d      	ldr	r4, [pc, #52]	@ (8003794 <__libc_init_array+0x3c>)
 800375e:	1b64      	subs	r4, r4, r5
 8003760:	10a4      	asrs	r4, r4, #2
 8003762:	2600      	movs	r6, #0
 8003764:	42a6      	cmp	r6, r4
 8003766:	d109      	bne.n	800377c <__libc_init_array+0x24>
 8003768:	4d0b      	ldr	r5, [pc, #44]	@ (8003798 <__libc_init_array+0x40>)
 800376a:	4c0c      	ldr	r4, [pc, #48]	@ (800379c <__libc_init_array+0x44>)
 800376c:	f000 f818 	bl	80037a0 <_init>
 8003770:	1b64      	subs	r4, r4, r5
 8003772:	10a4      	asrs	r4, r4, #2
 8003774:	2600      	movs	r6, #0
 8003776:	42a6      	cmp	r6, r4
 8003778:	d105      	bne.n	8003786 <__libc_init_array+0x2e>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003780:	4798      	blx	r3
 8003782:	3601      	adds	r6, #1
 8003784:	e7ee      	b.n	8003764 <__libc_init_array+0xc>
 8003786:	f855 3b04 	ldr.w	r3, [r5], #4
 800378a:	4798      	blx	r3
 800378c:	3601      	adds	r6, #1
 800378e:	e7f2      	b.n	8003776 <__libc_init_array+0x1e>
 8003790:	080037d8 	.word	0x080037d8
 8003794:	080037d8 	.word	0x080037d8
 8003798:	080037d8 	.word	0x080037d8
 800379c:	080037dc 	.word	0x080037dc

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
